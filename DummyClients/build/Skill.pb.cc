// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Skill.proto

#include "Skill.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace skill {
constexpr S_CoolTime::S_CoolTime(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(0)
  , skill_type_(0)
{}
struct S_CoolTimeDefaultTypeInternal {
  constexpr S_CoolTimeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CoolTimeDefaultTypeInternal() {}
  union {
    S_CoolTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CoolTimeDefaultTypeInternal _S_CoolTime_default_instance_;
constexpr C_Warrior_Attack::C_Warrior_Attack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct C_Warrior_AttackDefaultTypeInternal {
  constexpr C_Warrior_AttackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_Warrior_AttackDefaultTypeInternal() {}
  union {
    C_Warrior_Attack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_Warrior_AttackDefaultTypeInternal _C_Warrior_Attack_default_instance_;
constexpr S_Warrior_Attack::S_Warrior_Attack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_Warrior_AttackDefaultTypeInternal {
  constexpr S_Warrior_AttackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Warrior_AttackDefaultTypeInternal() {}
  union {
    S_Warrior_Attack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Warrior_AttackDefaultTypeInternal _S_Warrior_Attack_default_instance_;
constexpr C_Warrior_Q::C_Warrior_Q(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct C_Warrior_QDefaultTypeInternal {
  constexpr C_Warrior_QDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_Warrior_QDefaultTypeInternal() {}
  union {
    C_Warrior_Q _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_Warrior_QDefaultTypeInternal _C_Warrior_Q_default_instance_;
constexpr S_Warrior_Q::S_Warrior_Q(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_Warrior_QDefaultTypeInternal {
  constexpr S_Warrior_QDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Warrior_QDefaultTypeInternal() {}
  union {
    S_Warrior_Q _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Warrior_QDefaultTypeInternal _S_Warrior_Q_default_instance_;
constexpr C_Warrior_Q_Hit::C_Warrior_Q_Hit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , target_id_(uint64_t{0u}){}
struct C_Warrior_Q_HitDefaultTypeInternal {
  constexpr C_Warrior_Q_HitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_Warrior_Q_HitDefaultTypeInternal() {}
  union {
    C_Warrior_Q_Hit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_Warrior_Q_HitDefaultTypeInternal _C_Warrior_Q_Hit_default_instance_;
constexpr S_Warrior_Q_Hit::S_Warrior_Q_Hit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , target_id_(uint64_t{0u})
  , damage_(0){}
struct S_Warrior_Q_HitDefaultTypeInternal {
  constexpr S_Warrior_Q_HitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Warrior_Q_HitDefaultTypeInternal() {}
  union {
    S_Warrior_Q_Hit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Warrior_Q_HitDefaultTypeInternal _S_Warrior_Q_Hit_default_instance_;
constexpr C_Warrior_E::C_Warrior_E(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct C_Warrior_EDefaultTypeInternal {
  constexpr C_Warrior_EDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_Warrior_EDefaultTypeInternal() {}
  union {
    C_Warrior_E _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_Warrior_EDefaultTypeInternal _C_Warrior_E_default_instance_;
constexpr S_Warrior_E::S_Warrior_E(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_Warrior_EDefaultTypeInternal {
  constexpr S_Warrior_EDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Warrior_EDefaultTypeInternal() {}
  union {
    S_Warrior_E _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Warrior_EDefaultTypeInternal _S_Warrior_E_default_instance_;
constexpr C_Warrior_E_Success::C_Warrior_E_Success(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , target_id_(uint64_t{0u}){}
struct C_Warrior_E_SuccessDefaultTypeInternal {
  constexpr C_Warrior_E_SuccessDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_Warrior_E_SuccessDefaultTypeInternal() {}
  union {
    C_Warrior_E_Success _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_Warrior_E_SuccessDefaultTypeInternal _C_Warrior_E_Success_default_instance_;
constexpr S_Warrior_E_Success::S_Warrior_E_Success(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , target_id_(uint64_t{0u})
  , parry_count_(0){}
struct S_Warrior_E_SuccessDefaultTypeInternal {
  constexpr S_Warrior_E_SuccessDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Warrior_E_SuccessDefaultTypeInternal() {}
  union {
    S_Warrior_E_Success _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Warrior_E_SuccessDefaultTypeInternal _S_Warrior_E_Success_default_instance_;
constexpr C_Warrior_R::C_Warrior_R(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct C_Warrior_RDefaultTypeInternal {
  constexpr C_Warrior_RDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_Warrior_RDefaultTypeInternal() {}
  union {
    C_Warrior_R _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_Warrior_RDefaultTypeInternal _C_Warrior_R_default_instance_;
constexpr S_Warrior_R::S_Warrior_R(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_Warrior_RDefaultTypeInternal {
  constexpr S_Warrior_RDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Warrior_RDefaultTypeInternal() {}
  union {
    S_Warrior_R _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Warrior_RDefaultTypeInternal _S_Warrior_R_default_instance_;
constexpr C_Warrior_LS::C_Warrior_LS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , x_(0)
  , y_(0)
  , z_(0){}
struct C_Warrior_LSDefaultTypeInternal {
  constexpr C_Warrior_LSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_Warrior_LSDefaultTypeInternal() {}
  union {
    C_Warrior_LS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_Warrior_LSDefaultTypeInternal _C_Warrior_LS_default_instance_;
constexpr S_Warrior_LS::S_Warrior_LS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , x_(0)
  , y_(0)
  , z_(0)
  , yaw_(0){}
struct S_Warrior_LSDefaultTypeInternal {
  constexpr S_Warrior_LSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Warrior_LSDefaultTypeInternal() {}
  union {
    S_Warrior_LS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Warrior_LSDefaultTypeInternal _S_Warrior_LS_default_instance_;
constexpr C_ASSASSIN_Attack::C_ASSASSIN_Attack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct C_ASSASSIN_AttackDefaultTypeInternal {
  constexpr C_ASSASSIN_AttackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_ASSASSIN_AttackDefaultTypeInternal() {}
  union {
    C_ASSASSIN_Attack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_ASSASSIN_AttackDefaultTypeInternal _C_ASSASSIN_Attack_default_instance_;
constexpr S_ASSASSIN_Attack::S_ASSASSIN_Attack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_ASSASSIN_AttackDefaultTypeInternal {
  constexpr S_ASSASSIN_AttackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ASSASSIN_AttackDefaultTypeInternal() {}
  union {
    S_ASSASSIN_Attack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ASSASSIN_AttackDefaultTypeInternal _S_ASSASSIN_Attack_default_instance_;
constexpr C_ASSASSIN_Q::C_ASSASSIN_Q(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , x_(0)
  , y_(0)
  , z_(0)
  , pitch_(0)
  , yaw_(0)
  , roll_(0){}
struct C_ASSASSIN_QDefaultTypeInternal {
  constexpr C_ASSASSIN_QDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_ASSASSIN_QDefaultTypeInternal() {}
  union {
    C_ASSASSIN_Q _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_ASSASSIN_QDefaultTypeInternal _C_ASSASSIN_Q_default_instance_;
constexpr S_ASSASSIN_Q::S_ASSASSIN_Q(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , x_(0)
  , y_(0)
  , z_(0)
  , pitch_(0)
  , yaw_(0)
  , roll_(0){}
struct S_ASSASSIN_QDefaultTypeInternal {
  constexpr S_ASSASSIN_QDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ASSASSIN_QDefaultTypeInternal() {}
  union {
    S_ASSASSIN_Q _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ASSASSIN_QDefaultTypeInternal _S_ASSASSIN_Q_default_instance_;
constexpr C_Assassin_E::C_Assassin_E(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , x_(0)
  , y_(0)
  , z_(0){}
struct C_Assassin_EDefaultTypeInternal {
  constexpr C_Assassin_EDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_Assassin_EDefaultTypeInternal() {}
  union {
    C_Assassin_E _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_Assassin_EDefaultTypeInternal _C_Assassin_E_default_instance_;
constexpr S_Assassin_E::S_Assassin_E(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , x_(0)
  , y_(0)
  , z_(0){}
struct S_Assassin_EDefaultTypeInternal {
  constexpr S_Assassin_EDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Assassin_EDefaultTypeInternal() {}
  union {
    S_Assassin_E _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Assassin_EDefaultTypeInternal _S_Assassin_E_default_instance_;
constexpr C_ASSASSIN_R::C_ASSASSIN_R(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct C_ASSASSIN_RDefaultTypeInternal {
  constexpr C_ASSASSIN_RDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_ASSASSIN_RDefaultTypeInternal() {}
  union {
    C_ASSASSIN_R _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_ASSASSIN_RDefaultTypeInternal _C_ASSASSIN_R_default_instance_;
constexpr S_ASSASSIN_R::S_ASSASSIN_R(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_ASSASSIN_RDefaultTypeInternal {
  constexpr S_ASSASSIN_RDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ASSASSIN_RDefaultTypeInternal() {}
  union {
    S_ASSASSIN_R _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ASSASSIN_RDefaultTypeInternal _S_ASSASSIN_R_default_instance_;
constexpr C_ASSASSIN_LS::C_ASSASSIN_LS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct C_ASSASSIN_LSDefaultTypeInternal {
  constexpr C_ASSASSIN_LSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_ASSASSIN_LSDefaultTypeInternal() {}
  union {
    C_ASSASSIN_LS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_ASSASSIN_LSDefaultTypeInternal _C_ASSASSIN_LS_default_instance_;
constexpr S_ASSASSIN_LS::S_ASSASSIN_LS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_ASSASSIN_LSDefaultTypeInternal {
  constexpr S_ASSASSIN_LSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ASSASSIN_LSDefaultTypeInternal() {}
  union {
    S_ASSASSIN_LS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ASSASSIN_LSDefaultTypeInternal _S_ASSASSIN_LS_default_instance_;
constexpr C_Assassin_LS_Off::C_Assassin_LS_Off(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct C_Assassin_LS_OffDefaultTypeInternal {
  constexpr C_Assassin_LS_OffDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_Assassin_LS_OffDefaultTypeInternal() {}
  union {
    C_Assassin_LS_Off _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_Assassin_LS_OffDefaultTypeInternal _C_Assassin_LS_Off_default_instance_;
constexpr S_Assassin_LS_Off::S_Assassin_LS_Off(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_Assassin_LS_OffDefaultTypeInternal {
  constexpr S_Assassin_LS_OffDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Assassin_LS_OffDefaultTypeInternal() {}
  union {
    S_Assassin_LS_Off _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Assassin_LS_OffDefaultTypeInternal _S_Assassin_LS_Off_default_instance_;
constexpr C_Archor_Attack::C_Archor_Attack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , start_x_(0)
  , start_y_(0)
  , start_z_(0)
  , end_x_(0)
  , end_y_(0)
  , end_z_(0){}
struct C_Archor_AttackDefaultTypeInternal {
  constexpr C_Archor_AttackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_Archor_AttackDefaultTypeInternal() {}
  union {
    C_Archor_Attack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_Archor_AttackDefaultTypeInternal _C_Archor_Attack_default_instance_;
constexpr S_Archor_Attack::S_Archor_Attack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , start_x_(0)
  , start_y_(0)
  , start_z_(0)
  , end_x_(0)
  , end_y_(0)
  , end_z_(0)
  , r_mode_(0)
  , ls_mode_(0){}
struct S_Archor_AttackDefaultTypeInternal {
  constexpr S_Archor_AttackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Archor_AttackDefaultTypeInternal() {}
  union {
    S_Archor_Attack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Archor_AttackDefaultTypeInternal _S_Archor_Attack_default_instance_;
constexpr C_Archor_Q_Charging::C_Archor_Q_Charging(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct C_Archor_Q_ChargingDefaultTypeInternal {
  constexpr C_Archor_Q_ChargingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_Archor_Q_ChargingDefaultTypeInternal() {}
  union {
    C_Archor_Q_Charging _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_Archor_Q_ChargingDefaultTypeInternal _C_Archor_Q_Charging_default_instance_;
constexpr S_Archor_Q_Charging::S_Archor_Q_Charging(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , r_mode_(0){}
struct S_Archor_Q_ChargingDefaultTypeInternal {
  constexpr S_Archor_Q_ChargingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Archor_Q_ChargingDefaultTypeInternal() {}
  union {
    S_Archor_Q_Charging _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Archor_Q_ChargingDefaultTypeInternal _S_Archor_Q_Charging_default_instance_;
constexpr C_Archor_Q_Shot::C_Archor_Q_Shot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , start_x_(0)
  , start_y_(0)
  , start_z_(0)
  , end_x_(0)
  , end_y_(0)
  , end_z_(0){}
struct C_Archor_Q_ShotDefaultTypeInternal {
  constexpr C_Archor_Q_ShotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_Archor_Q_ShotDefaultTypeInternal() {}
  union {
    C_Archor_Q_Shot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_Archor_Q_ShotDefaultTypeInternal _C_Archor_Q_Shot_default_instance_;
constexpr S_Archor_Q_Shot::S_Archor_Q_Shot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , start_x_(0)
  , start_y_(0)
  , start_z_(0)
  , end_x_(0)
  , end_y_(0)
  , end_z_(0){}
struct S_Archor_Q_ShotDefaultTypeInternal {
  constexpr S_Archor_Q_ShotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Archor_Q_ShotDefaultTypeInternal() {}
  union {
    S_Archor_Q_Shot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Archor_Q_ShotDefaultTypeInternal _S_Archor_Q_Shot_default_instance_;
constexpr C_Archor_E::C_Archor_E(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , x_(0)
  , y_(0)
  , z_(0){}
struct C_Archor_EDefaultTypeInternal {
  constexpr C_Archor_EDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_Archor_EDefaultTypeInternal() {}
  union {
    C_Archor_E _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_Archor_EDefaultTypeInternal _C_Archor_E_default_instance_;
constexpr S_Archor_E::S_Archor_E(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , x_(0)
  , y_(0)
  , z_(0){}
struct S_Archor_EDefaultTypeInternal {
  constexpr S_Archor_EDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Archor_EDefaultTypeInternal() {}
  union {
    S_Archor_E _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Archor_EDefaultTypeInternal _S_Archor_E_default_instance_;
constexpr C_Archor_R::C_Archor_R(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct C_Archor_RDefaultTypeInternal {
  constexpr C_Archor_RDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_Archor_RDefaultTypeInternal() {}
  union {
    C_Archor_R _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_Archor_RDefaultTypeInternal _C_Archor_R_default_instance_;
constexpr S_Archor_R::S_Archor_R(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_Archor_RDefaultTypeInternal {
  constexpr S_Archor_RDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Archor_RDefaultTypeInternal() {}
  union {
    S_Archor_R _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Archor_RDefaultTypeInternal _S_Archor_R_default_instance_;
constexpr C_Archor_LS::C_Archor_LS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct C_Archor_LSDefaultTypeInternal {
  constexpr C_Archor_LSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_Archor_LSDefaultTypeInternal() {}
  union {
    C_Archor_LS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_Archor_LSDefaultTypeInternal _C_Archor_LS_default_instance_;
constexpr S_Archor_LS::S_Archor_LS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_Archor_LSDefaultTypeInternal {
  constexpr S_Archor_LSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Archor_LSDefaultTypeInternal() {}
  union {
    S_Archor_LS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Archor_LSDefaultTypeInternal _S_Archor_LS_default_instance_;
constexpr S_Archor_R_Off::S_Archor_R_Off(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_Archor_R_OffDefaultTypeInternal {
  constexpr S_Archor_R_OffDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Archor_R_OffDefaultTypeInternal() {}
  union {
    S_Archor_R_Off _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Archor_R_OffDefaultTypeInternal _S_Archor_R_Off_default_instance_;
constexpr S_Archor_LS_Off::S_Archor_LS_Off(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_Archor_LS_OffDefaultTypeInternal {
  constexpr S_Archor_LS_OffDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Archor_LS_OffDefaultTypeInternal() {}
  union {
    S_Archor_LS_Off _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Archor_LS_OffDefaultTypeInternal _S_Archor_LS_Off_default_instance_;
}  // namespace skill
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Skill_2eproto[41];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Skill_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Skill_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Skill_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_CoolTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_CoolTime, time_),
  PROTOBUF_FIELD_OFFSET(::skill::S_CoolTime, skill_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_Attack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_Attack, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_Attack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_Attack, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_Q, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_Q, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_Q, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_Q, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_Q_Hit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_Q_Hit, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_Q_Hit, target_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_Q_Hit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_Q_Hit, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_Q_Hit, target_id_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_Q_Hit, damage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_E, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_E, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_E, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_E, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_E_Success, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_E_Success, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_E_Success, target_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_E_Success, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_E_Success, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_E_Success, target_id_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_E_Success, parry_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_R, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_R, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_R, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_R, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_LS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_LS, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_LS, x_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_LS, y_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_LS, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_LS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_LS, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_LS, x_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_LS, y_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_LS, z_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_LS, yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_Attack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_Attack, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_Attack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_Attack, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_Q, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_Q, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_Q, x_),
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_Q, y_),
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_Q, z_),
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_Q, pitch_),
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_Q, yaw_),
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_Q, roll_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_Q, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_Q, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_Q, x_),
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_Q, y_),
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_Q, z_),
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_Q, pitch_),
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_Q, yaw_),
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_Q, roll_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Assassin_E, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::C_Assassin_E, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Assassin_E, x_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Assassin_E, y_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Assassin_E, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Assassin_E, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_Assassin_E, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Assassin_E, x_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Assassin_E, y_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Assassin_E, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_R, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_R, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_R, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_R, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_LS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_LS, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_LS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_LS, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Assassin_LS_Off, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::C_Assassin_LS_Off, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Assassin_LS_Off, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_Assassin_LS_Off, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Attack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Attack, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Attack, start_x_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Attack, start_y_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Attack, start_z_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Attack, end_x_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Attack, end_y_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Attack, end_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Attack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Attack, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Attack, start_x_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Attack, start_y_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Attack, start_z_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Attack, end_x_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Attack, end_y_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Attack, end_z_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Attack, r_mode_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Attack, ls_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Q_Charging, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Q_Charging, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Charging, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Charging, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Charging, r_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Q_Shot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Q_Shot, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Q_Shot, start_x_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Q_Shot, start_y_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Q_Shot, start_z_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Q_Shot, end_x_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Q_Shot, end_y_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Q_Shot, end_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Shot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Shot, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Shot, start_x_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Shot, start_y_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Shot, start_z_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Shot, end_x_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Shot, end_y_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Shot, end_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_E, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_E, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_E, x_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_E, y_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_E, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_E, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_E, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_E, x_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_E, y_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_E, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_R, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_R, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_R, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_R, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_LS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_LS, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_LS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_LS, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_R_Off, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_R_Off, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_LS_Off, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_LS_Off, object_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::skill::S_CoolTime)},
  { 7, -1, sizeof(::skill::C_Warrior_Attack)},
  { 13, -1, sizeof(::skill::S_Warrior_Attack)},
  { 19, -1, sizeof(::skill::C_Warrior_Q)},
  { 25, -1, sizeof(::skill::S_Warrior_Q)},
  { 31, -1, sizeof(::skill::C_Warrior_Q_Hit)},
  { 38, -1, sizeof(::skill::S_Warrior_Q_Hit)},
  { 46, -1, sizeof(::skill::C_Warrior_E)},
  { 52, -1, sizeof(::skill::S_Warrior_E)},
  { 58, -1, sizeof(::skill::C_Warrior_E_Success)},
  { 65, -1, sizeof(::skill::S_Warrior_E_Success)},
  { 73, -1, sizeof(::skill::C_Warrior_R)},
  { 79, -1, sizeof(::skill::S_Warrior_R)},
  { 85, -1, sizeof(::skill::C_Warrior_LS)},
  { 94, -1, sizeof(::skill::S_Warrior_LS)},
  { 104, -1, sizeof(::skill::C_ASSASSIN_Attack)},
  { 110, -1, sizeof(::skill::S_ASSASSIN_Attack)},
  { 116, -1, sizeof(::skill::C_ASSASSIN_Q)},
  { 128, -1, sizeof(::skill::S_ASSASSIN_Q)},
  { 140, -1, sizeof(::skill::C_Assassin_E)},
  { 149, -1, sizeof(::skill::S_Assassin_E)},
  { 158, -1, sizeof(::skill::C_ASSASSIN_R)},
  { 164, -1, sizeof(::skill::S_ASSASSIN_R)},
  { 170, -1, sizeof(::skill::C_ASSASSIN_LS)},
  { 176, -1, sizeof(::skill::S_ASSASSIN_LS)},
  { 182, -1, sizeof(::skill::C_Assassin_LS_Off)},
  { 188, -1, sizeof(::skill::S_Assassin_LS_Off)},
  { 194, -1, sizeof(::skill::C_Archor_Attack)},
  { 206, -1, sizeof(::skill::S_Archor_Attack)},
  { 220, -1, sizeof(::skill::C_Archor_Q_Charging)},
  { 226, -1, sizeof(::skill::S_Archor_Q_Charging)},
  { 233, -1, sizeof(::skill::C_Archor_Q_Shot)},
  { 245, -1, sizeof(::skill::S_Archor_Q_Shot)},
  { 257, -1, sizeof(::skill::C_Archor_E)},
  { 266, -1, sizeof(::skill::S_Archor_E)},
  { 275, -1, sizeof(::skill::C_Archor_R)},
  { 281, -1, sizeof(::skill::S_Archor_R)},
  { 287, -1, sizeof(::skill::C_Archor_LS)},
  { 293, -1, sizeof(::skill::S_Archor_LS)},
  { 299, -1, sizeof(::skill::S_Archor_R_Off)},
  { 305, -1, sizeof(::skill::S_Archor_LS_Off)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_CoolTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_C_Warrior_Attack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_Warrior_Attack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_C_Warrior_Q_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_Warrior_Q_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_C_Warrior_Q_Hit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_Warrior_Q_Hit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_C_Warrior_E_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_Warrior_E_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_C_Warrior_E_Success_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_Warrior_E_Success_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_C_Warrior_R_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_Warrior_R_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_C_Warrior_LS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_Warrior_LS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_C_ASSASSIN_Attack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_ASSASSIN_Attack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_C_ASSASSIN_Q_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_ASSASSIN_Q_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_C_Assassin_E_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_Assassin_E_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_C_ASSASSIN_R_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_ASSASSIN_R_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_C_ASSASSIN_LS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_ASSASSIN_LS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_C_Assassin_LS_Off_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_Assassin_LS_Off_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_C_Archor_Attack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_Archor_Attack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_C_Archor_Q_Charging_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_Archor_Q_Charging_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_C_Archor_Q_Shot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_Archor_Q_Shot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_C_Archor_E_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_Archor_E_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_C_Archor_R_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_Archor_R_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_C_Archor_LS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_Archor_LS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_Archor_R_Off_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::skill::_S_Archor_LS_Off_default_instance_),
};

const char descriptor_table_protodef_Skill_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Skill.proto\022\005skill\"@\n\nS_CoolTime\022\014\n\004ti"
  "me\030\001 \001(\005\022$\n\nskill_type\030\002 \001(\0162\020.skill.SKI"
  "LLTYPE\"%\n\020C_Warrior_Attack\022\021\n\tobject_id\030"
  "\001 \001(\004\"%\n\020S_Warrior_Attack\022\021\n\tobject_id\030\001"
  " \001(\004\" \n\013C_Warrior_Q\022\021\n\tobject_id\030\001 \001(\004\" "
  "\n\013S_Warrior_Q\022\021\n\tobject_id\030\001 \001(\004\"7\n\017C_Wa"
  "rrior_Q_Hit\022\021\n\tobject_id\030\001 \001(\004\022\021\n\ttarget"
  "_id\030\002 \001(\004\"G\n\017S_Warrior_Q_Hit\022\021\n\tobject_i"
  "d\030\001 \001(\004\022\021\n\ttarget_id\030\002 \001(\004\022\016\n\006damage\030\003 \001"
  "(\002\" \n\013C_Warrior_E\022\021\n\tobject_id\030\001 \001(\004\" \n\013"
  "S_Warrior_E\022\021\n\tobject_id\030\001 \001(\004\";\n\023C_Warr"
  "ior_E_Success\022\021\n\tobject_id\030\001 \001(\004\022\021\n\ttarg"
  "et_id\030\002 \001(\004\"P\n\023S_Warrior_E_Success\022\021\n\tob"
  "ject_id\030\001 \001(\004\022\021\n\ttarget_id\030\002 \001(\004\022\023\n\013parr"
  "y_count\030\003 \001(\005\" \n\013C_Warrior_R\022\021\n\tobject_i"
  "d\030\001 \001(\004\" \n\013S_Warrior_R\022\021\n\tobject_id\030\001 \001("
  "\004\"B\n\014C_Warrior_LS\022\021\n\tobject_id\030\001 \001(\004\022\t\n\001"
  "x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\"O\n\014S_Warri"
  "or_LS\022\021\n\tobject_id\030\001 \001(\004\022\t\n\001x\030\002 \001(\002\022\t\n\001y"
  "\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\022\013\n\003yaw\030\005 \001(\002\"&\n\021C_ASSA"
  "SSIN_Attack\022\021\n\tobject_id\030\001 \001(\004\"&\n\021S_ASSA"
  "SSIN_Attack\022\021\n\tobject_id\030\001 \001(\004\"l\n\014C_ASSA"
  "SSIN_Q\022\021\n\tobject_id\030\001 \001(\004\022\t\n\001x\030\002 \001(\002\022\t\n\001"
  "y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\022\r\n\005pitch\030\005 \001(\002\022\013\n\003yaw"
  "\030\006 \001(\002\022\014\n\004roll\030\007 \001(\002\"l\n\014S_ASSASSIN_Q\022\021\n\t"
  "object_id\030\001 \001(\004\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n"
  "\001z\030\004 \001(\002\022\r\n\005pitch\030\005 \001(\002\022\013\n\003yaw\030\006 \001(\002\022\014\n\004"
  "roll\030\007 \001(\002\"B\n\014C_Assassin_E\022\021\n\tobject_id\030"
  "\001 \001(\004\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\"B"
  "\n\014S_Assassin_E\022\021\n\tobject_id\030\001 \001(\004\022\t\n\001x\030\002"
  " \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\"!\n\014C_ASSASSIN"
  "_R\022\021\n\tobject_id\030\001 \001(\004\"!\n\014S_ASSASSIN_R\022\021\n"
  "\tobject_id\030\001 \001(\004\"\"\n\rC_ASSASSIN_LS\022\021\n\tobj"
  "ect_id\030\001 \001(\004\"\"\n\rS_ASSASSIN_LS\022\021\n\tobject_"
  "id\030\001 \001(\004\"&\n\021C_Assassin_LS_Off\022\021\n\tobject_"
  "id\030\001 \001(\004\"&\n\021S_Assassin_LS_Off\022\021\n\tobject_"
  "id\030\001 \001(\004\"\204\001\n\017C_Archor_Attack\022\021\n\tobject_i"
  "d\030\001 \001(\004\022\017\n\007start_x\030\002 \001(\002\022\017\n\007start_y\030\003 \001("
  "\002\022\017\n\007start_z\030\004 \001(\002\022\r\n\005end_x\030\005 \001(\002\022\r\n\005end"
  "_y\030\006 \001(\002\022\r\n\005end_z\030\007 \001(\002\"\245\001\n\017S_Archor_Att"
  "ack\022\021\n\tobject_id\030\001 \001(\004\022\017\n\007start_x\030\002 \001(\002\022"
  "\017\n\007start_y\030\003 \001(\002\022\017\n\007start_z\030\004 \001(\002\022\r\n\005end"
  "_x\030\005 \001(\002\022\r\n\005end_y\030\006 \001(\002\022\r\n\005end_z\030\007 \001(\002\022\016"
  "\n\006R_Mode\030\010 \001(\005\022\017\n\007LS_Mode\030\t \001(\005\"(\n\023C_Arc"
  "hor_Q_Charging\022\021\n\tobject_id\030\001 \001(\004\"8\n\023S_A"
  "rchor_Q_Charging\022\021\n\tobject_id\030\001 \001(\004\022\016\n\006R"
  "_Mode\030\002 \001(\005\"\204\001\n\017C_Archor_Q_Shot\022\021\n\tobjec"
  "t_id\030\001 \001(\004\022\017\n\007start_x\030\002 \001(\002\022\017\n\007start_y\030\003"
  " \001(\002\022\017\n\007start_z\030\004 \001(\002\022\r\n\005end_x\030\005 \001(\002\022\r\n\005"
  "end_y\030\006 \001(\002\022\r\n\005end_z\030\007 \001(\002\"\204\001\n\017S_Archor_"
  "Q_Shot\022\021\n\tobject_id\030\001 \001(\004\022\017\n\007start_x\030\002 \001"
  "(\002\022\017\n\007start_y\030\003 \001(\002\022\017\n\007start_z\030\004 \001(\002\022\r\n\005"
  "end_x\030\005 \001(\002\022\r\n\005end_y\030\006 \001(\002\022\r\n\005end_z\030\007 \001("
  "\002\"@\n\nC_Archor_E\022\021\n\tobject_id\030\001 \001(\004\022\t\n\001x\030"
  "\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\"@\n\nS_Archor_"
  "E\022\021\n\tobject_id\030\001 \001(\004\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001"
  "(\002\022\t\n\001z\030\004 \001(\002\"\037\n\nC_Archor_R\022\021\n\tobject_id"
  "\030\001 \001(\004\"\037\n\nS_Archor_R\022\021\n\tobject_id\030\001 \001(\004\""
  " \n\013C_Archor_LS\022\021\n\tobject_id\030\001 \001(\004\" \n\013S_A"
  "rchor_LS\022\021\n\tobject_id\030\001 \001(\004\"#\n\016S_Archor_"
  "R_Off\022\021\n\tobject_id\030\001 \001(\004\"$\n\017S_Archor_LS_"
  "Off\022\021\n\tobject_id\030\001 \001(\004*2\n\tSKILLTYPE\022\010\n\004N"
  "ONE\020\000\022\005\n\001Q\020\001\022\005\n\001E\020\002\022\005\n\001R\020\003\022\006\n\002LS\020\004b\006prot"
  "o3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Skill_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Skill_2eproto = {
  false, false, 2522, descriptor_table_protodef_Skill_2eproto, "Skill.proto", 
  &descriptor_table_Skill_2eproto_once, nullptr, 0, 41,
  schemas, file_default_instances, TableStruct_Skill_2eproto::offsets,
  file_level_metadata_Skill_2eproto, file_level_enum_descriptors_Skill_2eproto, file_level_service_descriptors_Skill_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Skill_2eproto_getter() {
  return &descriptor_table_Skill_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Skill_2eproto(&descriptor_table_Skill_2eproto);
namespace skill {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SKILLTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Skill_2eproto);
  return file_level_enum_descriptors_Skill_2eproto[0];
}
bool SKILLTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class S_CoolTime::_Internal {
 public:
};

S_CoolTime::S_CoolTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_CoolTime)
}
S_CoolTime::S_CoolTime(const S_CoolTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&skill_type_) -
    reinterpret_cast<char*>(&time_)) + sizeof(skill_type_));
  // @@protoc_insertion_point(copy_constructor:skill.S_CoolTime)
}

void S_CoolTime::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&skill_type_) -
    reinterpret_cast<char*>(&time_)) + sizeof(skill_type_));
}

S_CoolTime::~S_CoolTime() {
  // @@protoc_insertion_point(destructor:skill.S_CoolTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_CoolTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_CoolTime::ArenaDtor(void* object) {
  S_CoolTime* _this = reinterpret_cast< S_CoolTime* >(object);
  (void)_this;
}
void S_CoolTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CoolTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CoolTime::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_CoolTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_type_) -
      reinterpret_cast<char*>(&time_)) + sizeof(skill_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CoolTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .skill.SKILLTYPE skill_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_skill_type(static_cast<::skill::SKILLTYPE>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_CoolTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_CoolTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_time(), target);
  }

  // .skill.SKILLTYPE skill_type = 2;
  if (this->skill_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_skill_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_CoolTime)
  return target;
}

size_t S_CoolTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_CoolTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // .skill.SKILLTYPE skill_type = 2;
  if (this->skill_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_skill_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_CoolTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_CoolTime)
  GOOGLE_DCHECK_NE(&from, this);
  const S_CoolTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_CoolTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_CoolTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_CoolTime)
    MergeFrom(*source);
  }
}

void S_CoolTime::MergeFrom(const S_CoolTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_CoolTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.skill_type() != 0) {
    _internal_set_skill_type(from._internal_skill_type());
  }
}

void S_CoolTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_CoolTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_CoolTime::CopyFrom(const S_CoolTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_CoolTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CoolTime::IsInitialized() const {
  return true;
}

void S_CoolTime::InternalSwap(S_CoolTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_CoolTime, skill_type_)
      + sizeof(S_CoolTime::skill_type_)
      - PROTOBUF_FIELD_OFFSET(S_CoolTime, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CoolTime::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[0]);
}

// ===================================================================

class C_Warrior_Attack::_Internal {
 public:
};

C_Warrior_Attack::C_Warrior_Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.C_Warrior_Attack)
}
C_Warrior_Attack::C_Warrior_Attack(const C_Warrior_Attack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.C_Warrior_Attack)
}

void C_Warrior_Attack::SharedCtor() {
object_id_ = uint64_t{0u};
}

C_Warrior_Attack::~C_Warrior_Attack() {
  // @@protoc_insertion_point(destructor:skill.C_Warrior_Attack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Warrior_Attack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Warrior_Attack::ArenaDtor(void* object) {
  C_Warrior_Attack* _this = reinterpret_cast< C_Warrior_Attack* >(object);
  (void)_this;
}
void C_Warrior_Attack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Warrior_Attack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Warrior_Attack::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Warrior_Attack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Warrior_Attack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Warrior_Attack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Warrior_Attack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Warrior_Attack)
  return target;
}

size_t C_Warrior_Attack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Warrior_Attack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Warrior_Attack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.C_Warrior_Attack)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Warrior_Attack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Warrior_Attack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.C_Warrior_Attack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.C_Warrior_Attack)
    MergeFrom(*source);
  }
}

void C_Warrior_Attack::MergeFrom(const C_Warrior_Attack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Warrior_Attack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void C_Warrior_Attack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.C_Warrior_Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Warrior_Attack::CopyFrom(const C_Warrior_Attack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Warrior_Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Warrior_Attack::IsInitialized() const {
  return true;
}

void C_Warrior_Attack::InternalSwap(C_Warrior_Attack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Warrior_Attack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[1]);
}

// ===================================================================

class S_Warrior_Attack::_Internal {
 public:
};

S_Warrior_Attack::S_Warrior_Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_Warrior_Attack)
}
S_Warrior_Attack::S_Warrior_Attack(const S_Warrior_Attack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.S_Warrior_Attack)
}

void S_Warrior_Attack::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_Warrior_Attack::~S_Warrior_Attack() {
  // @@protoc_insertion_point(destructor:skill.S_Warrior_Attack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Warrior_Attack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Warrior_Attack::ArenaDtor(void* object) {
  S_Warrior_Attack* _this = reinterpret_cast< S_Warrior_Attack* >(object);
  (void)_this;
}
void S_Warrior_Attack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Warrior_Attack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Warrior_Attack::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Warrior_Attack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Warrior_Attack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Warrior_Attack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Warrior_Attack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Warrior_Attack)
  return target;
}

size_t S_Warrior_Attack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Warrior_Attack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Warrior_Attack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_Warrior_Attack)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Warrior_Attack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Warrior_Attack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_Warrior_Attack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_Warrior_Attack)
    MergeFrom(*source);
  }
}

void S_Warrior_Attack::MergeFrom(const S_Warrior_Attack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Warrior_Attack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void S_Warrior_Attack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_Warrior_Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Warrior_Attack::CopyFrom(const S_Warrior_Attack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Warrior_Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Warrior_Attack::IsInitialized() const {
  return true;
}

void S_Warrior_Attack::InternalSwap(S_Warrior_Attack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Warrior_Attack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[2]);
}

// ===================================================================

class C_Warrior_Q::_Internal {
 public:
};

C_Warrior_Q::C_Warrior_Q(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.C_Warrior_Q)
}
C_Warrior_Q::C_Warrior_Q(const C_Warrior_Q& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.C_Warrior_Q)
}

void C_Warrior_Q::SharedCtor() {
object_id_ = uint64_t{0u};
}

C_Warrior_Q::~C_Warrior_Q() {
  // @@protoc_insertion_point(destructor:skill.C_Warrior_Q)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Warrior_Q::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Warrior_Q::ArenaDtor(void* object) {
  C_Warrior_Q* _this = reinterpret_cast< C_Warrior_Q* >(object);
  (void)_this;
}
void C_Warrior_Q::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Warrior_Q::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Warrior_Q::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Warrior_Q)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Warrior_Q::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Warrior_Q::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Warrior_Q)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Warrior_Q)
  return target;
}

size_t C_Warrior_Q::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Warrior_Q)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Warrior_Q::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.C_Warrior_Q)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Warrior_Q* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Warrior_Q>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.C_Warrior_Q)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.C_Warrior_Q)
    MergeFrom(*source);
  }
}

void C_Warrior_Q::MergeFrom(const C_Warrior_Q& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Warrior_Q)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void C_Warrior_Q::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.C_Warrior_Q)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Warrior_Q::CopyFrom(const C_Warrior_Q& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Warrior_Q)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Warrior_Q::IsInitialized() const {
  return true;
}

void C_Warrior_Q::InternalSwap(C_Warrior_Q* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Warrior_Q::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[3]);
}

// ===================================================================

class S_Warrior_Q::_Internal {
 public:
};

S_Warrior_Q::S_Warrior_Q(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_Warrior_Q)
}
S_Warrior_Q::S_Warrior_Q(const S_Warrior_Q& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.S_Warrior_Q)
}

void S_Warrior_Q::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_Warrior_Q::~S_Warrior_Q() {
  // @@protoc_insertion_point(destructor:skill.S_Warrior_Q)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Warrior_Q::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Warrior_Q::ArenaDtor(void* object) {
  S_Warrior_Q* _this = reinterpret_cast< S_Warrior_Q* >(object);
  (void)_this;
}
void S_Warrior_Q::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Warrior_Q::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Warrior_Q::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Warrior_Q)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Warrior_Q::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Warrior_Q::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Warrior_Q)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Warrior_Q)
  return target;
}

size_t S_Warrior_Q::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Warrior_Q)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Warrior_Q::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_Warrior_Q)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Warrior_Q* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Warrior_Q>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_Warrior_Q)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_Warrior_Q)
    MergeFrom(*source);
  }
}

void S_Warrior_Q::MergeFrom(const S_Warrior_Q& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Warrior_Q)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void S_Warrior_Q::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_Warrior_Q)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Warrior_Q::CopyFrom(const S_Warrior_Q& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Warrior_Q)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Warrior_Q::IsInitialized() const {
  return true;
}

void S_Warrior_Q::InternalSwap(S_Warrior_Q* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Warrior_Q::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[4]);
}

// ===================================================================

class C_Warrior_Q_Hit::_Internal {
 public:
};

C_Warrior_Q_Hit::C_Warrior_Q_Hit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.C_Warrior_Q_Hit)
}
C_Warrior_Q_Hit::C_Warrior_Q_Hit(const C_Warrior_Q_Hit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_id_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(target_id_));
  // @@protoc_insertion_point(copy_constructor:skill.C_Warrior_Q_Hit)
}

void C_Warrior_Q_Hit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_id_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(target_id_));
}

C_Warrior_Q_Hit::~C_Warrior_Q_Hit() {
  // @@protoc_insertion_point(destructor:skill.C_Warrior_Q_Hit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Warrior_Q_Hit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Warrior_Q_Hit::ArenaDtor(void* object) {
  C_Warrior_Q_Hit* _this = reinterpret_cast< C_Warrior_Q_Hit* >(object);
  (void)_this;
}
void C_Warrior_Q_Hit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Warrior_Q_Hit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Warrior_Q_Hit::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Warrior_Q_Hit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_id_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(target_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Warrior_Q_Hit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Warrior_Q_Hit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Warrior_Q_Hit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 target_id = 2;
  if (this->target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_target_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Warrior_Q_Hit)
  return target;
}

size_t C_Warrior_Q_Hit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Warrior_Q_Hit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  // uint64 target_id = 2;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_target_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Warrior_Q_Hit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.C_Warrior_Q_Hit)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Warrior_Q_Hit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Warrior_Q_Hit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.C_Warrior_Q_Hit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.C_Warrior_Q_Hit)
    MergeFrom(*source);
  }
}

void C_Warrior_Q_Hit::MergeFrom(const C_Warrior_Q_Hit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Warrior_Q_Hit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (from.target_id() != 0) {
    _internal_set_target_id(from._internal_target_id());
  }
}

void C_Warrior_Q_Hit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.C_Warrior_Q_Hit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Warrior_Q_Hit::CopyFrom(const C_Warrior_Q_Hit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Warrior_Q_Hit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Warrior_Q_Hit::IsInitialized() const {
  return true;
}

void C_Warrior_Q_Hit::InternalSwap(C_Warrior_Q_Hit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_Warrior_Q_Hit, target_id_)
      + sizeof(C_Warrior_Q_Hit::target_id_)
      - PROTOBUF_FIELD_OFFSET(C_Warrior_Q_Hit, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Warrior_Q_Hit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[5]);
}

// ===================================================================

class S_Warrior_Q_Hit::_Internal {
 public:
};

S_Warrior_Q_Hit::S_Warrior_Q_Hit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_Warrior_Q_Hit)
}
S_Warrior_Q_Hit::S_Warrior_Q_Hit(const S_Warrior_Q_Hit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&damage_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(damage_));
  // @@protoc_insertion_point(copy_constructor:skill.S_Warrior_Q_Hit)
}

void S_Warrior_Q_Hit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&damage_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(damage_));
}

S_Warrior_Q_Hit::~S_Warrior_Q_Hit() {
  // @@protoc_insertion_point(destructor:skill.S_Warrior_Q_Hit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Warrior_Q_Hit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Warrior_Q_Hit::ArenaDtor(void* object) {
  S_Warrior_Q_Hit* _this = reinterpret_cast< S_Warrior_Q_Hit* >(object);
  (void)_this;
}
void S_Warrior_Q_Hit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Warrior_Q_Hit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Warrior_Q_Hit::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Warrior_Q_Hit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&damage_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(damage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Warrior_Q_Hit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float damage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Warrior_Q_Hit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Warrior_Q_Hit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 target_id = 2;
  if (this->target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_target_id(), target);
  }

  // float damage = 3;
  if (!(this->damage() <= 0 && this->damage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Warrior_Q_Hit)
  return target;
}

size_t S_Warrior_Q_Hit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Warrior_Q_Hit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  // uint64 target_id = 2;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_target_id());
  }

  // float damage = 3;
  if (!(this->damage() <= 0 && this->damage() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Warrior_Q_Hit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_Warrior_Q_Hit)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Warrior_Q_Hit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Warrior_Q_Hit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_Warrior_Q_Hit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_Warrior_Q_Hit)
    MergeFrom(*source);
  }
}

void S_Warrior_Q_Hit::MergeFrom(const S_Warrior_Q_Hit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Warrior_Q_Hit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (from.target_id() != 0) {
    _internal_set_target_id(from._internal_target_id());
  }
  if (!(from.damage() <= 0 && from.damage() >= 0)) {
    _internal_set_damage(from._internal_damage());
  }
}

void S_Warrior_Q_Hit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_Warrior_Q_Hit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Warrior_Q_Hit::CopyFrom(const S_Warrior_Q_Hit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Warrior_Q_Hit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Warrior_Q_Hit::IsInitialized() const {
  return true;
}

void S_Warrior_Q_Hit::InternalSwap(S_Warrior_Q_Hit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Warrior_Q_Hit, damage_)
      + sizeof(S_Warrior_Q_Hit::damage_)
      - PROTOBUF_FIELD_OFFSET(S_Warrior_Q_Hit, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Warrior_Q_Hit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[6]);
}

// ===================================================================

class C_Warrior_E::_Internal {
 public:
};

C_Warrior_E::C_Warrior_E(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.C_Warrior_E)
}
C_Warrior_E::C_Warrior_E(const C_Warrior_E& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.C_Warrior_E)
}

void C_Warrior_E::SharedCtor() {
object_id_ = uint64_t{0u};
}

C_Warrior_E::~C_Warrior_E() {
  // @@protoc_insertion_point(destructor:skill.C_Warrior_E)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Warrior_E::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Warrior_E::ArenaDtor(void* object) {
  C_Warrior_E* _this = reinterpret_cast< C_Warrior_E* >(object);
  (void)_this;
}
void C_Warrior_E::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Warrior_E::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Warrior_E::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Warrior_E)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Warrior_E::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Warrior_E::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Warrior_E)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Warrior_E)
  return target;
}

size_t C_Warrior_E::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Warrior_E)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Warrior_E::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.C_Warrior_E)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Warrior_E* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Warrior_E>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.C_Warrior_E)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.C_Warrior_E)
    MergeFrom(*source);
  }
}

void C_Warrior_E::MergeFrom(const C_Warrior_E& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Warrior_E)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void C_Warrior_E::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.C_Warrior_E)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Warrior_E::CopyFrom(const C_Warrior_E& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Warrior_E)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Warrior_E::IsInitialized() const {
  return true;
}

void C_Warrior_E::InternalSwap(C_Warrior_E* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Warrior_E::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[7]);
}

// ===================================================================

class S_Warrior_E::_Internal {
 public:
};

S_Warrior_E::S_Warrior_E(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_Warrior_E)
}
S_Warrior_E::S_Warrior_E(const S_Warrior_E& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.S_Warrior_E)
}

void S_Warrior_E::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_Warrior_E::~S_Warrior_E() {
  // @@protoc_insertion_point(destructor:skill.S_Warrior_E)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Warrior_E::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Warrior_E::ArenaDtor(void* object) {
  S_Warrior_E* _this = reinterpret_cast< S_Warrior_E* >(object);
  (void)_this;
}
void S_Warrior_E::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Warrior_E::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Warrior_E::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Warrior_E)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Warrior_E::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Warrior_E::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Warrior_E)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Warrior_E)
  return target;
}

size_t S_Warrior_E::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Warrior_E)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Warrior_E::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_Warrior_E)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Warrior_E* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Warrior_E>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_Warrior_E)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_Warrior_E)
    MergeFrom(*source);
  }
}

void S_Warrior_E::MergeFrom(const S_Warrior_E& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Warrior_E)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void S_Warrior_E::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_Warrior_E)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Warrior_E::CopyFrom(const S_Warrior_E& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Warrior_E)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Warrior_E::IsInitialized() const {
  return true;
}

void S_Warrior_E::InternalSwap(S_Warrior_E* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Warrior_E::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[8]);
}

// ===================================================================

class C_Warrior_E_Success::_Internal {
 public:
};

C_Warrior_E_Success::C_Warrior_E_Success(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.C_Warrior_E_Success)
}
C_Warrior_E_Success::C_Warrior_E_Success(const C_Warrior_E_Success& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_id_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(target_id_));
  // @@protoc_insertion_point(copy_constructor:skill.C_Warrior_E_Success)
}

void C_Warrior_E_Success::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_id_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(target_id_));
}

C_Warrior_E_Success::~C_Warrior_E_Success() {
  // @@protoc_insertion_point(destructor:skill.C_Warrior_E_Success)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Warrior_E_Success::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Warrior_E_Success::ArenaDtor(void* object) {
  C_Warrior_E_Success* _this = reinterpret_cast< C_Warrior_E_Success* >(object);
  (void)_this;
}
void C_Warrior_E_Success::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Warrior_E_Success::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Warrior_E_Success::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Warrior_E_Success)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_id_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(target_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Warrior_E_Success::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Warrior_E_Success::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Warrior_E_Success)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 target_id = 2;
  if (this->target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_target_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Warrior_E_Success)
  return target;
}

size_t C_Warrior_E_Success::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Warrior_E_Success)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  // uint64 target_id = 2;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_target_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Warrior_E_Success::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.C_Warrior_E_Success)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Warrior_E_Success* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Warrior_E_Success>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.C_Warrior_E_Success)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.C_Warrior_E_Success)
    MergeFrom(*source);
  }
}

void C_Warrior_E_Success::MergeFrom(const C_Warrior_E_Success& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Warrior_E_Success)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (from.target_id() != 0) {
    _internal_set_target_id(from._internal_target_id());
  }
}

void C_Warrior_E_Success::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.C_Warrior_E_Success)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Warrior_E_Success::CopyFrom(const C_Warrior_E_Success& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Warrior_E_Success)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Warrior_E_Success::IsInitialized() const {
  return true;
}

void C_Warrior_E_Success::InternalSwap(C_Warrior_E_Success* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_Warrior_E_Success, target_id_)
      + sizeof(C_Warrior_E_Success::target_id_)
      - PROTOBUF_FIELD_OFFSET(C_Warrior_E_Success, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Warrior_E_Success::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[9]);
}

// ===================================================================

class S_Warrior_E_Success::_Internal {
 public:
};

S_Warrior_E_Success::S_Warrior_E_Success(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_Warrior_E_Success)
}
S_Warrior_E_Success::S_Warrior_E_Success(const S_Warrior_E_Success& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&parry_count_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(parry_count_));
  // @@protoc_insertion_point(copy_constructor:skill.S_Warrior_E_Success)
}

void S_Warrior_E_Success::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&parry_count_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(parry_count_));
}

S_Warrior_E_Success::~S_Warrior_E_Success() {
  // @@protoc_insertion_point(destructor:skill.S_Warrior_E_Success)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Warrior_E_Success::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Warrior_E_Success::ArenaDtor(void* object) {
  S_Warrior_E_Success* _this = reinterpret_cast< S_Warrior_E_Success* >(object);
  (void)_this;
}
void S_Warrior_E_Success::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Warrior_E_Success::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Warrior_E_Success::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Warrior_E_Success)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parry_count_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(parry_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Warrior_E_Success::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parry_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          parry_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Warrior_E_Success::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Warrior_E_Success)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 target_id = 2;
  if (this->target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_target_id(), target);
  }

  // int32 parry_count = 3;
  if (this->parry_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_parry_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Warrior_E_Success)
  return target;
}

size_t S_Warrior_E_Success::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Warrior_E_Success)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  // uint64 target_id = 2;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_target_id());
  }

  // int32 parry_count = 3;
  if (this->parry_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parry_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Warrior_E_Success::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_Warrior_E_Success)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Warrior_E_Success* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Warrior_E_Success>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_Warrior_E_Success)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_Warrior_E_Success)
    MergeFrom(*source);
  }
}

void S_Warrior_E_Success::MergeFrom(const S_Warrior_E_Success& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Warrior_E_Success)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (from.target_id() != 0) {
    _internal_set_target_id(from._internal_target_id());
  }
  if (from.parry_count() != 0) {
    _internal_set_parry_count(from._internal_parry_count());
  }
}

void S_Warrior_E_Success::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_Warrior_E_Success)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Warrior_E_Success::CopyFrom(const S_Warrior_E_Success& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Warrior_E_Success)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Warrior_E_Success::IsInitialized() const {
  return true;
}

void S_Warrior_E_Success::InternalSwap(S_Warrior_E_Success* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Warrior_E_Success, parry_count_)
      + sizeof(S_Warrior_E_Success::parry_count_)
      - PROTOBUF_FIELD_OFFSET(S_Warrior_E_Success, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Warrior_E_Success::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[10]);
}

// ===================================================================

class C_Warrior_R::_Internal {
 public:
};

C_Warrior_R::C_Warrior_R(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.C_Warrior_R)
}
C_Warrior_R::C_Warrior_R(const C_Warrior_R& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.C_Warrior_R)
}

void C_Warrior_R::SharedCtor() {
object_id_ = uint64_t{0u};
}

C_Warrior_R::~C_Warrior_R() {
  // @@protoc_insertion_point(destructor:skill.C_Warrior_R)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Warrior_R::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Warrior_R::ArenaDtor(void* object) {
  C_Warrior_R* _this = reinterpret_cast< C_Warrior_R* >(object);
  (void)_this;
}
void C_Warrior_R::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Warrior_R::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Warrior_R::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Warrior_R)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Warrior_R::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Warrior_R::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Warrior_R)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Warrior_R)
  return target;
}

size_t C_Warrior_R::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Warrior_R)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Warrior_R::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.C_Warrior_R)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Warrior_R* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Warrior_R>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.C_Warrior_R)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.C_Warrior_R)
    MergeFrom(*source);
  }
}

void C_Warrior_R::MergeFrom(const C_Warrior_R& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Warrior_R)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void C_Warrior_R::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.C_Warrior_R)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Warrior_R::CopyFrom(const C_Warrior_R& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Warrior_R)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Warrior_R::IsInitialized() const {
  return true;
}

void C_Warrior_R::InternalSwap(C_Warrior_R* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Warrior_R::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[11]);
}

// ===================================================================

class S_Warrior_R::_Internal {
 public:
};

S_Warrior_R::S_Warrior_R(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_Warrior_R)
}
S_Warrior_R::S_Warrior_R(const S_Warrior_R& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.S_Warrior_R)
}

void S_Warrior_R::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_Warrior_R::~S_Warrior_R() {
  // @@protoc_insertion_point(destructor:skill.S_Warrior_R)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Warrior_R::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Warrior_R::ArenaDtor(void* object) {
  S_Warrior_R* _this = reinterpret_cast< S_Warrior_R* >(object);
  (void)_this;
}
void S_Warrior_R::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Warrior_R::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Warrior_R::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Warrior_R)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Warrior_R::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Warrior_R::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Warrior_R)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Warrior_R)
  return target;
}

size_t S_Warrior_R::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Warrior_R)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Warrior_R::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_Warrior_R)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Warrior_R* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Warrior_R>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_Warrior_R)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_Warrior_R)
    MergeFrom(*source);
  }
}

void S_Warrior_R::MergeFrom(const S_Warrior_R& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Warrior_R)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void S_Warrior_R::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_Warrior_R)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Warrior_R::CopyFrom(const S_Warrior_R& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Warrior_R)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Warrior_R::IsInitialized() const {
  return true;
}

void S_Warrior_R::InternalSwap(S_Warrior_R* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Warrior_R::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[12]);
}

// ===================================================================

class C_Warrior_LS::_Internal {
 public:
};

C_Warrior_LS::C_Warrior_LS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.C_Warrior_LS)
}
C_Warrior_LS::C_Warrior_LS(const C_Warrior_LS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:skill.C_Warrior_LS)
}

void C_Warrior_LS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
}

C_Warrior_LS::~C_Warrior_LS() {
  // @@protoc_insertion_point(destructor:skill.C_Warrior_LS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Warrior_LS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Warrior_LS::ArenaDtor(void* object) {
  C_Warrior_LS* _this = reinterpret_cast< C_Warrior_LS* >(object);
  (void)_this;
}
void C_Warrior_LS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Warrior_LS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Warrior_LS::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Warrior_LS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Warrior_LS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Warrior_LS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Warrior_LS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Warrior_LS)
  return target;
}

size_t C_Warrior_LS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Warrior_LS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Warrior_LS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.C_Warrior_LS)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Warrior_LS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Warrior_LS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.C_Warrior_LS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.C_Warrior_LS)
    MergeFrom(*source);
  }
}

void C_Warrior_LS::MergeFrom(const C_Warrior_LS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Warrior_LS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void C_Warrior_LS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.C_Warrior_LS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Warrior_LS::CopyFrom(const C_Warrior_LS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Warrior_LS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Warrior_LS::IsInitialized() const {
  return true;
}

void C_Warrior_LS::InternalSwap(C_Warrior_LS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_Warrior_LS, z_)
      + sizeof(C_Warrior_LS::z_)
      - PROTOBUF_FIELD_OFFSET(C_Warrior_LS, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Warrior_LS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[13]);
}

// ===================================================================

class S_Warrior_LS::_Internal {
 public:
};

S_Warrior_LS::S_Warrior_LS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_Warrior_LS)
}
S_Warrior_LS::S_Warrior_LS(const S_Warrior_LS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:skill.S_Warrior_LS)
}

void S_Warrior_LS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(yaw_));
}

S_Warrior_LS::~S_Warrior_LS() {
  // @@protoc_insertion_point(destructor:skill.S_Warrior_LS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Warrior_LS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Warrior_LS::ArenaDtor(void* object) {
  S_Warrior_LS* _this = reinterpret_cast< S_Warrior_LS* >(object);
  (void)_this;
}
void S_Warrior_LS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Warrior_LS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Warrior_LS::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Warrior_LS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Warrior_LS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Warrior_LS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Warrior_LS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // float yaw = 5;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Warrior_LS)
  return target;
}

size_t S_Warrior_LS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Warrior_LS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw = 5;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Warrior_LS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_Warrior_LS)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Warrior_LS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Warrior_LS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_Warrior_LS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_Warrior_LS)
    MergeFrom(*source);
  }
}

void S_Warrior_LS::MergeFrom(const S_Warrior_LS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Warrior_LS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
}

void S_Warrior_LS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_Warrior_LS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Warrior_LS::CopyFrom(const S_Warrior_LS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Warrior_LS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Warrior_LS::IsInitialized() const {
  return true;
}

void S_Warrior_LS::InternalSwap(S_Warrior_LS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Warrior_LS, yaw_)
      + sizeof(S_Warrior_LS::yaw_)
      - PROTOBUF_FIELD_OFFSET(S_Warrior_LS, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Warrior_LS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[14]);
}

// ===================================================================

class C_ASSASSIN_Attack::_Internal {
 public:
};

C_ASSASSIN_Attack::C_ASSASSIN_Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.C_ASSASSIN_Attack)
}
C_ASSASSIN_Attack::C_ASSASSIN_Attack(const C_ASSASSIN_Attack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.C_ASSASSIN_Attack)
}

void C_ASSASSIN_Attack::SharedCtor() {
object_id_ = uint64_t{0u};
}

C_ASSASSIN_Attack::~C_ASSASSIN_Attack() {
  // @@protoc_insertion_point(destructor:skill.C_ASSASSIN_Attack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_ASSASSIN_Attack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ASSASSIN_Attack::ArenaDtor(void* object) {
  C_ASSASSIN_Attack* _this = reinterpret_cast< C_ASSASSIN_Attack* >(object);
  (void)_this;
}
void C_ASSASSIN_Attack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_ASSASSIN_Attack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ASSASSIN_Attack::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_ASSASSIN_Attack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ASSASSIN_Attack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_ASSASSIN_Attack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_ASSASSIN_Attack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_ASSASSIN_Attack)
  return target;
}

size_t C_ASSASSIN_Attack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_ASSASSIN_Attack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_ASSASSIN_Attack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.C_ASSASSIN_Attack)
  GOOGLE_DCHECK_NE(&from, this);
  const C_ASSASSIN_Attack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_ASSASSIN_Attack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.C_ASSASSIN_Attack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.C_ASSASSIN_Attack)
    MergeFrom(*source);
  }
}

void C_ASSASSIN_Attack::MergeFrom(const C_ASSASSIN_Attack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_ASSASSIN_Attack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void C_ASSASSIN_Attack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.C_ASSASSIN_Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_ASSASSIN_Attack::CopyFrom(const C_ASSASSIN_Attack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_ASSASSIN_Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ASSASSIN_Attack::IsInitialized() const {
  return true;
}

void C_ASSASSIN_Attack::InternalSwap(C_ASSASSIN_Attack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ASSASSIN_Attack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[15]);
}

// ===================================================================

class S_ASSASSIN_Attack::_Internal {
 public:
};

S_ASSASSIN_Attack::S_ASSASSIN_Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_ASSASSIN_Attack)
}
S_ASSASSIN_Attack::S_ASSASSIN_Attack(const S_ASSASSIN_Attack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.S_ASSASSIN_Attack)
}

void S_ASSASSIN_Attack::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_ASSASSIN_Attack::~S_ASSASSIN_Attack() {
  // @@protoc_insertion_point(destructor:skill.S_ASSASSIN_Attack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_ASSASSIN_Attack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ASSASSIN_Attack::ArenaDtor(void* object) {
  S_ASSASSIN_Attack* _this = reinterpret_cast< S_ASSASSIN_Attack* >(object);
  (void)_this;
}
void S_ASSASSIN_Attack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ASSASSIN_Attack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ASSASSIN_Attack::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_ASSASSIN_Attack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ASSASSIN_Attack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_ASSASSIN_Attack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_ASSASSIN_Attack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_ASSASSIN_Attack)
  return target;
}

size_t S_ASSASSIN_Attack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_ASSASSIN_Attack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_ASSASSIN_Attack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_ASSASSIN_Attack)
  GOOGLE_DCHECK_NE(&from, this);
  const S_ASSASSIN_Attack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_ASSASSIN_Attack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_ASSASSIN_Attack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_ASSASSIN_Attack)
    MergeFrom(*source);
  }
}

void S_ASSASSIN_Attack::MergeFrom(const S_ASSASSIN_Attack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_ASSASSIN_Attack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void S_ASSASSIN_Attack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_ASSASSIN_Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_ASSASSIN_Attack::CopyFrom(const S_ASSASSIN_Attack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_ASSASSIN_Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ASSASSIN_Attack::IsInitialized() const {
  return true;
}

void S_ASSASSIN_Attack::InternalSwap(S_ASSASSIN_Attack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ASSASSIN_Attack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[16]);
}

// ===================================================================

class C_ASSASSIN_Q::_Internal {
 public:
};

C_ASSASSIN_Q::C_ASSASSIN_Q(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.C_ASSASSIN_Q)
}
C_ASSASSIN_Q::C_ASSASSIN_Q(const C_ASSASSIN_Q& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:skill.C_ASSASSIN_Q)
}

void C_ASSASSIN_Q::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(roll_));
}

C_ASSASSIN_Q::~C_ASSASSIN_Q() {
  // @@protoc_insertion_point(destructor:skill.C_ASSASSIN_Q)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_ASSASSIN_Q::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ASSASSIN_Q::ArenaDtor(void* object) {
  C_ASSASSIN_Q* _this = reinterpret_cast< C_ASSASSIN_Q* >(object);
  (void)_this;
}
void C_ASSASSIN_Q::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_ASSASSIN_Q::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ASSASSIN_Q::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_ASSASSIN_Q)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(roll_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ASSASSIN_Q::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float roll = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_ASSASSIN_Q::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_ASSASSIN_Q)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // float pitch = 5;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_pitch(), target);
  }

  // float yaw = 6;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_yaw(), target);
  }

  // float roll = 7;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_ASSASSIN_Q)
  return target;
}

size_t C_ASSASSIN_Q::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_ASSASSIN_Q)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch = 5;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw = 6;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 4;
  }

  // float roll = 7;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_ASSASSIN_Q::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.C_ASSASSIN_Q)
  GOOGLE_DCHECK_NE(&from, this);
  const C_ASSASSIN_Q* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_ASSASSIN_Q>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.C_ASSASSIN_Q)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.C_ASSASSIN_Q)
    MergeFrom(*source);
  }
}

void C_ASSASSIN_Q::MergeFrom(const C_ASSASSIN_Q& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_ASSASSIN_Q)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
  if (!(from.roll() <= 0 && from.roll() >= 0)) {
    _internal_set_roll(from._internal_roll());
  }
}

void C_ASSASSIN_Q::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.C_ASSASSIN_Q)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_ASSASSIN_Q::CopyFrom(const C_ASSASSIN_Q& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_ASSASSIN_Q)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ASSASSIN_Q::IsInitialized() const {
  return true;
}

void C_ASSASSIN_Q::InternalSwap(C_ASSASSIN_Q* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_ASSASSIN_Q, roll_)
      + sizeof(C_ASSASSIN_Q::roll_)
      - PROTOBUF_FIELD_OFFSET(C_ASSASSIN_Q, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ASSASSIN_Q::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[17]);
}

// ===================================================================

class S_ASSASSIN_Q::_Internal {
 public:
};

S_ASSASSIN_Q::S_ASSASSIN_Q(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_ASSASSIN_Q)
}
S_ASSASSIN_Q::S_ASSASSIN_Q(const S_ASSASSIN_Q& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:skill.S_ASSASSIN_Q)
}

void S_ASSASSIN_Q::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(roll_));
}

S_ASSASSIN_Q::~S_ASSASSIN_Q() {
  // @@protoc_insertion_point(destructor:skill.S_ASSASSIN_Q)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_ASSASSIN_Q::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ASSASSIN_Q::ArenaDtor(void* object) {
  S_ASSASSIN_Q* _this = reinterpret_cast< S_ASSASSIN_Q* >(object);
  (void)_this;
}
void S_ASSASSIN_Q::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ASSASSIN_Q::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ASSASSIN_Q::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_ASSASSIN_Q)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(roll_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ASSASSIN_Q::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float roll = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_ASSASSIN_Q::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_ASSASSIN_Q)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // float pitch = 5;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_pitch(), target);
  }

  // float yaw = 6;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_yaw(), target);
  }

  // float roll = 7;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_ASSASSIN_Q)
  return target;
}

size_t S_ASSASSIN_Q::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_ASSASSIN_Q)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch = 5;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw = 6;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 4;
  }

  // float roll = 7;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_ASSASSIN_Q::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_ASSASSIN_Q)
  GOOGLE_DCHECK_NE(&from, this);
  const S_ASSASSIN_Q* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_ASSASSIN_Q>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_ASSASSIN_Q)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_ASSASSIN_Q)
    MergeFrom(*source);
  }
}

void S_ASSASSIN_Q::MergeFrom(const S_ASSASSIN_Q& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_ASSASSIN_Q)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
  if (!(from.roll() <= 0 && from.roll() >= 0)) {
    _internal_set_roll(from._internal_roll());
  }
}

void S_ASSASSIN_Q::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_ASSASSIN_Q)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_ASSASSIN_Q::CopyFrom(const S_ASSASSIN_Q& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_ASSASSIN_Q)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ASSASSIN_Q::IsInitialized() const {
  return true;
}

void S_ASSASSIN_Q::InternalSwap(S_ASSASSIN_Q* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ASSASSIN_Q, roll_)
      + sizeof(S_ASSASSIN_Q::roll_)
      - PROTOBUF_FIELD_OFFSET(S_ASSASSIN_Q, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ASSASSIN_Q::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[18]);
}

// ===================================================================

class C_Assassin_E::_Internal {
 public:
};

C_Assassin_E::C_Assassin_E(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.C_Assassin_E)
}
C_Assassin_E::C_Assassin_E(const C_Assassin_E& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:skill.C_Assassin_E)
}

void C_Assassin_E::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
}

C_Assassin_E::~C_Assassin_E() {
  // @@protoc_insertion_point(destructor:skill.C_Assassin_E)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Assassin_E::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Assassin_E::ArenaDtor(void* object) {
  C_Assassin_E* _this = reinterpret_cast< C_Assassin_E* >(object);
  (void)_this;
}
void C_Assassin_E::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Assassin_E::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Assassin_E::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Assassin_E)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Assassin_E::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Assassin_E::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Assassin_E)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Assassin_E)
  return target;
}

size_t C_Assassin_E::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Assassin_E)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Assassin_E::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.C_Assassin_E)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Assassin_E* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Assassin_E>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.C_Assassin_E)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.C_Assassin_E)
    MergeFrom(*source);
  }
}

void C_Assassin_E::MergeFrom(const C_Assassin_E& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Assassin_E)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void C_Assassin_E::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.C_Assassin_E)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Assassin_E::CopyFrom(const C_Assassin_E& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Assassin_E)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Assassin_E::IsInitialized() const {
  return true;
}

void C_Assassin_E::InternalSwap(C_Assassin_E* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_Assassin_E, z_)
      + sizeof(C_Assassin_E::z_)
      - PROTOBUF_FIELD_OFFSET(C_Assassin_E, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Assassin_E::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[19]);
}

// ===================================================================

class S_Assassin_E::_Internal {
 public:
};

S_Assassin_E::S_Assassin_E(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_Assassin_E)
}
S_Assassin_E::S_Assassin_E(const S_Assassin_E& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:skill.S_Assassin_E)
}

void S_Assassin_E::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
}

S_Assassin_E::~S_Assassin_E() {
  // @@protoc_insertion_point(destructor:skill.S_Assassin_E)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Assassin_E::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Assassin_E::ArenaDtor(void* object) {
  S_Assassin_E* _this = reinterpret_cast< S_Assassin_E* >(object);
  (void)_this;
}
void S_Assassin_E::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Assassin_E::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Assassin_E::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Assassin_E)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Assassin_E::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Assassin_E::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Assassin_E)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Assassin_E)
  return target;
}

size_t S_Assassin_E::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Assassin_E)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Assassin_E::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_Assassin_E)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Assassin_E* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Assassin_E>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_Assassin_E)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_Assassin_E)
    MergeFrom(*source);
  }
}

void S_Assassin_E::MergeFrom(const S_Assassin_E& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Assassin_E)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void S_Assassin_E::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_Assassin_E)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Assassin_E::CopyFrom(const S_Assassin_E& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Assassin_E)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Assassin_E::IsInitialized() const {
  return true;
}

void S_Assassin_E::InternalSwap(S_Assassin_E* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Assassin_E, z_)
      + sizeof(S_Assassin_E::z_)
      - PROTOBUF_FIELD_OFFSET(S_Assassin_E, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Assassin_E::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[20]);
}

// ===================================================================

class C_ASSASSIN_R::_Internal {
 public:
};

C_ASSASSIN_R::C_ASSASSIN_R(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.C_ASSASSIN_R)
}
C_ASSASSIN_R::C_ASSASSIN_R(const C_ASSASSIN_R& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.C_ASSASSIN_R)
}

void C_ASSASSIN_R::SharedCtor() {
object_id_ = uint64_t{0u};
}

C_ASSASSIN_R::~C_ASSASSIN_R() {
  // @@protoc_insertion_point(destructor:skill.C_ASSASSIN_R)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_ASSASSIN_R::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ASSASSIN_R::ArenaDtor(void* object) {
  C_ASSASSIN_R* _this = reinterpret_cast< C_ASSASSIN_R* >(object);
  (void)_this;
}
void C_ASSASSIN_R::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_ASSASSIN_R::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ASSASSIN_R::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_ASSASSIN_R)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ASSASSIN_R::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_ASSASSIN_R::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_ASSASSIN_R)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_ASSASSIN_R)
  return target;
}

size_t C_ASSASSIN_R::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_ASSASSIN_R)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_ASSASSIN_R::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.C_ASSASSIN_R)
  GOOGLE_DCHECK_NE(&from, this);
  const C_ASSASSIN_R* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_ASSASSIN_R>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.C_ASSASSIN_R)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.C_ASSASSIN_R)
    MergeFrom(*source);
  }
}

void C_ASSASSIN_R::MergeFrom(const C_ASSASSIN_R& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_ASSASSIN_R)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void C_ASSASSIN_R::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.C_ASSASSIN_R)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_ASSASSIN_R::CopyFrom(const C_ASSASSIN_R& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_ASSASSIN_R)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ASSASSIN_R::IsInitialized() const {
  return true;
}

void C_ASSASSIN_R::InternalSwap(C_ASSASSIN_R* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ASSASSIN_R::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[21]);
}

// ===================================================================

class S_ASSASSIN_R::_Internal {
 public:
};

S_ASSASSIN_R::S_ASSASSIN_R(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_ASSASSIN_R)
}
S_ASSASSIN_R::S_ASSASSIN_R(const S_ASSASSIN_R& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.S_ASSASSIN_R)
}

void S_ASSASSIN_R::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_ASSASSIN_R::~S_ASSASSIN_R() {
  // @@protoc_insertion_point(destructor:skill.S_ASSASSIN_R)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_ASSASSIN_R::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ASSASSIN_R::ArenaDtor(void* object) {
  S_ASSASSIN_R* _this = reinterpret_cast< S_ASSASSIN_R* >(object);
  (void)_this;
}
void S_ASSASSIN_R::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ASSASSIN_R::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ASSASSIN_R::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_ASSASSIN_R)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ASSASSIN_R::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_ASSASSIN_R::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_ASSASSIN_R)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_ASSASSIN_R)
  return target;
}

size_t S_ASSASSIN_R::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_ASSASSIN_R)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_ASSASSIN_R::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_ASSASSIN_R)
  GOOGLE_DCHECK_NE(&from, this);
  const S_ASSASSIN_R* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_ASSASSIN_R>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_ASSASSIN_R)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_ASSASSIN_R)
    MergeFrom(*source);
  }
}

void S_ASSASSIN_R::MergeFrom(const S_ASSASSIN_R& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_ASSASSIN_R)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void S_ASSASSIN_R::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_ASSASSIN_R)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_ASSASSIN_R::CopyFrom(const S_ASSASSIN_R& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_ASSASSIN_R)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ASSASSIN_R::IsInitialized() const {
  return true;
}

void S_ASSASSIN_R::InternalSwap(S_ASSASSIN_R* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ASSASSIN_R::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[22]);
}

// ===================================================================

class C_ASSASSIN_LS::_Internal {
 public:
};

C_ASSASSIN_LS::C_ASSASSIN_LS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.C_ASSASSIN_LS)
}
C_ASSASSIN_LS::C_ASSASSIN_LS(const C_ASSASSIN_LS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.C_ASSASSIN_LS)
}

void C_ASSASSIN_LS::SharedCtor() {
object_id_ = uint64_t{0u};
}

C_ASSASSIN_LS::~C_ASSASSIN_LS() {
  // @@protoc_insertion_point(destructor:skill.C_ASSASSIN_LS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_ASSASSIN_LS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ASSASSIN_LS::ArenaDtor(void* object) {
  C_ASSASSIN_LS* _this = reinterpret_cast< C_ASSASSIN_LS* >(object);
  (void)_this;
}
void C_ASSASSIN_LS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_ASSASSIN_LS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ASSASSIN_LS::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_ASSASSIN_LS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ASSASSIN_LS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_ASSASSIN_LS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_ASSASSIN_LS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_ASSASSIN_LS)
  return target;
}

size_t C_ASSASSIN_LS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_ASSASSIN_LS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_ASSASSIN_LS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.C_ASSASSIN_LS)
  GOOGLE_DCHECK_NE(&from, this);
  const C_ASSASSIN_LS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_ASSASSIN_LS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.C_ASSASSIN_LS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.C_ASSASSIN_LS)
    MergeFrom(*source);
  }
}

void C_ASSASSIN_LS::MergeFrom(const C_ASSASSIN_LS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_ASSASSIN_LS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void C_ASSASSIN_LS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.C_ASSASSIN_LS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_ASSASSIN_LS::CopyFrom(const C_ASSASSIN_LS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_ASSASSIN_LS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ASSASSIN_LS::IsInitialized() const {
  return true;
}

void C_ASSASSIN_LS::InternalSwap(C_ASSASSIN_LS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ASSASSIN_LS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[23]);
}

// ===================================================================

class S_ASSASSIN_LS::_Internal {
 public:
};

S_ASSASSIN_LS::S_ASSASSIN_LS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_ASSASSIN_LS)
}
S_ASSASSIN_LS::S_ASSASSIN_LS(const S_ASSASSIN_LS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.S_ASSASSIN_LS)
}

void S_ASSASSIN_LS::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_ASSASSIN_LS::~S_ASSASSIN_LS() {
  // @@protoc_insertion_point(destructor:skill.S_ASSASSIN_LS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_ASSASSIN_LS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ASSASSIN_LS::ArenaDtor(void* object) {
  S_ASSASSIN_LS* _this = reinterpret_cast< S_ASSASSIN_LS* >(object);
  (void)_this;
}
void S_ASSASSIN_LS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ASSASSIN_LS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ASSASSIN_LS::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_ASSASSIN_LS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ASSASSIN_LS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_ASSASSIN_LS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_ASSASSIN_LS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_ASSASSIN_LS)
  return target;
}

size_t S_ASSASSIN_LS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_ASSASSIN_LS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_ASSASSIN_LS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_ASSASSIN_LS)
  GOOGLE_DCHECK_NE(&from, this);
  const S_ASSASSIN_LS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_ASSASSIN_LS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_ASSASSIN_LS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_ASSASSIN_LS)
    MergeFrom(*source);
  }
}

void S_ASSASSIN_LS::MergeFrom(const S_ASSASSIN_LS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_ASSASSIN_LS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void S_ASSASSIN_LS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_ASSASSIN_LS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_ASSASSIN_LS::CopyFrom(const S_ASSASSIN_LS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_ASSASSIN_LS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ASSASSIN_LS::IsInitialized() const {
  return true;
}

void S_ASSASSIN_LS::InternalSwap(S_ASSASSIN_LS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ASSASSIN_LS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[24]);
}

// ===================================================================

class C_Assassin_LS_Off::_Internal {
 public:
};

C_Assassin_LS_Off::C_Assassin_LS_Off(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.C_Assassin_LS_Off)
}
C_Assassin_LS_Off::C_Assassin_LS_Off(const C_Assassin_LS_Off& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.C_Assassin_LS_Off)
}

void C_Assassin_LS_Off::SharedCtor() {
object_id_ = uint64_t{0u};
}

C_Assassin_LS_Off::~C_Assassin_LS_Off() {
  // @@protoc_insertion_point(destructor:skill.C_Assassin_LS_Off)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Assassin_LS_Off::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Assassin_LS_Off::ArenaDtor(void* object) {
  C_Assassin_LS_Off* _this = reinterpret_cast< C_Assassin_LS_Off* >(object);
  (void)_this;
}
void C_Assassin_LS_Off::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Assassin_LS_Off::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Assassin_LS_Off::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Assassin_LS_Off)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Assassin_LS_Off::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Assassin_LS_Off::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Assassin_LS_Off)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Assassin_LS_Off)
  return target;
}

size_t C_Assassin_LS_Off::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Assassin_LS_Off)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Assassin_LS_Off::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.C_Assassin_LS_Off)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Assassin_LS_Off* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Assassin_LS_Off>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.C_Assassin_LS_Off)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.C_Assassin_LS_Off)
    MergeFrom(*source);
  }
}

void C_Assassin_LS_Off::MergeFrom(const C_Assassin_LS_Off& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Assassin_LS_Off)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void C_Assassin_LS_Off::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.C_Assassin_LS_Off)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Assassin_LS_Off::CopyFrom(const C_Assassin_LS_Off& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Assassin_LS_Off)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Assassin_LS_Off::IsInitialized() const {
  return true;
}

void C_Assassin_LS_Off::InternalSwap(C_Assassin_LS_Off* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Assassin_LS_Off::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[25]);
}

// ===================================================================

class S_Assassin_LS_Off::_Internal {
 public:
};

S_Assassin_LS_Off::S_Assassin_LS_Off(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_Assassin_LS_Off)
}
S_Assassin_LS_Off::S_Assassin_LS_Off(const S_Assassin_LS_Off& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.S_Assassin_LS_Off)
}

void S_Assassin_LS_Off::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_Assassin_LS_Off::~S_Assassin_LS_Off() {
  // @@protoc_insertion_point(destructor:skill.S_Assassin_LS_Off)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Assassin_LS_Off::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Assassin_LS_Off::ArenaDtor(void* object) {
  S_Assassin_LS_Off* _this = reinterpret_cast< S_Assassin_LS_Off* >(object);
  (void)_this;
}
void S_Assassin_LS_Off::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Assassin_LS_Off::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Assassin_LS_Off::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Assassin_LS_Off)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Assassin_LS_Off::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Assassin_LS_Off::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Assassin_LS_Off)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Assassin_LS_Off)
  return target;
}

size_t S_Assassin_LS_Off::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Assassin_LS_Off)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Assassin_LS_Off::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_Assassin_LS_Off)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Assassin_LS_Off* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Assassin_LS_Off>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_Assassin_LS_Off)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_Assassin_LS_Off)
    MergeFrom(*source);
  }
}

void S_Assassin_LS_Off::MergeFrom(const S_Assassin_LS_Off& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Assassin_LS_Off)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void S_Assassin_LS_Off::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_Assassin_LS_Off)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Assassin_LS_Off::CopyFrom(const S_Assassin_LS_Off& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Assassin_LS_Off)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Assassin_LS_Off::IsInitialized() const {
  return true;
}

void S_Assassin_LS_Off::InternalSwap(S_Assassin_LS_Off* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Assassin_LS_Off::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[26]);
}

// ===================================================================

class C_Archor_Attack::_Internal {
 public:
};

C_Archor_Attack::C_Archor_Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.C_Archor_Attack)
}
C_Archor_Attack::C_Archor_Attack(const C_Archor_Attack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(end_z_));
  // @@protoc_insertion_point(copy_constructor:skill.C_Archor_Attack)
}

void C_Archor_Attack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(end_z_));
}

C_Archor_Attack::~C_Archor_Attack() {
  // @@protoc_insertion_point(destructor:skill.C_Archor_Attack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Archor_Attack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Archor_Attack::ArenaDtor(void* object) {
  C_Archor_Attack* _this = reinterpret_cast< C_Archor_Attack* >(object);
  (void)_this;
}
void C_Archor_Attack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Archor_Attack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Archor_Attack::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Archor_Attack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_z_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(end_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Archor_Attack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float start_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          start_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float start_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          start_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float start_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          start_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float end_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          end_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float end_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          end_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float end_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          end_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Archor_Attack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Archor_Attack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float start_x = 2;
  if (!(this->start_x() <= 0 && this->start_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_start_x(), target);
  }

  // float start_y = 3;
  if (!(this->start_y() <= 0 && this->start_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_start_y(), target);
  }

  // float start_z = 4;
  if (!(this->start_z() <= 0 && this->start_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_start_z(), target);
  }

  // float end_x = 5;
  if (!(this->end_x() <= 0 && this->end_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_end_x(), target);
  }

  // float end_y = 6;
  if (!(this->end_y() <= 0 && this->end_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_end_y(), target);
  }

  // float end_z = 7;
  if (!(this->end_z() <= 0 && this->end_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_end_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Archor_Attack)
  return target;
}

size_t C_Archor_Attack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Archor_Attack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  // float start_x = 2;
  if (!(this->start_x() <= 0 && this->start_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float start_y = 3;
  if (!(this->start_y() <= 0 && this->start_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float start_z = 4;
  if (!(this->start_z() <= 0 && this->start_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float end_x = 5;
  if (!(this->end_x() <= 0 && this->end_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float end_y = 6;
  if (!(this->end_y() <= 0 && this->end_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float end_z = 7;
  if (!(this->end_z() <= 0 && this->end_z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Archor_Attack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.C_Archor_Attack)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Archor_Attack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Archor_Attack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.C_Archor_Attack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.C_Archor_Attack)
    MergeFrom(*source);
  }
}

void C_Archor_Attack::MergeFrom(const C_Archor_Attack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Archor_Attack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (!(from.start_x() <= 0 && from.start_x() >= 0)) {
    _internal_set_start_x(from._internal_start_x());
  }
  if (!(from.start_y() <= 0 && from.start_y() >= 0)) {
    _internal_set_start_y(from._internal_start_y());
  }
  if (!(from.start_z() <= 0 && from.start_z() >= 0)) {
    _internal_set_start_z(from._internal_start_z());
  }
  if (!(from.end_x() <= 0 && from.end_x() >= 0)) {
    _internal_set_end_x(from._internal_end_x());
  }
  if (!(from.end_y() <= 0 && from.end_y() >= 0)) {
    _internal_set_end_y(from._internal_end_y());
  }
  if (!(from.end_z() <= 0 && from.end_z() >= 0)) {
    _internal_set_end_z(from._internal_end_z());
  }
}

void C_Archor_Attack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.C_Archor_Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Archor_Attack::CopyFrom(const C_Archor_Attack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Archor_Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Archor_Attack::IsInitialized() const {
  return true;
}

void C_Archor_Attack::InternalSwap(C_Archor_Attack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_Archor_Attack, end_z_)
      + sizeof(C_Archor_Attack::end_z_)
      - PROTOBUF_FIELD_OFFSET(C_Archor_Attack, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Archor_Attack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[27]);
}

// ===================================================================

class S_Archor_Attack::_Internal {
 public:
};

S_Archor_Attack::S_Archor_Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_Archor_Attack)
}
S_Archor_Attack::S_Archor_Attack(const S_Archor_Attack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ls_mode_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(ls_mode_));
  // @@protoc_insertion_point(copy_constructor:skill.S_Archor_Attack)
}

void S_Archor_Attack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ls_mode_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(ls_mode_));
}

S_Archor_Attack::~S_Archor_Attack() {
  // @@protoc_insertion_point(destructor:skill.S_Archor_Attack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Archor_Attack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Archor_Attack::ArenaDtor(void* object) {
  S_Archor_Attack* _this = reinterpret_cast< S_Archor_Attack* >(object);
  (void)_this;
}
void S_Archor_Attack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Archor_Attack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Archor_Attack::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Archor_Attack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ls_mode_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(ls_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Archor_Attack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float start_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          start_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float start_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          start_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float start_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          start_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float end_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          end_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float end_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          end_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float end_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          end_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 R_Mode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          r_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LS_Mode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ls_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Archor_Attack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Archor_Attack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float start_x = 2;
  if (!(this->start_x() <= 0 && this->start_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_start_x(), target);
  }

  // float start_y = 3;
  if (!(this->start_y() <= 0 && this->start_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_start_y(), target);
  }

  // float start_z = 4;
  if (!(this->start_z() <= 0 && this->start_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_start_z(), target);
  }

  // float end_x = 5;
  if (!(this->end_x() <= 0 && this->end_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_end_x(), target);
  }

  // float end_y = 6;
  if (!(this->end_y() <= 0 && this->end_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_end_y(), target);
  }

  // float end_z = 7;
  if (!(this->end_z() <= 0 && this->end_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_end_z(), target);
  }

  // int32 R_Mode = 8;
  if (this->r_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_r_mode(), target);
  }

  // int32 LS_Mode = 9;
  if (this->ls_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_ls_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Archor_Attack)
  return target;
}

size_t S_Archor_Attack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Archor_Attack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  // float start_x = 2;
  if (!(this->start_x() <= 0 && this->start_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float start_y = 3;
  if (!(this->start_y() <= 0 && this->start_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float start_z = 4;
  if (!(this->start_z() <= 0 && this->start_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float end_x = 5;
  if (!(this->end_x() <= 0 && this->end_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float end_y = 6;
  if (!(this->end_y() <= 0 && this->end_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float end_z = 7;
  if (!(this->end_z() <= 0 && this->end_z() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 R_Mode = 8;
  if (this->r_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r_mode());
  }

  // int32 LS_Mode = 9;
  if (this->ls_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ls_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Archor_Attack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_Archor_Attack)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Archor_Attack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Archor_Attack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_Archor_Attack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_Archor_Attack)
    MergeFrom(*source);
  }
}

void S_Archor_Attack::MergeFrom(const S_Archor_Attack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Archor_Attack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (!(from.start_x() <= 0 && from.start_x() >= 0)) {
    _internal_set_start_x(from._internal_start_x());
  }
  if (!(from.start_y() <= 0 && from.start_y() >= 0)) {
    _internal_set_start_y(from._internal_start_y());
  }
  if (!(from.start_z() <= 0 && from.start_z() >= 0)) {
    _internal_set_start_z(from._internal_start_z());
  }
  if (!(from.end_x() <= 0 && from.end_x() >= 0)) {
    _internal_set_end_x(from._internal_end_x());
  }
  if (!(from.end_y() <= 0 && from.end_y() >= 0)) {
    _internal_set_end_y(from._internal_end_y());
  }
  if (!(from.end_z() <= 0 && from.end_z() >= 0)) {
    _internal_set_end_z(from._internal_end_z());
  }
  if (from.r_mode() != 0) {
    _internal_set_r_mode(from._internal_r_mode());
  }
  if (from.ls_mode() != 0) {
    _internal_set_ls_mode(from._internal_ls_mode());
  }
}

void S_Archor_Attack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_Archor_Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Archor_Attack::CopyFrom(const S_Archor_Attack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Archor_Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Archor_Attack::IsInitialized() const {
  return true;
}

void S_Archor_Attack::InternalSwap(S_Archor_Attack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Archor_Attack, ls_mode_)
      + sizeof(S_Archor_Attack::ls_mode_)
      - PROTOBUF_FIELD_OFFSET(S_Archor_Attack, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Archor_Attack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[28]);
}

// ===================================================================

class C_Archor_Q_Charging::_Internal {
 public:
};

C_Archor_Q_Charging::C_Archor_Q_Charging(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.C_Archor_Q_Charging)
}
C_Archor_Q_Charging::C_Archor_Q_Charging(const C_Archor_Q_Charging& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.C_Archor_Q_Charging)
}

void C_Archor_Q_Charging::SharedCtor() {
object_id_ = uint64_t{0u};
}

C_Archor_Q_Charging::~C_Archor_Q_Charging() {
  // @@protoc_insertion_point(destructor:skill.C_Archor_Q_Charging)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Archor_Q_Charging::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Archor_Q_Charging::ArenaDtor(void* object) {
  C_Archor_Q_Charging* _this = reinterpret_cast< C_Archor_Q_Charging* >(object);
  (void)_this;
}
void C_Archor_Q_Charging::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Archor_Q_Charging::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Archor_Q_Charging::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Archor_Q_Charging)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Archor_Q_Charging::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Archor_Q_Charging::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Archor_Q_Charging)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Archor_Q_Charging)
  return target;
}

size_t C_Archor_Q_Charging::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Archor_Q_Charging)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Archor_Q_Charging::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.C_Archor_Q_Charging)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Archor_Q_Charging* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Archor_Q_Charging>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.C_Archor_Q_Charging)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.C_Archor_Q_Charging)
    MergeFrom(*source);
  }
}

void C_Archor_Q_Charging::MergeFrom(const C_Archor_Q_Charging& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Archor_Q_Charging)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void C_Archor_Q_Charging::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.C_Archor_Q_Charging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Archor_Q_Charging::CopyFrom(const C_Archor_Q_Charging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Archor_Q_Charging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Archor_Q_Charging::IsInitialized() const {
  return true;
}

void C_Archor_Q_Charging::InternalSwap(C_Archor_Q_Charging* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Archor_Q_Charging::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[29]);
}

// ===================================================================

class S_Archor_Q_Charging::_Internal {
 public:
};

S_Archor_Q_Charging::S_Archor_Q_Charging(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_Archor_Q_Charging)
}
S_Archor_Q_Charging::S_Archor_Q_Charging(const S_Archor_Q_Charging& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&r_mode_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(r_mode_));
  // @@protoc_insertion_point(copy_constructor:skill.S_Archor_Q_Charging)
}

void S_Archor_Q_Charging::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&r_mode_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(r_mode_));
}

S_Archor_Q_Charging::~S_Archor_Q_Charging() {
  // @@protoc_insertion_point(destructor:skill.S_Archor_Q_Charging)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Archor_Q_Charging::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Archor_Q_Charging::ArenaDtor(void* object) {
  S_Archor_Q_Charging* _this = reinterpret_cast< S_Archor_Q_Charging* >(object);
  (void)_this;
}
void S_Archor_Q_Charging::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Archor_Q_Charging::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Archor_Q_Charging::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Archor_Q_Charging)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_mode_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(r_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Archor_Q_Charging::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 R_Mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          r_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Archor_Q_Charging::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Archor_Q_Charging)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // int32 R_Mode = 2;
  if (this->r_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_r_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Archor_Q_Charging)
  return target;
}

size_t S_Archor_Q_Charging::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Archor_Q_Charging)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  // int32 R_Mode = 2;
  if (this->r_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Archor_Q_Charging::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_Archor_Q_Charging)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Archor_Q_Charging* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Archor_Q_Charging>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_Archor_Q_Charging)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_Archor_Q_Charging)
    MergeFrom(*source);
  }
}

void S_Archor_Q_Charging::MergeFrom(const S_Archor_Q_Charging& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Archor_Q_Charging)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (from.r_mode() != 0) {
    _internal_set_r_mode(from._internal_r_mode());
  }
}

void S_Archor_Q_Charging::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_Archor_Q_Charging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Archor_Q_Charging::CopyFrom(const S_Archor_Q_Charging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Archor_Q_Charging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Archor_Q_Charging::IsInitialized() const {
  return true;
}

void S_Archor_Q_Charging::InternalSwap(S_Archor_Q_Charging* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Archor_Q_Charging, r_mode_)
      + sizeof(S_Archor_Q_Charging::r_mode_)
      - PROTOBUF_FIELD_OFFSET(S_Archor_Q_Charging, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Archor_Q_Charging::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[30]);
}

// ===================================================================

class C_Archor_Q_Shot::_Internal {
 public:
};

C_Archor_Q_Shot::C_Archor_Q_Shot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.C_Archor_Q_Shot)
}
C_Archor_Q_Shot::C_Archor_Q_Shot(const C_Archor_Q_Shot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(end_z_));
  // @@protoc_insertion_point(copy_constructor:skill.C_Archor_Q_Shot)
}

void C_Archor_Q_Shot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(end_z_));
}

C_Archor_Q_Shot::~C_Archor_Q_Shot() {
  // @@protoc_insertion_point(destructor:skill.C_Archor_Q_Shot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Archor_Q_Shot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Archor_Q_Shot::ArenaDtor(void* object) {
  C_Archor_Q_Shot* _this = reinterpret_cast< C_Archor_Q_Shot* >(object);
  (void)_this;
}
void C_Archor_Q_Shot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Archor_Q_Shot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Archor_Q_Shot::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Archor_Q_Shot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_z_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(end_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Archor_Q_Shot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float start_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          start_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float start_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          start_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float start_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          start_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float end_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          end_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float end_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          end_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float end_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          end_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Archor_Q_Shot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Archor_Q_Shot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float start_x = 2;
  if (!(this->start_x() <= 0 && this->start_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_start_x(), target);
  }

  // float start_y = 3;
  if (!(this->start_y() <= 0 && this->start_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_start_y(), target);
  }

  // float start_z = 4;
  if (!(this->start_z() <= 0 && this->start_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_start_z(), target);
  }

  // float end_x = 5;
  if (!(this->end_x() <= 0 && this->end_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_end_x(), target);
  }

  // float end_y = 6;
  if (!(this->end_y() <= 0 && this->end_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_end_y(), target);
  }

  // float end_z = 7;
  if (!(this->end_z() <= 0 && this->end_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_end_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Archor_Q_Shot)
  return target;
}

size_t C_Archor_Q_Shot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Archor_Q_Shot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  // float start_x = 2;
  if (!(this->start_x() <= 0 && this->start_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float start_y = 3;
  if (!(this->start_y() <= 0 && this->start_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float start_z = 4;
  if (!(this->start_z() <= 0 && this->start_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float end_x = 5;
  if (!(this->end_x() <= 0 && this->end_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float end_y = 6;
  if (!(this->end_y() <= 0 && this->end_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float end_z = 7;
  if (!(this->end_z() <= 0 && this->end_z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Archor_Q_Shot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.C_Archor_Q_Shot)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Archor_Q_Shot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Archor_Q_Shot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.C_Archor_Q_Shot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.C_Archor_Q_Shot)
    MergeFrom(*source);
  }
}

void C_Archor_Q_Shot::MergeFrom(const C_Archor_Q_Shot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Archor_Q_Shot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (!(from.start_x() <= 0 && from.start_x() >= 0)) {
    _internal_set_start_x(from._internal_start_x());
  }
  if (!(from.start_y() <= 0 && from.start_y() >= 0)) {
    _internal_set_start_y(from._internal_start_y());
  }
  if (!(from.start_z() <= 0 && from.start_z() >= 0)) {
    _internal_set_start_z(from._internal_start_z());
  }
  if (!(from.end_x() <= 0 && from.end_x() >= 0)) {
    _internal_set_end_x(from._internal_end_x());
  }
  if (!(from.end_y() <= 0 && from.end_y() >= 0)) {
    _internal_set_end_y(from._internal_end_y());
  }
  if (!(from.end_z() <= 0 && from.end_z() >= 0)) {
    _internal_set_end_z(from._internal_end_z());
  }
}

void C_Archor_Q_Shot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.C_Archor_Q_Shot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Archor_Q_Shot::CopyFrom(const C_Archor_Q_Shot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Archor_Q_Shot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Archor_Q_Shot::IsInitialized() const {
  return true;
}

void C_Archor_Q_Shot::InternalSwap(C_Archor_Q_Shot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_Archor_Q_Shot, end_z_)
      + sizeof(C_Archor_Q_Shot::end_z_)
      - PROTOBUF_FIELD_OFFSET(C_Archor_Q_Shot, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Archor_Q_Shot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[31]);
}

// ===================================================================

class S_Archor_Q_Shot::_Internal {
 public:
};

S_Archor_Q_Shot::S_Archor_Q_Shot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_Archor_Q_Shot)
}
S_Archor_Q_Shot::S_Archor_Q_Shot(const S_Archor_Q_Shot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(end_z_));
  // @@protoc_insertion_point(copy_constructor:skill.S_Archor_Q_Shot)
}

void S_Archor_Q_Shot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(end_z_));
}

S_Archor_Q_Shot::~S_Archor_Q_Shot() {
  // @@protoc_insertion_point(destructor:skill.S_Archor_Q_Shot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Archor_Q_Shot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Archor_Q_Shot::ArenaDtor(void* object) {
  S_Archor_Q_Shot* _this = reinterpret_cast< S_Archor_Q_Shot* >(object);
  (void)_this;
}
void S_Archor_Q_Shot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Archor_Q_Shot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Archor_Q_Shot::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Archor_Q_Shot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_z_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(end_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Archor_Q_Shot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float start_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          start_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float start_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          start_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float start_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          start_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float end_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          end_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float end_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          end_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float end_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          end_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Archor_Q_Shot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Archor_Q_Shot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float start_x = 2;
  if (!(this->start_x() <= 0 && this->start_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_start_x(), target);
  }

  // float start_y = 3;
  if (!(this->start_y() <= 0 && this->start_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_start_y(), target);
  }

  // float start_z = 4;
  if (!(this->start_z() <= 0 && this->start_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_start_z(), target);
  }

  // float end_x = 5;
  if (!(this->end_x() <= 0 && this->end_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_end_x(), target);
  }

  // float end_y = 6;
  if (!(this->end_y() <= 0 && this->end_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_end_y(), target);
  }

  // float end_z = 7;
  if (!(this->end_z() <= 0 && this->end_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_end_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Archor_Q_Shot)
  return target;
}

size_t S_Archor_Q_Shot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Archor_Q_Shot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  // float start_x = 2;
  if (!(this->start_x() <= 0 && this->start_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float start_y = 3;
  if (!(this->start_y() <= 0 && this->start_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float start_z = 4;
  if (!(this->start_z() <= 0 && this->start_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float end_x = 5;
  if (!(this->end_x() <= 0 && this->end_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float end_y = 6;
  if (!(this->end_y() <= 0 && this->end_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float end_z = 7;
  if (!(this->end_z() <= 0 && this->end_z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Archor_Q_Shot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_Archor_Q_Shot)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Archor_Q_Shot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Archor_Q_Shot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_Archor_Q_Shot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_Archor_Q_Shot)
    MergeFrom(*source);
  }
}

void S_Archor_Q_Shot::MergeFrom(const S_Archor_Q_Shot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Archor_Q_Shot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (!(from.start_x() <= 0 && from.start_x() >= 0)) {
    _internal_set_start_x(from._internal_start_x());
  }
  if (!(from.start_y() <= 0 && from.start_y() >= 0)) {
    _internal_set_start_y(from._internal_start_y());
  }
  if (!(from.start_z() <= 0 && from.start_z() >= 0)) {
    _internal_set_start_z(from._internal_start_z());
  }
  if (!(from.end_x() <= 0 && from.end_x() >= 0)) {
    _internal_set_end_x(from._internal_end_x());
  }
  if (!(from.end_y() <= 0 && from.end_y() >= 0)) {
    _internal_set_end_y(from._internal_end_y());
  }
  if (!(from.end_z() <= 0 && from.end_z() >= 0)) {
    _internal_set_end_z(from._internal_end_z());
  }
}

void S_Archor_Q_Shot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_Archor_Q_Shot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Archor_Q_Shot::CopyFrom(const S_Archor_Q_Shot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Archor_Q_Shot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Archor_Q_Shot::IsInitialized() const {
  return true;
}

void S_Archor_Q_Shot::InternalSwap(S_Archor_Q_Shot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Archor_Q_Shot, end_z_)
      + sizeof(S_Archor_Q_Shot::end_z_)
      - PROTOBUF_FIELD_OFFSET(S_Archor_Q_Shot, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Archor_Q_Shot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[32]);
}

// ===================================================================

class C_Archor_E::_Internal {
 public:
};

C_Archor_E::C_Archor_E(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.C_Archor_E)
}
C_Archor_E::C_Archor_E(const C_Archor_E& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:skill.C_Archor_E)
}

void C_Archor_E::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
}

C_Archor_E::~C_Archor_E() {
  // @@protoc_insertion_point(destructor:skill.C_Archor_E)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Archor_E::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Archor_E::ArenaDtor(void* object) {
  C_Archor_E* _this = reinterpret_cast< C_Archor_E* >(object);
  (void)_this;
}
void C_Archor_E::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Archor_E::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Archor_E::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Archor_E)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Archor_E::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Archor_E::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Archor_E)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Archor_E)
  return target;
}

size_t C_Archor_E::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Archor_E)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Archor_E::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.C_Archor_E)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Archor_E* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Archor_E>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.C_Archor_E)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.C_Archor_E)
    MergeFrom(*source);
  }
}

void C_Archor_E::MergeFrom(const C_Archor_E& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Archor_E)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void C_Archor_E::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.C_Archor_E)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Archor_E::CopyFrom(const C_Archor_E& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Archor_E)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Archor_E::IsInitialized() const {
  return true;
}

void C_Archor_E::InternalSwap(C_Archor_E* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_Archor_E, z_)
      + sizeof(C_Archor_E::z_)
      - PROTOBUF_FIELD_OFFSET(C_Archor_E, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Archor_E::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[33]);
}

// ===================================================================

class S_Archor_E::_Internal {
 public:
};

S_Archor_E::S_Archor_E(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_Archor_E)
}
S_Archor_E::S_Archor_E(const S_Archor_E& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:skill.S_Archor_E)
}

void S_Archor_E::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
}

S_Archor_E::~S_Archor_E() {
  // @@protoc_insertion_point(destructor:skill.S_Archor_E)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Archor_E::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Archor_E::ArenaDtor(void* object) {
  S_Archor_E* _this = reinterpret_cast< S_Archor_E* >(object);
  (void)_this;
}
void S_Archor_E::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Archor_E::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Archor_E::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Archor_E)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Archor_E::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Archor_E::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Archor_E)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Archor_E)
  return target;
}

size_t S_Archor_E::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Archor_E)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Archor_E::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_Archor_E)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Archor_E* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Archor_E>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_Archor_E)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_Archor_E)
    MergeFrom(*source);
  }
}

void S_Archor_E::MergeFrom(const S_Archor_E& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Archor_E)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void S_Archor_E::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_Archor_E)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Archor_E::CopyFrom(const S_Archor_E& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Archor_E)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Archor_E::IsInitialized() const {
  return true;
}

void S_Archor_E::InternalSwap(S_Archor_E* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Archor_E, z_)
      + sizeof(S_Archor_E::z_)
      - PROTOBUF_FIELD_OFFSET(S_Archor_E, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Archor_E::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[34]);
}

// ===================================================================

class C_Archor_R::_Internal {
 public:
};

C_Archor_R::C_Archor_R(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.C_Archor_R)
}
C_Archor_R::C_Archor_R(const C_Archor_R& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.C_Archor_R)
}

void C_Archor_R::SharedCtor() {
object_id_ = uint64_t{0u};
}

C_Archor_R::~C_Archor_R() {
  // @@protoc_insertion_point(destructor:skill.C_Archor_R)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Archor_R::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Archor_R::ArenaDtor(void* object) {
  C_Archor_R* _this = reinterpret_cast< C_Archor_R* >(object);
  (void)_this;
}
void C_Archor_R::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Archor_R::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Archor_R::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Archor_R)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Archor_R::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Archor_R::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Archor_R)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Archor_R)
  return target;
}

size_t C_Archor_R::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Archor_R)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Archor_R::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.C_Archor_R)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Archor_R* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Archor_R>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.C_Archor_R)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.C_Archor_R)
    MergeFrom(*source);
  }
}

void C_Archor_R::MergeFrom(const C_Archor_R& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Archor_R)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void C_Archor_R::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.C_Archor_R)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Archor_R::CopyFrom(const C_Archor_R& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Archor_R)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Archor_R::IsInitialized() const {
  return true;
}

void C_Archor_R::InternalSwap(C_Archor_R* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Archor_R::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[35]);
}

// ===================================================================

class S_Archor_R::_Internal {
 public:
};

S_Archor_R::S_Archor_R(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_Archor_R)
}
S_Archor_R::S_Archor_R(const S_Archor_R& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.S_Archor_R)
}

void S_Archor_R::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_Archor_R::~S_Archor_R() {
  // @@protoc_insertion_point(destructor:skill.S_Archor_R)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Archor_R::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Archor_R::ArenaDtor(void* object) {
  S_Archor_R* _this = reinterpret_cast< S_Archor_R* >(object);
  (void)_this;
}
void S_Archor_R::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Archor_R::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Archor_R::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Archor_R)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Archor_R::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Archor_R::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Archor_R)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Archor_R)
  return target;
}

size_t S_Archor_R::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Archor_R)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Archor_R::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_Archor_R)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Archor_R* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Archor_R>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_Archor_R)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_Archor_R)
    MergeFrom(*source);
  }
}

void S_Archor_R::MergeFrom(const S_Archor_R& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Archor_R)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void S_Archor_R::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_Archor_R)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Archor_R::CopyFrom(const S_Archor_R& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Archor_R)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Archor_R::IsInitialized() const {
  return true;
}

void S_Archor_R::InternalSwap(S_Archor_R* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Archor_R::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[36]);
}

// ===================================================================

class C_Archor_LS::_Internal {
 public:
};

C_Archor_LS::C_Archor_LS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.C_Archor_LS)
}
C_Archor_LS::C_Archor_LS(const C_Archor_LS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.C_Archor_LS)
}

void C_Archor_LS::SharedCtor() {
object_id_ = uint64_t{0u};
}

C_Archor_LS::~C_Archor_LS() {
  // @@protoc_insertion_point(destructor:skill.C_Archor_LS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Archor_LS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Archor_LS::ArenaDtor(void* object) {
  C_Archor_LS* _this = reinterpret_cast< C_Archor_LS* >(object);
  (void)_this;
}
void C_Archor_LS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Archor_LS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Archor_LS::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Archor_LS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Archor_LS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Archor_LS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Archor_LS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Archor_LS)
  return target;
}

size_t C_Archor_LS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Archor_LS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Archor_LS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.C_Archor_LS)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Archor_LS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Archor_LS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.C_Archor_LS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.C_Archor_LS)
    MergeFrom(*source);
  }
}

void C_Archor_LS::MergeFrom(const C_Archor_LS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Archor_LS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void C_Archor_LS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.C_Archor_LS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Archor_LS::CopyFrom(const C_Archor_LS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Archor_LS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Archor_LS::IsInitialized() const {
  return true;
}

void C_Archor_LS::InternalSwap(C_Archor_LS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Archor_LS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[37]);
}

// ===================================================================

class S_Archor_LS::_Internal {
 public:
};

S_Archor_LS::S_Archor_LS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_Archor_LS)
}
S_Archor_LS::S_Archor_LS(const S_Archor_LS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.S_Archor_LS)
}

void S_Archor_LS::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_Archor_LS::~S_Archor_LS() {
  // @@protoc_insertion_point(destructor:skill.S_Archor_LS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Archor_LS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Archor_LS::ArenaDtor(void* object) {
  S_Archor_LS* _this = reinterpret_cast< S_Archor_LS* >(object);
  (void)_this;
}
void S_Archor_LS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Archor_LS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Archor_LS::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Archor_LS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Archor_LS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Archor_LS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Archor_LS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Archor_LS)
  return target;
}

size_t S_Archor_LS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Archor_LS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Archor_LS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_Archor_LS)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Archor_LS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Archor_LS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_Archor_LS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_Archor_LS)
    MergeFrom(*source);
  }
}

void S_Archor_LS::MergeFrom(const S_Archor_LS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Archor_LS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void S_Archor_LS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_Archor_LS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Archor_LS::CopyFrom(const S_Archor_LS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Archor_LS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Archor_LS::IsInitialized() const {
  return true;
}

void S_Archor_LS::InternalSwap(S_Archor_LS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Archor_LS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[38]);
}

// ===================================================================

class S_Archor_R_Off::_Internal {
 public:
};

S_Archor_R_Off::S_Archor_R_Off(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_Archor_R_Off)
}
S_Archor_R_Off::S_Archor_R_Off(const S_Archor_R_Off& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.S_Archor_R_Off)
}

void S_Archor_R_Off::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_Archor_R_Off::~S_Archor_R_Off() {
  // @@protoc_insertion_point(destructor:skill.S_Archor_R_Off)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Archor_R_Off::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Archor_R_Off::ArenaDtor(void* object) {
  S_Archor_R_Off* _this = reinterpret_cast< S_Archor_R_Off* >(object);
  (void)_this;
}
void S_Archor_R_Off::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Archor_R_Off::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Archor_R_Off::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Archor_R_Off)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Archor_R_Off::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Archor_R_Off::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Archor_R_Off)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Archor_R_Off)
  return target;
}

size_t S_Archor_R_Off::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Archor_R_Off)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Archor_R_Off::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_Archor_R_Off)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Archor_R_Off* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Archor_R_Off>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_Archor_R_Off)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_Archor_R_Off)
    MergeFrom(*source);
  }
}

void S_Archor_R_Off::MergeFrom(const S_Archor_R_Off& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Archor_R_Off)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void S_Archor_R_Off::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_Archor_R_Off)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Archor_R_Off::CopyFrom(const S_Archor_R_Off& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Archor_R_Off)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Archor_R_Off::IsInitialized() const {
  return true;
}

void S_Archor_R_Off::InternalSwap(S_Archor_R_Off* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Archor_R_Off::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[39]);
}

// ===================================================================

class S_Archor_LS_Off::_Internal {
 public:
};

S_Archor_LS_Off::S_Archor_LS_Off(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:skill.S_Archor_LS_Off)
}
S_Archor_LS_Off::S_Archor_LS_Off(const S_Archor_LS_Off& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.S_Archor_LS_Off)
}

void S_Archor_LS_Off::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_Archor_LS_Off::~S_Archor_LS_Off() {
  // @@protoc_insertion_point(destructor:skill.S_Archor_LS_Off)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Archor_LS_Off::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Archor_LS_Off::ArenaDtor(void* object) {
  S_Archor_LS_Off* _this = reinterpret_cast< S_Archor_LS_Off* >(object);
  (void)_this;
}
void S_Archor_LS_Off::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Archor_LS_Off::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Archor_LS_Off::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Archor_LS_Off)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Archor_LS_Off::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Archor_LS_Off::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Archor_LS_Off)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Archor_LS_Off)
  return target;
}

size_t S_Archor_LS_Off::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Archor_LS_Off)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Archor_LS_Off::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:skill.S_Archor_LS_Off)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Archor_LS_Off* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Archor_LS_Off>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:skill.S_Archor_LS_Off)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:skill.S_Archor_LS_Off)
    MergeFrom(*source);
  }
}

void S_Archor_LS_Off::MergeFrom(const S_Archor_LS_Off& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Archor_LS_Off)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void S_Archor_LS_Off::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:skill.S_Archor_LS_Off)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Archor_LS_Off::CopyFrom(const S_Archor_LS_Off& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Archor_LS_Off)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Archor_LS_Off::IsInitialized() const {
  return true;
}

void S_Archor_LS_Off::InternalSwap(S_Archor_LS_Off* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Archor_LS_Off::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[40]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace skill
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::skill::S_CoolTime* Arena::CreateMaybeMessage< ::skill::S_CoolTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_CoolTime >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Warrior_Attack* Arena::CreateMaybeMessage< ::skill::C_Warrior_Attack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Warrior_Attack >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Warrior_Attack* Arena::CreateMaybeMessage< ::skill::S_Warrior_Attack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Warrior_Attack >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Warrior_Q* Arena::CreateMaybeMessage< ::skill::C_Warrior_Q >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Warrior_Q >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Warrior_Q* Arena::CreateMaybeMessage< ::skill::S_Warrior_Q >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Warrior_Q >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Warrior_Q_Hit* Arena::CreateMaybeMessage< ::skill::C_Warrior_Q_Hit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Warrior_Q_Hit >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Warrior_Q_Hit* Arena::CreateMaybeMessage< ::skill::S_Warrior_Q_Hit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Warrior_Q_Hit >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Warrior_E* Arena::CreateMaybeMessage< ::skill::C_Warrior_E >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Warrior_E >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Warrior_E* Arena::CreateMaybeMessage< ::skill::S_Warrior_E >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Warrior_E >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Warrior_E_Success* Arena::CreateMaybeMessage< ::skill::C_Warrior_E_Success >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Warrior_E_Success >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Warrior_E_Success* Arena::CreateMaybeMessage< ::skill::S_Warrior_E_Success >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Warrior_E_Success >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Warrior_R* Arena::CreateMaybeMessage< ::skill::C_Warrior_R >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Warrior_R >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Warrior_R* Arena::CreateMaybeMessage< ::skill::S_Warrior_R >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Warrior_R >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Warrior_LS* Arena::CreateMaybeMessage< ::skill::C_Warrior_LS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Warrior_LS >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Warrior_LS* Arena::CreateMaybeMessage< ::skill::S_Warrior_LS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Warrior_LS >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_ASSASSIN_Attack* Arena::CreateMaybeMessage< ::skill::C_ASSASSIN_Attack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_ASSASSIN_Attack >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_ASSASSIN_Attack* Arena::CreateMaybeMessage< ::skill::S_ASSASSIN_Attack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_ASSASSIN_Attack >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_ASSASSIN_Q* Arena::CreateMaybeMessage< ::skill::C_ASSASSIN_Q >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_ASSASSIN_Q >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_ASSASSIN_Q* Arena::CreateMaybeMessage< ::skill::S_ASSASSIN_Q >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_ASSASSIN_Q >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Assassin_E* Arena::CreateMaybeMessage< ::skill::C_Assassin_E >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Assassin_E >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Assassin_E* Arena::CreateMaybeMessage< ::skill::S_Assassin_E >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Assassin_E >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_ASSASSIN_R* Arena::CreateMaybeMessage< ::skill::C_ASSASSIN_R >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_ASSASSIN_R >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_ASSASSIN_R* Arena::CreateMaybeMessage< ::skill::S_ASSASSIN_R >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_ASSASSIN_R >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_ASSASSIN_LS* Arena::CreateMaybeMessage< ::skill::C_ASSASSIN_LS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_ASSASSIN_LS >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_ASSASSIN_LS* Arena::CreateMaybeMessage< ::skill::S_ASSASSIN_LS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_ASSASSIN_LS >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Assassin_LS_Off* Arena::CreateMaybeMessage< ::skill::C_Assassin_LS_Off >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Assassin_LS_Off >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Assassin_LS_Off* Arena::CreateMaybeMessage< ::skill::S_Assassin_LS_Off >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Assassin_LS_Off >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Archor_Attack* Arena::CreateMaybeMessage< ::skill::C_Archor_Attack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Archor_Attack >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Archor_Attack* Arena::CreateMaybeMessage< ::skill::S_Archor_Attack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Archor_Attack >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Archor_Q_Charging* Arena::CreateMaybeMessage< ::skill::C_Archor_Q_Charging >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Archor_Q_Charging >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Archor_Q_Charging* Arena::CreateMaybeMessage< ::skill::S_Archor_Q_Charging >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Archor_Q_Charging >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Archor_Q_Shot* Arena::CreateMaybeMessage< ::skill::C_Archor_Q_Shot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Archor_Q_Shot >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Archor_Q_Shot* Arena::CreateMaybeMessage< ::skill::S_Archor_Q_Shot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Archor_Q_Shot >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Archor_E* Arena::CreateMaybeMessage< ::skill::C_Archor_E >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Archor_E >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Archor_E* Arena::CreateMaybeMessage< ::skill::S_Archor_E >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Archor_E >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Archor_R* Arena::CreateMaybeMessage< ::skill::C_Archor_R >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Archor_R >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Archor_R* Arena::CreateMaybeMessage< ::skill::S_Archor_R >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Archor_R >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Archor_LS* Arena::CreateMaybeMessage< ::skill::C_Archor_LS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Archor_LS >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Archor_LS* Arena::CreateMaybeMessage< ::skill::S_Archor_LS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Archor_LS >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Archor_R_Off* Arena::CreateMaybeMessage< ::skill::S_Archor_R_Off >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Archor_R_Off >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Archor_LS_Off* Arena::CreateMaybeMessage< ::skill::S_Archor_LS_Off >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Archor_LS_Off >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
