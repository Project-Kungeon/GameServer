// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MonsterPattern.proto

#include "MonsterPattern.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace monster {
namespace pattern {
constexpr S_Rampage_BasicAttack::S_Rampage_BasicAttack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_Rampage_BasicAttackDefaultTypeInternal {
  constexpr S_Rampage_BasicAttackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Rampage_BasicAttackDefaultTypeInternal() {}
  union {
    S_Rampage_BasicAttack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Rampage_BasicAttackDefaultTypeInternal _S_Rampage_BasicAttack_default_instance_;
constexpr C_Rampage_BasicAttackHit::C_Rampage_BasicAttackHit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , target_id_(uint64_t{0u}){}
struct C_Rampage_BasicAttackHitDefaultTypeInternal {
  constexpr C_Rampage_BasicAttackHitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_Rampage_BasicAttackHitDefaultTypeInternal() {}
  union {
    C_Rampage_BasicAttackHit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_Rampage_BasicAttackHitDefaultTypeInternal _C_Rampage_BasicAttackHit_default_instance_;
constexpr S_Rampage_Roar::S_Rampage_Roar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_Rampage_RoarDefaultTypeInternal {
  constexpr S_Rampage_RoarDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Rampage_RoarDefaultTypeInternal() {}
  union {
    S_Rampage_Roar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Rampage_RoarDefaultTypeInternal _S_Rampage_Roar_default_instance_;
constexpr S_Rampage_EarthQuake::S_Rampage_EarthQuake(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_Rampage_EarthQuakeDefaultTypeInternal {
  constexpr S_Rampage_EarthQuakeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Rampage_EarthQuakeDefaultTypeInternal() {}
  union {
    S_Rampage_EarthQuake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Rampage_EarthQuakeDefaultTypeInternal _S_Rampage_EarthQuake_default_instance_;
constexpr S_TurnToTarget::S_TurnToTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , pitch_(0)
  , yaw_(0)
  , roll_(0){}
struct S_TurnToTargetDefaultTypeInternal {
  constexpr S_TurnToTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_TurnToTargetDefaultTypeInternal() {}
  union {
    S_TurnToTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_TurnToTargetDefaultTypeInternal _S_TurnToTarget_default_instance_;
constexpr S_Rampage_EnhanceAttack::S_Rampage_EnhanceAttack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_Rampage_EnhanceAttackDefaultTypeInternal {
  constexpr S_Rampage_EnhanceAttackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Rampage_EnhanceAttackDefaultTypeInternal() {}
  union {
    S_Rampage_EnhanceAttack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Rampage_EnhanceAttackDefaultTypeInternal _S_Rampage_EnhanceAttack_default_instance_;
constexpr S_Rampage_Throwaway::S_Rampage_Throwaway(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , target_x_(0)
  , target_y_(0)
  , target_z_(0){}
struct S_Rampage_ThrowawayDefaultTypeInternal {
  constexpr S_Rampage_ThrowawayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Rampage_ThrowawayDefaultTypeInternal() {}
  union {
    S_Rampage_Throwaway _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Rampage_ThrowawayDefaultTypeInternal _S_Rampage_Throwaway_default_instance_;
}  // namespace pattern
}  // namespace monster
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MonsterPattern_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_MonsterPattern_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MonsterPattern_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MonsterPattern_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::monster::pattern::S_Rampage_BasicAttack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::monster::pattern::S_Rampage_BasicAttack, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::monster::pattern::C_Rampage_BasicAttackHit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::monster::pattern::C_Rampage_BasicAttackHit, object_id_),
  PROTOBUF_FIELD_OFFSET(::monster::pattern::C_Rampage_BasicAttackHit, target_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::monster::pattern::S_Rampage_Roar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::monster::pattern::S_Rampage_Roar, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::monster::pattern::S_Rampage_EarthQuake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::monster::pattern::S_Rampage_EarthQuake, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::monster::pattern::S_TurnToTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::monster::pattern::S_TurnToTarget, object_id_),
  PROTOBUF_FIELD_OFFSET(::monster::pattern::S_TurnToTarget, pitch_),
  PROTOBUF_FIELD_OFFSET(::monster::pattern::S_TurnToTarget, yaw_),
  PROTOBUF_FIELD_OFFSET(::monster::pattern::S_TurnToTarget, roll_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::monster::pattern::S_Rampage_EnhanceAttack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::monster::pattern::S_Rampage_EnhanceAttack, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::monster::pattern::S_Rampage_Throwaway, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::monster::pattern::S_Rampage_Throwaway, object_id_),
  PROTOBUF_FIELD_OFFSET(::monster::pattern::S_Rampage_Throwaway, target_x_),
  PROTOBUF_FIELD_OFFSET(::monster::pattern::S_Rampage_Throwaway, target_y_),
  PROTOBUF_FIELD_OFFSET(::monster::pattern::S_Rampage_Throwaway, target_z_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::monster::pattern::S_Rampage_BasicAttack)},
  { 6, -1, sizeof(::monster::pattern::C_Rampage_BasicAttackHit)},
  { 13, -1, sizeof(::monster::pattern::S_Rampage_Roar)},
  { 19, -1, sizeof(::monster::pattern::S_Rampage_EarthQuake)},
  { 25, -1, sizeof(::monster::pattern::S_TurnToTarget)},
  { 34, -1, sizeof(::monster::pattern::S_Rampage_EnhanceAttack)},
  { 40, -1, sizeof(::monster::pattern::S_Rampage_Throwaway)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::monster::pattern::_S_Rampage_BasicAttack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::monster::pattern::_C_Rampage_BasicAttackHit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::monster::pattern::_S_Rampage_Roar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::monster::pattern::_S_Rampage_EarthQuake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::monster::pattern::_S_TurnToTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::monster::pattern::_S_Rampage_EnhanceAttack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::monster::pattern::_S_Rampage_Throwaway_default_instance_),
};

const char descriptor_table_protodef_MonsterPattern_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024MonsterPattern.proto\022\017monster.pattern\""
  "*\n\025S_Rampage_BasicAttack\022\021\n\tobject_id\030\001 "
  "\001(\004\"@\n\030C_Rampage_BasicAttackHit\022\021\n\tobjec"
  "t_id\030\001 \001(\004\022\021\n\ttarget_id\030\002 \001(\004\"#\n\016S_Rampa"
  "ge_Roar\022\021\n\tobject_id\030\001 \001(\004\")\n\024S_Rampage_"
  "EarthQuake\022\021\n\tobject_id\030\001 \001(\004\"M\n\016S_TurnT"
  "oTarget\022\021\n\tobject_id\030\001 \001(\004\022\r\n\005pitch\030\002 \001("
  "\002\022\013\n\003yaw\030\003 \001(\002\022\014\n\004roll\030\004 \001(\002\",\n\027S_Rampag"
  "e_EnhanceAttack\022\021\n\tobject_id\030\001 \001(\004\"^\n\023S_"
  "Rampage_Throwaway\022\021\n\tobject_id\030\001 \001(\004\022\020\n\010"
  "target_x\030\002 \001(\002\022\020\n\010target_y\030\003 \001(\002\022\020\n\010targ"
  "et_z\030\004 \001(\002b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MonsterPattern_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MonsterPattern_2eproto = {
  false, false, 458, descriptor_table_protodef_MonsterPattern_2eproto, "MonsterPattern.proto", 
  &descriptor_table_MonsterPattern_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_MonsterPattern_2eproto::offsets,
  file_level_metadata_MonsterPattern_2eproto, file_level_enum_descriptors_MonsterPattern_2eproto, file_level_service_descriptors_MonsterPattern_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_MonsterPattern_2eproto_getter() {
  return &descriptor_table_MonsterPattern_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_MonsterPattern_2eproto(&descriptor_table_MonsterPattern_2eproto);
namespace monster {
namespace pattern {

// ===================================================================

class S_Rampage_BasicAttack::_Internal {
 public:
};

S_Rampage_BasicAttack::S_Rampage_BasicAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:monster.pattern.S_Rampage_BasicAttack)
}
S_Rampage_BasicAttack::S_Rampage_BasicAttack(const S_Rampage_BasicAttack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:monster.pattern.S_Rampage_BasicAttack)
}

void S_Rampage_BasicAttack::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_Rampage_BasicAttack::~S_Rampage_BasicAttack() {
  // @@protoc_insertion_point(destructor:monster.pattern.S_Rampage_BasicAttack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Rampage_BasicAttack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Rampage_BasicAttack::ArenaDtor(void* object) {
  S_Rampage_BasicAttack* _this = reinterpret_cast< S_Rampage_BasicAttack* >(object);
  (void)_this;
}
void S_Rampage_BasicAttack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Rampage_BasicAttack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Rampage_BasicAttack::Clear() {
// @@protoc_insertion_point(message_clear_start:monster.pattern.S_Rampage_BasicAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Rampage_BasicAttack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Rampage_BasicAttack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:monster.pattern.S_Rampage_BasicAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:monster.pattern.S_Rampage_BasicAttack)
  return target;
}

size_t S_Rampage_BasicAttack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:monster.pattern.S_Rampage_BasicAttack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Rampage_BasicAttack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:monster.pattern.S_Rampage_BasicAttack)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Rampage_BasicAttack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Rampage_BasicAttack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:monster.pattern.S_Rampage_BasicAttack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:monster.pattern.S_Rampage_BasicAttack)
    MergeFrom(*source);
  }
}

void S_Rampage_BasicAttack::MergeFrom(const S_Rampage_BasicAttack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:monster.pattern.S_Rampage_BasicAttack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void S_Rampage_BasicAttack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:monster.pattern.S_Rampage_BasicAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Rampage_BasicAttack::CopyFrom(const S_Rampage_BasicAttack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:monster.pattern.S_Rampage_BasicAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Rampage_BasicAttack::IsInitialized() const {
  return true;
}

void S_Rampage_BasicAttack::InternalSwap(S_Rampage_BasicAttack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Rampage_BasicAttack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MonsterPattern_2eproto_getter, &descriptor_table_MonsterPattern_2eproto_once,
      file_level_metadata_MonsterPattern_2eproto[0]);
}

// ===================================================================

class C_Rampage_BasicAttackHit::_Internal {
 public:
};

C_Rampage_BasicAttackHit::C_Rampage_BasicAttackHit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:monster.pattern.C_Rampage_BasicAttackHit)
}
C_Rampage_BasicAttackHit::C_Rampage_BasicAttackHit(const C_Rampage_BasicAttackHit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_id_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(target_id_));
  // @@protoc_insertion_point(copy_constructor:monster.pattern.C_Rampage_BasicAttackHit)
}

void C_Rampage_BasicAttackHit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_id_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(target_id_));
}

C_Rampage_BasicAttackHit::~C_Rampage_BasicAttackHit() {
  // @@protoc_insertion_point(destructor:monster.pattern.C_Rampage_BasicAttackHit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Rampage_BasicAttackHit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Rampage_BasicAttackHit::ArenaDtor(void* object) {
  C_Rampage_BasicAttackHit* _this = reinterpret_cast< C_Rampage_BasicAttackHit* >(object);
  (void)_this;
}
void C_Rampage_BasicAttackHit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Rampage_BasicAttackHit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Rampage_BasicAttackHit::Clear() {
// @@protoc_insertion_point(message_clear_start:monster.pattern.C_Rampage_BasicAttackHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_id_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(target_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Rampage_BasicAttackHit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Rampage_BasicAttackHit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:monster.pattern.C_Rampage_BasicAttackHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 target_id = 2;
  if (this->target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_target_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:monster.pattern.C_Rampage_BasicAttackHit)
  return target;
}

size_t C_Rampage_BasicAttackHit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:monster.pattern.C_Rampage_BasicAttackHit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  // uint64 target_id = 2;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_target_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Rampage_BasicAttackHit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:monster.pattern.C_Rampage_BasicAttackHit)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Rampage_BasicAttackHit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Rampage_BasicAttackHit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:monster.pattern.C_Rampage_BasicAttackHit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:monster.pattern.C_Rampage_BasicAttackHit)
    MergeFrom(*source);
  }
}

void C_Rampage_BasicAttackHit::MergeFrom(const C_Rampage_BasicAttackHit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:monster.pattern.C_Rampage_BasicAttackHit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (from.target_id() != 0) {
    _internal_set_target_id(from._internal_target_id());
  }
}

void C_Rampage_BasicAttackHit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:monster.pattern.C_Rampage_BasicAttackHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Rampage_BasicAttackHit::CopyFrom(const C_Rampage_BasicAttackHit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:monster.pattern.C_Rampage_BasicAttackHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Rampage_BasicAttackHit::IsInitialized() const {
  return true;
}

void C_Rampage_BasicAttackHit::InternalSwap(C_Rampage_BasicAttackHit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_Rampage_BasicAttackHit, target_id_)
      + sizeof(C_Rampage_BasicAttackHit::target_id_)
      - PROTOBUF_FIELD_OFFSET(C_Rampage_BasicAttackHit, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Rampage_BasicAttackHit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MonsterPattern_2eproto_getter, &descriptor_table_MonsterPattern_2eproto_once,
      file_level_metadata_MonsterPattern_2eproto[1]);
}

// ===================================================================

class S_Rampage_Roar::_Internal {
 public:
};

S_Rampage_Roar::S_Rampage_Roar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:monster.pattern.S_Rampage_Roar)
}
S_Rampage_Roar::S_Rampage_Roar(const S_Rampage_Roar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:monster.pattern.S_Rampage_Roar)
}

void S_Rampage_Roar::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_Rampage_Roar::~S_Rampage_Roar() {
  // @@protoc_insertion_point(destructor:monster.pattern.S_Rampage_Roar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Rampage_Roar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Rampage_Roar::ArenaDtor(void* object) {
  S_Rampage_Roar* _this = reinterpret_cast< S_Rampage_Roar* >(object);
  (void)_this;
}
void S_Rampage_Roar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Rampage_Roar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Rampage_Roar::Clear() {
// @@protoc_insertion_point(message_clear_start:monster.pattern.S_Rampage_Roar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Rampage_Roar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Rampage_Roar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:monster.pattern.S_Rampage_Roar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:monster.pattern.S_Rampage_Roar)
  return target;
}

size_t S_Rampage_Roar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:monster.pattern.S_Rampage_Roar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Rampage_Roar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:monster.pattern.S_Rampage_Roar)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Rampage_Roar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Rampage_Roar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:monster.pattern.S_Rampage_Roar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:monster.pattern.S_Rampage_Roar)
    MergeFrom(*source);
  }
}

void S_Rampage_Roar::MergeFrom(const S_Rampage_Roar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:monster.pattern.S_Rampage_Roar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void S_Rampage_Roar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:monster.pattern.S_Rampage_Roar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Rampage_Roar::CopyFrom(const S_Rampage_Roar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:monster.pattern.S_Rampage_Roar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Rampage_Roar::IsInitialized() const {
  return true;
}

void S_Rampage_Roar::InternalSwap(S_Rampage_Roar* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Rampage_Roar::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MonsterPattern_2eproto_getter, &descriptor_table_MonsterPattern_2eproto_once,
      file_level_metadata_MonsterPattern_2eproto[2]);
}

// ===================================================================

class S_Rampage_EarthQuake::_Internal {
 public:
};

S_Rampage_EarthQuake::S_Rampage_EarthQuake(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:monster.pattern.S_Rampage_EarthQuake)
}
S_Rampage_EarthQuake::S_Rampage_EarthQuake(const S_Rampage_EarthQuake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:monster.pattern.S_Rampage_EarthQuake)
}

void S_Rampage_EarthQuake::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_Rampage_EarthQuake::~S_Rampage_EarthQuake() {
  // @@protoc_insertion_point(destructor:monster.pattern.S_Rampage_EarthQuake)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Rampage_EarthQuake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Rampage_EarthQuake::ArenaDtor(void* object) {
  S_Rampage_EarthQuake* _this = reinterpret_cast< S_Rampage_EarthQuake* >(object);
  (void)_this;
}
void S_Rampage_EarthQuake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Rampage_EarthQuake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Rampage_EarthQuake::Clear() {
// @@protoc_insertion_point(message_clear_start:monster.pattern.S_Rampage_EarthQuake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Rampage_EarthQuake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Rampage_EarthQuake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:monster.pattern.S_Rampage_EarthQuake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:monster.pattern.S_Rampage_EarthQuake)
  return target;
}

size_t S_Rampage_EarthQuake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:monster.pattern.S_Rampage_EarthQuake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Rampage_EarthQuake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:monster.pattern.S_Rampage_EarthQuake)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Rampage_EarthQuake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Rampage_EarthQuake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:monster.pattern.S_Rampage_EarthQuake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:monster.pattern.S_Rampage_EarthQuake)
    MergeFrom(*source);
  }
}

void S_Rampage_EarthQuake::MergeFrom(const S_Rampage_EarthQuake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:monster.pattern.S_Rampage_EarthQuake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void S_Rampage_EarthQuake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:monster.pattern.S_Rampage_EarthQuake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Rampage_EarthQuake::CopyFrom(const S_Rampage_EarthQuake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:monster.pattern.S_Rampage_EarthQuake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Rampage_EarthQuake::IsInitialized() const {
  return true;
}

void S_Rampage_EarthQuake::InternalSwap(S_Rampage_EarthQuake* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Rampage_EarthQuake::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MonsterPattern_2eproto_getter, &descriptor_table_MonsterPattern_2eproto_once,
      file_level_metadata_MonsterPattern_2eproto[3]);
}

// ===================================================================

class S_TurnToTarget::_Internal {
 public:
};

S_TurnToTarget::S_TurnToTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:monster.pattern.S_TurnToTarget)
}
S_TurnToTarget::S_TurnToTarget(const S_TurnToTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:monster.pattern.S_TurnToTarget)
}

void S_TurnToTarget::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(roll_));
}

S_TurnToTarget::~S_TurnToTarget() {
  // @@protoc_insertion_point(destructor:monster.pattern.S_TurnToTarget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_TurnToTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_TurnToTarget::ArenaDtor(void* object) {
  S_TurnToTarget* _this = reinterpret_cast< S_TurnToTarget* >(object);
  (void)_this;
}
void S_TurnToTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_TurnToTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_TurnToTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:monster.pattern.S_TurnToTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(roll_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_TurnToTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float roll = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_TurnToTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:monster.pattern.S_TurnToTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float pitch = 2;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch(), target);
  }

  // float yaw = 3;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw(), target);
  }

  // float roll = 4;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:monster.pattern.S_TurnToTarget)
  return target;
}

size_t S_TurnToTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:monster.pattern.S_TurnToTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  // float pitch = 2;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw = 3;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 4;
  }

  // float roll = 4;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_TurnToTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:monster.pattern.S_TurnToTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const S_TurnToTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_TurnToTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:monster.pattern.S_TurnToTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:monster.pattern.S_TurnToTarget)
    MergeFrom(*source);
  }
}

void S_TurnToTarget::MergeFrom(const S_TurnToTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:monster.pattern.S_TurnToTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
  if (!(from.roll() <= 0 && from.roll() >= 0)) {
    _internal_set_roll(from._internal_roll());
  }
}

void S_TurnToTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:monster.pattern.S_TurnToTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_TurnToTarget::CopyFrom(const S_TurnToTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:monster.pattern.S_TurnToTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_TurnToTarget::IsInitialized() const {
  return true;
}

void S_TurnToTarget::InternalSwap(S_TurnToTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_TurnToTarget, roll_)
      + sizeof(S_TurnToTarget::roll_)
      - PROTOBUF_FIELD_OFFSET(S_TurnToTarget, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_TurnToTarget::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MonsterPattern_2eproto_getter, &descriptor_table_MonsterPattern_2eproto_once,
      file_level_metadata_MonsterPattern_2eproto[4]);
}

// ===================================================================

class S_Rampage_EnhanceAttack::_Internal {
 public:
};

S_Rampage_EnhanceAttack::S_Rampage_EnhanceAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:monster.pattern.S_Rampage_EnhanceAttack)
}
S_Rampage_EnhanceAttack::S_Rampage_EnhanceAttack(const S_Rampage_EnhanceAttack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:monster.pattern.S_Rampage_EnhanceAttack)
}

void S_Rampage_EnhanceAttack::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_Rampage_EnhanceAttack::~S_Rampage_EnhanceAttack() {
  // @@protoc_insertion_point(destructor:monster.pattern.S_Rampage_EnhanceAttack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Rampage_EnhanceAttack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Rampage_EnhanceAttack::ArenaDtor(void* object) {
  S_Rampage_EnhanceAttack* _this = reinterpret_cast< S_Rampage_EnhanceAttack* >(object);
  (void)_this;
}
void S_Rampage_EnhanceAttack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Rampage_EnhanceAttack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Rampage_EnhanceAttack::Clear() {
// @@protoc_insertion_point(message_clear_start:monster.pattern.S_Rampage_EnhanceAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Rampage_EnhanceAttack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Rampage_EnhanceAttack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:monster.pattern.S_Rampage_EnhanceAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:monster.pattern.S_Rampage_EnhanceAttack)
  return target;
}

size_t S_Rampage_EnhanceAttack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:monster.pattern.S_Rampage_EnhanceAttack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Rampage_EnhanceAttack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:monster.pattern.S_Rampage_EnhanceAttack)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Rampage_EnhanceAttack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Rampage_EnhanceAttack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:monster.pattern.S_Rampage_EnhanceAttack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:monster.pattern.S_Rampage_EnhanceAttack)
    MergeFrom(*source);
  }
}

void S_Rampage_EnhanceAttack::MergeFrom(const S_Rampage_EnhanceAttack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:monster.pattern.S_Rampage_EnhanceAttack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void S_Rampage_EnhanceAttack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:monster.pattern.S_Rampage_EnhanceAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Rampage_EnhanceAttack::CopyFrom(const S_Rampage_EnhanceAttack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:monster.pattern.S_Rampage_EnhanceAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Rampage_EnhanceAttack::IsInitialized() const {
  return true;
}

void S_Rampage_EnhanceAttack::InternalSwap(S_Rampage_EnhanceAttack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Rampage_EnhanceAttack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MonsterPattern_2eproto_getter, &descriptor_table_MonsterPattern_2eproto_once,
      file_level_metadata_MonsterPattern_2eproto[5]);
}

// ===================================================================

class S_Rampage_Throwaway::_Internal {
 public:
};

S_Rampage_Throwaway::S_Rampage_Throwaway(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:monster.pattern.S_Rampage_Throwaway)
}
S_Rampage_Throwaway::S_Rampage_Throwaway(const S_Rampage_Throwaway& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(target_z_));
  // @@protoc_insertion_point(copy_constructor:monster.pattern.S_Rampage_Throwaway)
}

void S_Rampage_Throwaway::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(target_z_));
}

S_Rampage_Throwaway::~S_Rampage_Throwaway() {
  // @@protoc_insertion_point(destructor:monster.pattern.S_Rampage_Throwaway)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Rampage_Throwaway::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Rampage_Throwaway::ArenaDtor(void* object) {
  S_Rampage_Throwaway* _this = reinterpret_cast< S_Rampage_Throwaway* >(object);
  (void)_this;
}
void S_Rampage_Throwaway::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Rampage_Throwaway::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Rampage_Throwaway::Clear() {
// @@protoc_insertion_point(message_clear_start:monster.pattern.S_Rampage_Throwaway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_z_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(target_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Rampage_Throwaway::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float target_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          target_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float target_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          target_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float target_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          target_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Rampage_Throwaway::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:monster.pattern.S_Rampage_Throwaway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float target_x = 2;
  if (!(this->target_x() <= 0 && this->target_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_target_x(), target);
  }

  // float target_y = 3;
  if (!(this->target_y() <= 0 && this->target_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_target_y(), target);
  }

  // float target_z = 4;
  if (!(this->target_z() <= 0 && this->target_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_target_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:monster.pattern.S_Rampage_Throwaway)
  return target;
}

size_t S_Rampage_Throwaway::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:monster.pattern.S_Rampage_Throwaway)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_object_id());
  }

  // float target_x = 2;
  if (!(this->target_x() <= 0 && this->target_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float target_y = 3;
  if (!(this->target_y() <= 0 && this->target_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float target_z = 4;
  if (!(this->target_z() <= 0 && this->target_z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Rampage_Throwaway::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:monster.pattern.S_Rampage_Throwaway)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Rampage_Throwaway* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Rampage_Throwaway>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:monster.pattern.S_Rampage_Throwaway)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:monster.pattern.S_Rampage_Throwaway)
    MergeFrom(*source);
  }
}

void S_Rampage_Throwaway::MergeFrom(const S_Rampage_Throwaway& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:monster.pattern.S_Rampage_Throwaway)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (!(from.target_x() <= 0 && from.target_x() >= 0)) {
    _internal_set_target_x(from._internal_target_x());
  }
  if (!(from.target_y() <= 0 && from.target_y() >= 0)) {
    _internal_set_target_y(from._internal_target_y());
  }
  if (!(from.target_z() <= 0 && from.target_z() >= 0)) {
    _internal_set_target_z(from._internal_target_z());
  }
}

void S_Rampage_Throwaway::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:monster.pattern.S_Rampage_Throwaway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Rampage_Throwaway::CopyFrom(const S_Rampage_Throwaway& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:monster.pattern.S_Rampage_Throwaway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Rampage_Throwaway::IsInitialized() const {
  return true;
}

void S_Rampage_Throwaway::InternalSwap(S_Rampage_Throwaway* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Rampage_Throwaway, target_z_)
      + sizeof(S_Rampage_Throwaway::target_z_)
      - PROTOBUF_FIELD_OFFSET(S_Rampage_Throwaway, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Rampage_Throwaway::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MonsterPattern_2eproto_getter, &descriptor_table_MonsterPattern_2eproto_once,
      file_level_metadata_MonsterPattern_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pattern
}  // namespace monster
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::monster::pattern::S_Rampage_BasicAttack* Arena::CreateMaybeMessage< ::monster::pattern::S_Rampage_BasicAttack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::monster::pattern::S_Rampage_BasicAttack >(arena);
}
template<> PROTOBUF_NOINLINE ::monster::pattern::C_Rampage_BasicAttackHit* Arena::CreateMaybeMessage< ::monster::pattern::C_Rampage_BasicAttackHit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::monster::pattern::C_Rampage_BasicAttackHit >(arena);
}
template<> PROTOBUF_NOINLINE ::monster::pattern::S_Rampage_Roar* Arena::CreateMaybeMessage< ::monster::pattern::S_Rampage_Roar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::monster::pattern::S_Rampage_Roar >(arena);
}
template<> PROTOBUF_NOINLINE ::monster::pattern::S_Rampage_EarthQuake* Arena::CreateMaybeMessage< ::monster::pattern::S_Rampage_EarthQuake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::monster::pattern::S_Rampage_EarthQuake >(arena);
}
template<> PROTOBUF_NOINLINE ::monster::pattern::S_TurnToTarget* Arena::CreateMaybeMessage< ::monster::pattern::S_TurnToTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::monster::pattern::S_TurnToTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::monster::pattern::S_Rampage_EnhanceAttack* Arena::CreateMaybeMessage< ::monster::pattern::S_Rampage_EnhanceAttack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::monster::pattern::S_Rampage_EnhanceAttack >(arena);
}
template<> PROTOBUF_NOINLINE ::monster::pattern::S_Rampage_Throwaway* Arena::CreateMaybeMessage< ::monster::pattern::S_Rampage_Throwaway >(Arena* arena) {
  return Arena::CreateMessageInternal< ::monster::pattern::S_Rampage_Throwaway >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
