// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Auction.proto

#include "Auction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace auction {
constexpr AuctionItemInfo::AuctionItemInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auction_pk_(uint64_t{0u})
  , price_(uint64_t{0u})
  , quantity_(uint64_t{0u})
  , item_table_(0)
{}
struct AuctionItemInfoDefaultTypeInternal {
  constexpr AuctionItemInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuctionItemInfoDefaultTypeInternal() {}
  union {
    AuctionItemInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuctionItemInfoDefaultTypeInternal _AuctionItemInfo_default_instance_;
constexpr C_PutItem::C_PutItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct C_PutItemDefaultTypeInternal {
  constexpr C_PutItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_PutItemDefaultTypeInternal() {}
  union {
    C_PutItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_PutItemDefaultTypeInternal _C_PutItem_default_instance_;
constexpr S_PutItem::S_PutItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct S_PutItemDefaultTypeInternal {
  constexpr S_PutItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_PutItemDefaultTypeInternal() {}
  union {
    S_PutItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_PutItemDefaultTypeInternal _S_PutItem_default_instance_;
constexpr C_GetOffItem::C_GetOffItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct C_GetOffItemDefaultTypeInternal {
  constexpr C_GetOffItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_GetOffItemDefaultTypeInternal() {}
  union {
    C_GetOffItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_GetOffItemDefaultTypeInternal _C_GetOffItem_default_instance_;
constexpr S_GetOffItem::S_GetOffItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct S_GetOffItemDefaultTypeInternal {
  constexpr S_GetOffItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_GetOffItemDefaultTypeInternal() {}
  union {
    S_GetOffItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_GetOffItemDefaultTypeInternal _S_GetOffItem_default_instance_;
constexpr C_SearchItem::C_SearchItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , page_(0u){}
struct C_SearchItemDefaultTypeInternal {
  constexpr C_SearchItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_SearchItemDefaultTypeInternal() {}
  union {
    C_SearchItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_SearchItemDefaultTypeInternal _C_SearchItem_default_instance_;
constexpr S_SearchItem::S_SearchItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_list_()
  , page_(0u){}
struct S_SearchItemDefaultTypeInternal {
  constexpr S_SearchItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_SearchItemDefaultTypeInternal() {}
  union {
    S_SearchItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_SearchItemDefaultTypeInternal _S_SearchItem_default_instance_;
constexpr C_PurchaseItem::C_PurchaseItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_pk_(uint64_t{0u})
  , auction_pk_(uint64_t{0u})
  , quantity_(uint64_t{0u}){}
struct C_PurchaseItemDefaultTypeInternal {
  constexpr C_PurchaseItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_PurchaseItemDefaultTypeInternal() {}
  union {
    C_PurchaseItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_PurchaseItemDefaultTypeInternal _C_PurchaseItem_default_instance_;
constexpr S_PurchaseItem::S_PurchaseItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_success_(false)
  , item_table_(0)

  , price_(0)
  , quantity_(0){}
struct S_PurchaseItemDefaultTypeInternal {
  constexpr S_PurchaseItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_PurchaseItemDefaultTypeInternal() {}
  union {
    S_PurchaseItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_PurchaseItemDefaultTypeInternal _S_PurchaseItem_default_instance_;
}  // namespace auction
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Auction_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Auction_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Auction_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Auction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auction::AuctionItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::auction::AuctionItemInfo, auction_pk_),
  PROTOBUF_FIELD_OFFSET(::auction::AuctionItemInfo, item_table_),
  PROTOBUF_FIELD_OFFSET(::auction::AuctionItemInfo, price_),
  PROTOBUF_FIELD_OFFSET(::auction::AuctionItemInfo, quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auction::C_PutItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auction::S_PutItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auction::C_GetOffItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auction::S_GetOffItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auction::C_SearchItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::auction::C_SearchItem, item_name_),
  PROTOBUF_FIELD_OFFSET(::auction::C_SearchItem, page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auction::S_SearchItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::auction::S_SearchItem, item_list_),
  PROTOBUF_FIELD_OFFSET(::auction::S_SearchItem, page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auction::C_PurchaseItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::auction::C_PurchaseItem, user_pk_),
  PROTOBUF_FIELD_OFFSET(::auction::C_PurchaseItem, auction_pk_),
  PROTOBUF_FIELD_OFFSET(::auction::C_PurchaseItem, quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::auction::S_PurchaseItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::auction::S_PurchaseItem, is_success_),
  PROTOBUF_FIELD_OFFSET(::auction::S_PurchaseItem, item_table_),
  PROTOBUF_FIELD_OFFSET(::auction::S_PurchaseItem, price_),
  PROTOBUF_FIELD_OFFSET(::auction::S_PurchaseItem, quantity_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::auction::AuctionItemInfo)},
  { 9, -1, sizeof(::auction::C_PutItem)},
  { 14, -1, sizeof(::auction::S_PutItem)},
  { 19, -1, sizeof(::auction::C_GetOffItem)},
  { 24, -1, sizeof(::auction::S_GetOffItem)},
  { 29, -1, sizeof(::auction::C_SearchItem)},
  { 36, -1, sizeof(::auction::S_SearchItem)},
  { 43, -1, sizeof(::auction::C_PurchaseItem)},
  { 51, -1, sizeof(::auction::S_PurchaseItem)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::auction::_AuctionItemInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::auction::_C_PutItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::auction::_S_PutItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::auction::_C_GetOffItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::auction::_S_GetOffItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::auction::_C_SearchItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::auction::_S_SearchItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::auction::_C_PurchaseItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::auction::_S_PurchaseItem_default_instance_),
};

const char descriptor_table_protodef_Auction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rAuction.proto\022\007auction\032\nEnum.proto\"n\n\017"
  "AuctionItemInfo\022\022\n\nauction_pk\030\001 \001(\004\022&\n\ni"
  "tem_table\030\002 \001(\0162\022.message.ItemTable\022\r\n\005p"
  "rice\030\003 \001(\004\022\020\n\010quantity\030\004 \001(\004\"\013\n\tC_PutIte"
  "m\"\013\n\tS_PutItem\"\016\n\014C_GetOffItem\"\016\n\014S_GetO"
  "ffItem\"/\n\014C_SearchItem\022\021\n\titem_name\030\001 \001("
  "\t\022\014\n\004page\030\002 \001(\r\"I\n\014S_SearchItem\022+\n\titem_"
  "list\030\001 \003(\0132\030.auction.AuctionItemInfo\022\014\n\004"
  "page\030\002 \001(\r\"G\n\016C_PurchaseItem\022\017\n\007user_pk\030"
  "\001 \001(\004\022\022\n\nauction_pk\030\002 \001(\004\022\020\n\010quantity\030\003 "
  "\001(\004\"m\n\016S_PurchaseItem\022\022\n\nis_success\030\001 \001("
  "\010\022&\n\nitem_table\030\002 \001(\0162\022.message.ItemTabl"
  "e\022\r\n\005price\030\003 \001(\001\022\020\n\010quantity\030\004 \001(\001b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Auction_2eproto_deps[1] = {
  &::descriptor_table_Enum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Auction_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Auction_2eproto = {
  false, false, 522, descriptor_table_protodef_Auction_2eproto, "Auction.proto", 
  &descriptor_table_Auction_2eproto_once, descriptor_table_Auction_2eproto_deps, 1, 9,
  schemas, file_default_instances, TableStruct_Auction_2eproto::offsets,
  file_level_metadata_Auction_2eproto, file_level_enum_descriptors_Auction_2eproto, file_level_service_descriptors_Auction_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Auction_2eproto_getter() {
  return &descriptor_table_Auction_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Auction_2eproto(&descriptor_table_Auction_2eproto);
namespace auction {

// ===================================================================

class AuctionItemInfo::_Internal {
 public:
};

AuctionItemInfo::AuctionItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:auction.AuctionItemInfo)
}
AuctionItemInfo::AuctionItemInfo(const AuctionItemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&auction_pk_, &from.auction_pk_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_table_) -
    reinterpret_cast<char*>(&auction_pk_)) + sizeof(item_table_));
  // @@protoc_insertion_point(copy_constructor:auction.AuctionItemInfo)
}

void AuctionItemInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&auction_pk_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_table_) -
    reinterpret_cast<char*>(&auction_pk_)) + sizeof(item_table_));
}

AuctionItemInfo::~AuctionItemInfo() {
  // @@protoc_insertion_point(destructor:auction.AuctionItemInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuctionItemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AuctionItemInfo::ArenaDtor(void* object) {
  AuctionItemInfo* _this = reinterpret_cast< AuctionItemInfo* >(object);
  (void)_this;
}
void AuctionItemInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuctionItemInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuctionItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:auction.AuctionItemInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&auction_pk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_table_) -
      reinterpret_cast<char*>(&auction_pk_)) + sizeof(item_table_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuctionItemInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 auction_pk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          auction_pk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.ItemTable item_table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_item_table(static_cast<::message::ItemTable>(val));
        } else goto handle_unusual;
        continue;
      // uint64 price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 quantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuctionItemInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:auction.AuctionItemInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 auction_pk = 1;
  if (this->auction_pk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_auction_pk(), target);
  }

  // .message.ItemTable item_table = 2;
  if (this->item_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_item_table(), target);
  }

  // uint64 price = 3;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_price(), target);
  }

  // uint64 quantity = 4;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auction.AuctionItemInfo)
  return target;
}

size_t AuctionItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auction.AuctionItemInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 auction_pk = 1;
  if (this->auction_pk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_auction_pk());
  }

  // uint64 price = 3;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // uint64 quantity = 4;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quantity());
  }

  // .message.ItemTable item_table = 2;
  if (this->item_table() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_item_table());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuctionItemInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auction.AuctionItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AuctionItemInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuctionItemInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auction.AuctionItemInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auction.AuctionItemInfo)
    MergeFrom(*source);
  }
}

void AuctionItemInfo::MergeFrom(const AuctionItemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auction.AuctionItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auction_pk() != 0) {
    _internal_set_auction_pk(from._internal_auction_pk());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from.item_table() != 0) {
    _internal_set_item_table(from._internal_item_table());
  }
}

void AuctionItemInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auction.AuctionItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionItemInfo::CopyFrom(const AuctionItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auction.AuctionItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionItemInfo::IsInitialized() const {
  return true;
}

void AuctionItemInfo::InternalSwap(AuctionItemInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuctionItemInfo, item_table_)
      + sizeof(AuctionItemInfo::item_table_)
      - PROTOBUF_FIELD_OFFSET(AuctionItemInfo, auction_pk_)>(
          reinterpret_cast<char*>(&auction_pk_),
          reinterpret_cast<char*>(&other->auction_pk_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuctionItemInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Auction_2eproto_getter, &descriptor_table_Auction_2eproto_once,
      file_level_metadata_Auction_2eproto[0]);
}

// ===================================================================

class C_PutItem::_Internal {
 public:
};

C_PutItem::C_PutItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:auction.C_PutItem)
}
C_PutItem::C_PutItem(const C_PutItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:auction.C_PutItem)
}

void C_PutItem::SharedCtor() {
}

C_PutItem::~C_PutItem() {
  // @@protoc_insertion_point(destructor:auction.C_PutItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_PutItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_PutItem::ArenaDtor(void* object) {
  C_PutItem* _this = reinterpret_cast< C_PutItem* >(object);
  (void)_this;
}
void C_PutItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_PutItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_PutItem::Clear() {
// @@protoc_insertion_point(message_clear_start:auction.C_PutItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PutItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_PutItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:auction.C_PutItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auction.C_PutItem)
  return target;
}

size_t C_PutItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auction.C_PutItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_PutItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auction.C_PutItem)
  GOOGLE_DCHECK_NE(&from, this);
  const C_PutItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_PutItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auction.C_PutItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auction.C_PutItem)
    MergeFrom(*source);
  }
}

void C_PutItem::MergeFrom(const C_PutItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auction.C_PutItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void C_PutItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auction.C_PutItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_PutItem::CopyFrom(const C_PutItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auction.C_PutItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PutItem::IsInitialized() const {
  return true;
}

void C_PutItem::InternalSwap(C_PutItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PutItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Auction_2eproto_getter, &descriptor_table_Auction_2eproto_once,
      file_level_metadata_Auction_2eproto[1]);
}

// ===================================================================

class S_PutItem::_Internal {
 public:
};

S_PutItem::S_PutItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:auction.S_PutItem)
}
S_PutItem::S_PutItem(const S_PutItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:auction.S_PutItem)
}

void S_PutItem::SharedCtor() {
}

S_PutItem::~S_PutItem() {
  // @@protoc_insertion_point(destructor:auction.S_PutItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_PutItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_PutItem::ArenaDtor(void* object) {
  S_PutItem* _this = reinterpret_cast< S_PutItem* >(object);
  (void)_this;
}
void S_PutItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_PutItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_PutItem::Clear() {
// @@protoc_insertion_point(message_clear_start:auction.S_PutItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PutItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_PutItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:auction.S_PutItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auction.S_PutItem)
  return target;
}

size_t S_PutItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auction.S_PutItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_PutItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auction.S_PutItem)
  GOOGLE_DCHECK_NE(&from, this);
  const S_PutItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_PutItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auction.S_PutItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auction.S_PutItem)
    MergeFrom(*source);
  }
}

void S_PutItem::MergeFrom(const S_PutItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auction.S_PutItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void S_PutItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auction.S_PutItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_PutItem::CopyFrom(const S_PutItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auction.S_PutItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PutItem::IsInitialized() const {
  return true;
}

void S_PutItem::InternalSwap(S_PutItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PutItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Auction_2eproto_getter, &descriptor_table_Auction_2eproto_once,
      file_level_metadata_Auction_2eproto[2]);
}

// ===================================================================

class C_GetOffItem::_Internal {
 public:
};

C_GetOffItem::C_GetOffItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:auction.C_GetOffItem)
}
C_GetOffItem::C_GetOffItem(const C_GetOffItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:auction.C_GetOffItem)
}

void C_GetOffItem::SharedCtor() {
}

C_GetOffItem::~C_GetOffItem() {
  // @@protoc_insertion_point(destructor:auction.C_GetOffItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_GetOffItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_GetOffItem::ArenaDtor(void* object) {
  C_GetOffItem* _this = reinterpret_cast< C_GetOffItem* >(object);
  (void)_this;
}
void C_GetOffItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_GetOffItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_GetOffItem::Clear() {
// @@protoc_insertion_point(message_clear_start:auction.C_GetOffItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_GetOffItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_GetOffItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:auction.C_GetOffItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auction.C_GetOffItem)
  return target;
}

size_t C_GetOffItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auction.C_GetOffItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_GetOffItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auction.C_GetOffItem)
  GOOGLE_DCHECK_NE(&from, this);
  const C_GetOffItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_GetOffItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auction.C_GetOffItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auction.C_GetOffItem)
    MergeFrom(*source);
  }
}

void C_GetOffItem::MergeFrom(const C_GetOffItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auction.C_GetOffItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void C_GetOffItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auction.C_GetOffItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_GetOffItem::CopyFrom(const C_GetOffItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auction.C_GetOffItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_GetOffItem::IsInitialized() const {
  return true;
}

void C_GetOffItem::InternalSwap(C_GetOffItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_GetOffItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Auction_2eproto_getter, &descriptor_table_Auction_2eproto_once,
      file_level_metadata_Auction_2eproto[3]);
}

// ===================================================================

class S_GetOffItem::_Internal {
 public:
};

S_GetOffItem::S_GetOffItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:auction.S_GetOffItem)
}
S_GetOffItem::S_GetOffItem(const S_GetOffItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:auction.S_GetOffItem)
}

void S_GetOffItem::SharedCtor() {
}

S_GetOffItem::~S_GetOffItem() {
  // @@protoc_insertion_point(destructor:auction.S_GetOffItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_GetOffItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_GetOffItem::ArenaDtor(void* object) {
  S_GetOffItem* _this = reinterpret_cast< S_GetOffItem* >(object);
  (void)_this;
}
void S_GetOffItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_GetOffItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_GetOffItem::Clear() {
// @@protoc_insertion_point(message_clear_start:auction.S_GetOffItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_GetOffItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_GetOffItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:auction.S_GetOffItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auction.S_GetOffItem)
  return target;
}

size_t S_GetOffItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auction.S_GetOffItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_GetOffItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auction.S_GetOffItem)
  GOOGLE_DCHECK_NE(&from, this);
  const S_GetOffItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_GetOffItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auction.S_GetOffItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auction.S_GetOffItem)
    MergeFrom(*source);
  }
}

void S_GetOffItem::MergeFrom(const S_GetOffItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auction.S_GetOffItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void S_GetOffItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auction.S_GetOffItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_GetOffItem::CopyFrom(const S_GetOffItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auction.S_GetOffItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_GetOffItem::IsInitialized() const {
  return true;
}

void S_GetOffItem::InternalSwap(S_GetOffItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_GetOffItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Auction_2eproto_getter, &descriptor_table_Auction_2eproto_once,
      file_level_metadata_Auction_2eproto[4]);
}

// ===================================================================

class C_SearchItem::_Internal {
 public:
};

C_SearchItem::C_SearchItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:auction.C_SearchItem)
}
C_SearchItem::C_SearchItem(const C_SearchItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_item_name().empty()) {
    item_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_item_name(), 
      GetArenaForAllocation());
  }
  page_ = from.page_;
  // @@protoc_insertion_point(copy_constructor:auction.C_SearchItem)
}

void C_SearchItem::SharedCtor() {
item_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
page_ = 0u;
}

C_SearchItem::~C_SearchItem() {
  // @@protoc_insertion_point(destructor:auction.C_SearchItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_SearchItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  item_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C_SearchItem::ArenaDtor(void* object) {
  C_SearchItem* _this = reinterpret_cast< C_SearchItem* >(object);
  (void)_this;
}
void C_SearchItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_SearchItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_SearchItem::Clear() {
// @@protoc_insertion_point(message_clear_start:auction.C_SearchItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_name_.ClearToEmpty();
  page_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SearchItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string item_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_item_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "auction.C_SearchItem.item_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_SearchItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:auction.C_SearchItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string item_name = 1;
  if (!this->item_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item_name().data(), static_cast<int>(this->_internal_item_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "auction.C_SearchItem.item_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_item_name(), target);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auction.C_SearchItem)
  return target;
}

size_t C_SearchItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auction.C_SearchItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string item_name = 1;
  if (!this->item_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item_name());
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_SearchItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auction.C_SearchItem)
  GOOGLE_DCHECK_NE(&from, this);
  const C_SearchItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_SearchItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auction.C_SearchItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auction.C_SearchItem)
    MergeFrom(*source);
  }
}

void C_SearchItem::MergeFrom(const C_SearchItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auction.C_SearchItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.item_name().empty()) {
    _internal_set_item_name(from._internal_item_name());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
}

void C_SearchItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auction.C_SearchItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_SearchItem::CopyFrom(const C_SearchItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auction.C_SearchItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SearchItem::IsInitialized() const {
  return true;
}

void C_SearchItem::InternalSwap(C_SearchItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &item_name_, GetArenaForAllocation(),
      &other->item_name_, other->GetArenaForAllocation()
  );
  swap(page_, other->page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SearchItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Auction_2eproto_getter, &descriptor_table_Auction_2eproto_once,
      file_level_metadata_Auction_2eproto[5]);
}

// ===================================================================

class S_SearchItem::_Internal {
 public:
};

S_SearchItem::S_SearchItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:auction.S_SearchItem)
}
S_SearchItem::S_SearchItem(const S_SearchItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      item_list_(from.item_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_ = from.page_;
  // @@protoc_insertion_point(copy_constructor:auction.S_SearchItem)
}

void S_SearchItem::SharedCtor() {
page_ = 0u;
}

S_SearchItem::~S_SearchItem() {
  // @@protoc_insertion_point(destructor:auction.S_SearchItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_SearchItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_SearchItem::ArenaDtor(void* object) {
  S_SearchItem* _this = reinterpret_cast< S_SearchItem* >(object);
  (void)_this;
}
void S_SearchItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_SearchItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_SearchItem::Clear() {
// @@protoc_insertion_point(message_clear_start:auction.S_SearchItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_list_.Clear();
  page_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SearchItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .auction.AuctionItemInfo item_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_SearchItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:auction.S_SearchItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .auction.AuctionItemInfo item_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_item_list(i), target, stream);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auction.S_SearchItem)
  return target;
}

size_t S_SearchItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auction.S_SearchItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .auction.AuctionItemInfo item_list = 1;
  total_size += 1UL * this->_internal_item_list_size();
  for (const auto& msg : this->item_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_SearchItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auction.S_SearchItem)
  GOOGLE_DCHECK_NE(&from, this);
  const S_SearchItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_SearchItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auction.S_SearchItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auction.S_SearchItem)
    MergeFrom(*source);
  }
}

void S_SearchItem::MergeFrom(const S_SearchItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auction.S_SearchItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_list_.MergeFrom(from.item_list_);
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
}

void S_SearchItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auction.S_SearchItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_SearchItem::CopyFrom(const S_SearchItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auction.S_SearchItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SearchItem::IsInitialized() const {
  return true;
}

void S_SearchItem::InternalSwap(S_SearchItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  item_list_.InternalSwap(&other->item_list_);
  swap(page_, other->page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SearchItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Auction_2eproto_getter, &descriptor_table_Auction_2eproto_once,
      file_level_metadata_Auction_2eproto[6]);
}

// ===================================================================

class C_PurchaseItem::_Internal {
 public:
};

C_PurchaseItem::C_PurchaseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:auction.C_PurchaseItem)
}
C_PurchaseItem::C_PurchaseItem(const C_PurchaseItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_pk_, &from.user_pk_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&user_pk_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:auction.C_PurchaseItem)
}

void C_PurchaseItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_pk_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&user_pk_)) + sizeof(quantity_));
}

C_PurchaseItem::~C_PurchaseItem() {
  // @@protoc_insertion_point(destructor:auction.C_PurchaseItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_PurchaseItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_PurchaseItem::ArenaDtor(void* object) {
  C_PurchaseItem* _this = reinterpret_cast< C_PurchaseItem* >(object);
  (void)_this;
}
void C_PurchaseItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_PurchaseItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_PurchaseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:auction.C_PurchaseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_pk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&user_pk_)) + sizeof(quantity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PurchaseItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_pk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_pk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 auction_pk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          auction_pk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 quantity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_PurchaseItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:auction.C_PurchaseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_pk = 1;
  if (this->user_pk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_pk(), target);
  }

  // uint64 auction_pk = 2;
  if (this->auction_pk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_auction_pk(), target);
  }

  // uint64 quantity = 3;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auction.C_PurchaseItem)
  return target;
}

size_t C_PurchaseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auction.C_PurchaseItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_pk = 1;
  if (this->user_pk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_pk());
  }

  // uint64 auction_pk = 2;
  if (this->auction_pk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_auction_pk());
  }

  // uint64 quantity = 3;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quantity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_PurchaseItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auction.C_PurchaseItem)
  GOOGLE_DCHECK_NE(&from, this);
  const C_PurchaseItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_PurchaseItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auction.C_PurchaseItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auction.C_PurchaseItem)
    MergeFrom(*source);
  }
}

void C_PurchaseItem::MergeFrom(const C_PurchaseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auction.C_PurchaseItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_pk() != 0) {
    _internal_set_user_pk(from._internal_user_pk());
  }
  if (from.auction_pk() != 0) {
    _internal_set_auction_pk(from._internal_auction_pk());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
}

void C_PurchaseItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auction.C_PurchaseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_PurchaseItem::CopyFrom(const C_PurchaseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auction.C_PurchaseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PurchaseItem::IsInitialized() const {
  return true;
}

void C_PurchaseItem::InternalSwap(C_PurchaseItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_PurchaseItem, quantity_)
      + sizeof(C_PurchaseItem::quantity_)
      - PROTOBUF_FIELD_OFFSET(C_PurchaseItem, user_pk_)>(
          reinterpret_cast<char*>(&user_pk_),
          reinterpret_cast<char*>(&other->user_pk_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PurchaseItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Auction_2eproto_getter, &descriptor_table_Auction_2eproto_once,
      file_level_metadata_Auction_2eproto[7]);
}

// ===================================================================

class S_PurchaseItem::_Internal {
 public:
};

S_PurchaseItem::S_PurchaseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:auction.S_PurchaseItem)
}
S_PurchaseItem::S_PurchaseItem(const S_PurchaseItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_success_, &from.is_success_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&is_success_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:auction.S_PurchaseItem)
}

void S_PurchaseItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_success_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&is_success_)) + sizeof(quantity_));
}

S_PurchaseItem::~S_PurchaseItem() {
  // @@protoc_insertion_point(destructor:auction.S_PurchaseItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_PurchaseItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_PurchaseItem::ArenaDtor(void* object) {
  S_PurchaseItem* _this = reinterpret_cast< S_PurchaseItem* >(object);
  (void)_this;
}
void S_PurchaseItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_PurchaseItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_PurchaseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:auction.S_PurchaseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&is_success_)) + sizeof(quantity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PurchaseItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.ItemTable item_table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_item_table(static_cast<::message::ItemTable>(val));
        } else goto handle_unusual;
        continue;
      // double price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double quantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_PurchaseItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:auction.S_PurchaseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_success = 1;
  if (this->is_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_success(), target);
  }

  // .message.ItemTable item_table = 2;
  if (this->item_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_item_table(), target);
  }

  // double price = 3;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_price(), target);
  }

  // double quantity = 4;
  if (!(this->quantity() <= 0 && this->quantity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:auction.S_PurchaseItem)
  return target;
}

size_t S_PurchaseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:auction.S_PurchaseItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_success = 1;
  if (this->is_success() != 0) {
    total_size += 1 + 1;
  }

  // .message.ItemTable item_table = 2;
  if (this->item_table() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_item_table());
  }

  // double price = 3;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 8;
  }

  // double quantity = 4;
  if (!(this->quantity() <= 0 && this->quantity() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_PurchaseItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:auction.S_PurchaseItem)
  GOOGLE_DCHECK_NE(&from, this);
  const S_PurchaseItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_PurchaseItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:auction.S_PurchaseItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:auction.S_PurchaseItem)
    MergeFrom(*source);
  }
}

void S_PurchaseItem::MergeFrom(const S_PurchaseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:auction.S_PurchaseItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_success() != 0) {
    _internal_set_is_success(from._internal_is_success());
  }
  if (from.item_table() != 0) {
    _internal_set_item_table(from._internal_item_table());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (!(from.quantity() <= 0 && from.quantity() >= 0)) {
    _internal_set_quantity(from._internal_quantity());
  }
}

void S_PurchaseItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:auction.S_PurchaseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_PurchaseItem::CopyFrom(const S_PurchaseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:auction.S_PurchaseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PurchaseItem::IsInitialized() const {
  return true;
}

void S_PurchaseItem::InternalSwap(S_PurchaseItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PurchaseItem, quantity_)
      + sizeof(S_PurchaseItem::quantity_)
      - PROTOBUF_FIELD_OFFSET(S_PurchaseItem, is_success_)>(
          reinterpret_cast<char*>(&is_success_),
          reinterpret_cast<char*>(&other->is_success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PurchaseItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Auction_2eproto_getter, &descriptor_table_Auction_2eproto_once,
      file_level_metadata_Auction_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace auction
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::auction::AuctionItemInfo* Arena::CreateMaybeMessage< ::auction::AuctionItemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::auction::AuctionItemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::auction::C_PutItem* Arena::CreateMaybeMessage< ::auction::C_PutItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::auction::C_PutItem >(arena);
}
template<> PROTOBUF_NOINLINE ::auction::S_PutItem* Arena::CreateMaybeMessage< ::auction::S_PutItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::auction::S_PutItem >(arena);
}
template<> PROTOBUF_NOINLINE ::auction::C_GetOffItem* Arena::CreateMaybeMessage< ::auction::C_GetOffItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::auction::C_GetOffItem >(arena);
}
template<> PROTOBUF_NOINLINE ::auction::S_GetOffItem* Arena::CreateMaybeMessage< ::auction::S_GetOffItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::auction::S_GetOffItem >(arena);
}
template<> PROTOBUF_NOINLINE ::auction::C_SearchItem* Arena::CreateMaybeMessage< ::auction::C_SearchItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::auction::C_SearchItem >(arena);
}
template<> PROTOBUF_NOINLINE ::auction::S_SearchItem* Arena::CreateMaybeMessage< ::auction::S_SearchItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::auction::S_SearchItem >(arena);
}
template<> PROTOBUF_NOINLINE ::auction::C_PurchaseItem* Arena::CreateMaybeMessage< ::auction::C_PurchaseItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::auction::C_PurchaseItem >(arena);
}
template<> PROTOBUF_NOINLINE ::auction::S_PurchaseItem* Arena::CreateMaybeMessage< ::auction::S_PurchaseItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::auction::S_PurchaseItem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
