// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Auction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Auction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Auction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Auction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Auction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Auction_2eproto;
namespace auction {
class AuctionItemInfo;
struct AuctionItemInfoDefaultTypeInternal;
extern AuctionItemInfoDefaultTypeInternal _AuctionItemInfo_default_instance_;
class C_GetOffItem;
struct C_GetOffItemDefaultTypeInternal;
extern C_GetOffItemDefaultTypeInternal _C_GetOffItem_default_instance_;
class C_PurchaseItem;
struct C_PurchaseItemDefaultTypeInternal;
extern C_PurchaseItemDefaultTypeInternal _C_PurchaseItem_default_instance_;
class C_PutItem;
struct C_PutItemDefaultTypeInternal;
extern C_PutItemDefaultTypeInternal _C_PutItem_default_instance_;
class C_SearchItem;
struct C_SearchItemDefaultTypeInternal;
extern C_SearchItemDefaultTypeInternal _C_SearchItem_default_instance_;
class S_GetOffItem;
struct S_GetOffItemDefaultTypeInternal;
extern S_GetOffItemDefaultTypeInternal _S_GetOffItem_default_instance_;
class S_PurchaseItem;
struct S_PurchaseItemDefaultTypeInternal;
extern S_PurchaseItemDefaultTypeInternal _S_PurchaseItem_default_instance_;
class S_PutItem;
struct S_PutItemDefaultTypeInternal;
extern S_PutItemDefaultTypeInternal _S_PutItem_default_instance_;
class S_SearchItem;
struct S_SearchItemDefaultTypeInternal;
extern S_SearchItemDefaultTypeInternal _S_SearchItem_default_instance_;
}  // namespace auction
PROTOBUF_NAMESPACE_OPEN
template<> ::auction::AuctionItemInfo* Arena::CreateMaybeMessage<::auction::AuctionItemInfo>(Arena*);
template<> ::auction::C_GetOffItem* Arena::CreateMaybeMessage<::auction::C_GetOffItem>(Arena*);
template<> ::auction::C_PurchaseItem* Arena::CreateMaybeMessage<::auction::C_PurchaseItem>(Arena*);
template<> ::auction::C_PutItem* Arena::CreateMaybeMessage<::auction::C_PutItem>(Arena*);
template<> ::auction::C_SearchItem* Arena::CreateMaybeMessage<::auction::C_SearchItem>(Arena*);
template<> ::auction::S_GetOffItem* Arena::CreateMaybeMessage<::auction::S_GetOffItem>(Arena*);
template<> ::auction::S_PurchaseItem* Arena::CreateMaybeMessage<::auction::S_PurchaseItem>(Arena*);
template<> ::auction::S_PutItem* Arena::CreateMaybeMessage<::auction::S_PutItem>(Arena*);
template<> ::auction::S_SearchItem* Arena::CreateMaybeMessage<::auction::S_SearchItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace auction {

// ===================================================================

class AuctionItemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auction.AuctionItemInfo) */ {
 public:
  inline AuctionItemInfo() : AuctionItemInfo(nullptr) {}
  ~AuctionItemInfo() override;
  explicit constexpr AuctionItemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuctionItemInfo(const AuctionItemInfo& from);
  AuctionItemInfo(AuctionItemInfo&& from) noexcept
    : AuctionItemInfo() {
    *this = ::std::move(from);
  }

  inline AuctionItemInfo& operator=(const AuctionItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuctionItemInfo& operator=(AuctionItemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuctionItemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuctionItemInfo* internal_default_instance() {
    return reinterpret_cast<const AuctionItemInfo*>(
               &_AuctionItemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuctionItemInfo& a, AuctionItemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AuctionItemInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuctionItemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuctionItemInfo* New() const final {
    return new AuctionItemInfo();
  }

  AuctionItemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuctionItemInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuctionItemInfo& from);
  void MergeFrom(const AuctionItemInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuctionItemInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auction.AuctionItemInfo";
  }
  protected:
  explicit AuctionItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuctionPkFieldNumber = 1,
    kPriceFieldNumber = 3,
    kQuantityFieldNumber = 4,
    kItemTableFieldNumber = 2,
  };
  // uint64 auction_pk = 1;
  void clear_auction_pk();
  ::PROTOBUF_NAMESPACE_ID::uint64 auction_pk() const;
  void set_auction_pk(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_auction_pk() const;
  void _internal_set_auction_pk(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 price = 3;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 quantity = 4;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .message.ItemTable item_table = 2;
  void clear_item_table();
  ::message::ItemTable item_table() const;
  void set_item_table(::message::ItemTable value);
  private:
  ::message::ItemTable _internal_item_table() const;
  void _internal_set_item_table(::message::ItemTable value);
  public:

  // @@protoc_insertion_point(class_scope:auction.AuctionItemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 auction_pk_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  int item_table_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Auction_2eproto;
};
// -------------------------------------------------------------------

class C_PutItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auction.C_PutItem) */ {
 public:
  inline C_PutItem() : C_PutItem(nullptr) {}
  ~C_PutItem() override;
  explicit constexpr C_PutItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PutItem(const C_PutItem& from);
  C_PutItem(C_PutItem&& from) noexcept
    : C_PutItem() {
    *this = ::std::move(from);
  }

  inline C_PutItem& operator=(const C_PutItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PutItem& operator=(C_PutItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PutItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PutItem* internal_default_instance() {
    return reinterpret_cast<const C_PutItem*>(
               &_C_PutItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C_PutItem& a, C_PutItem& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PutItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PutItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_PutItem* New() const final {
    return new C_PutItem();
  }

  C_PutItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_PutItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_PutItem& from);
  void MergeFrom(const C_PutItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PutItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auction.C_PutItem";
  }
  protected:
  explicit C_PutItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:auction.C_PutItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Auction_2eproto;
};
// -------------------------------------------------------------------

class S_PutItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auction.S_PutItem) */ {
 public:
  inline S_PutItem() : S_PutItem(nullptr) {}
  ~S_PutItem() override;
  explicit constexpr S_PutItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PutItem(const S_PutItem& from);
  S_PutItem(S_PutItem&& from) noexcept
    : S_PutItem() {
    *this = ::std::move(from);
  }

  inline S_PutItem& operator=(const S_PutItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PutItem& operator=(S_PutItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PutItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PutItem* internal_default_instance() {
    return reinterpret_cast<const S_PutItem*>(
               &_S_PutItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_PutItem& a, S_PutItem& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PutItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PutItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_PutItem* New() const final {
    return new S_PutItem();
  }

  S_PutItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_PutItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_PutItem& from);
  void MergeFrom(const S_PutItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PutItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auction.S_PutItem";
  }
  protected:
  explicit S_PutItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:auction.S_PutItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Auction_2eproto;
};
// -------------------------------------------------------------------

class C_GetOffItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auction.C_GetOffItem) */ {
 public:
  inline C_GetOffItem() : C_GetOffItem(nullptr) {}
  ~C_GetOffItem() override;
  explicit constexpr C_GetOffItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_GetOffItem(const C_GetOffItem& from);
  C_GetOffItem(C_GetOffItem&& from) noexcept
    : C_GetOffItem() {
    *this = ::std::move(from);
  }

  inline C_GetOffItem& operator=(const C_GetOffItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_GetOffItem& operator=(C_GetOffItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_GetOffItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_GetOffItem* internal_default_instance() {
    return reinterpret_cast<const C_GetOffItem*>(
               &_C_GetOffItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C_GetOffItem& a, C_GetOffItem& b) {
    a.Swap(&b);
  }
  inline void Swap(C_GetOffItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_GetOffItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_GetOffItem* New() const final {
    return new C_GetOffItem();
  }

  C_GetOffItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_GetOffItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_GetOffItem& from);
  void MergeFrom(const C_GetOffItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_GetOffItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auction.C_GetOffItem";
  }
  protected:
  explicit C_GetOffItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:auction.C_GetOffItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Auction_2eproto;
};
// -------------------------------------------------------------------

class S_GetOffItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auction.S_GetOffItem) */ {
 public:
  inline S_GetOffItem() : S_GetOffItem(nullptr) {}
  ~S_GetOffItem() override;
  explicit constexpr S_GetOffItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_GetOffItem(const S_GetOffItem& from);
  S_GetOffItem(S_GetOffItem&& from) noexcept
    : S_GetOffItem() {
    *this = ::std::move(from);
  }

  inline S_GetOffItem& operator=(const S_GetOffItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_GetOffItem& operator=(S_GetOffItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_GetOffItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_GetOffItem* internal_default_instance() {
    return reinterpret_cast<const S_GetOffItem*>(
               &_S_GetOffItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_GetOffItem& a, S_GetOffItem& b) {
    a.Swap(&b);
  }
  inline void Swap(S_GetOffItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_GetOffItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_GetOffItem* New() const final {
    return new S_GetOffItem();
  }

  S_GetOffItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_GetOffItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_GetOffItem& from);
  void MergeFrom(const S_GetOffItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_GetOffItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auction.S_GetOffItem";
  }
  protected:
  explicit S_GetOffItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:auction.S_GetOffItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Auction_2eproto;
};
// -------------------------------------------------------------------

class C_SearchItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auction.C_SearchItem) */ {
 public:
  inline C_SearchItem() : C_SearchItem(nullptr) {}
  ~C_SearchItem() override;
  explicit constexpr C_SearchItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SearchItem(const C_SearchItem& from);
  C_SearchItem(C_SearchItem&& from) noexcept
    : C_SearchItem() {
    *this = ::std::move(from);
  }

  inline C_SearchItem& operator=(const C_SearchItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SearchItem& operator=(C_SearchItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SearchItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SearchItem* internal_default_instance() {
    return reinterpret_cast<const C_SearchItem*>(
               &_C_SearchItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C_SearchItem& a, C_SearchItem& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SearchItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SearchItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_SearchItem* New() const final {
    return new C_SearchItem();
  }

  C_SearchItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_SearchItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_SearchItem& from);
  void MergeFrom(const C_SearchItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SearchItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auction.C_SearchItem";
  }
  protected:
  explicit C_SearchItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemNameFieldNumber = 1,
    kPageFieldNumber = 2,
  };
  // string item_name = 1;
  void clear_item_name();
  const std::string& item_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_item_name();
  void set_allocated_item_name(std::string* item_name);
  private:
  const std::string& _internal_item_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_name(const std::string& value);
  std::string* _internal_mutable_item_name();
  public:

  // uint32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:auction.C_SearchItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Auction_2eproto;
};
// -------------------------------------------------------------------

class S_SearchItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auction.S_SearchItem) */ {
 public:
  inline S_SearchItem() : S_SearchItem(nullptr) {}
  ~S_SearchItem() override;
  explicit constexpr S_SearchItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SearchItem(const S_SearchItem& from);
  S_SearchItem(S_SearchItem&& from) noexcept
    : S_SearchItem() {
    *this = ::std::move(from);
  }

  inline S_SearchItem& operator=(const S_SearchItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SearchItem& operator=(S_SearchItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SearchItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SearchItem* internal_default_instance() {
    return reinterpret_cast<const S_SearchItem*>(
               &_S_SearchItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S_SearchItem& a, S_SearchItem& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SearchItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SearchItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_SearchItem* New() const final {
    return new S_SearchItem();
  }

  S_SearchItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_SearchItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_SearchItem& from);
  void MergeFrom(const S_SearchItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SearchItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auction.S_SearchItem";
  }
  protected:
  explicit S_SearchItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemListFieldNumber = 1,
    kPageFieldNumber = 2,
  };
  // repeated .auction.AuctionItemInfo item_list = 1;
  int item_list_size() const;
  private:
  int _internal_item_list_size() const;
  public:
  void clear_item_list();
  ::auction::AuctionItemInfo* mutable_item_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::auction::AuctionItemInfo >*
      mutable_item_list();
  private:
  const ::auction::AuctionItemInfo& _internal_item_list(int index) const;
  ::auction::AuctionItemInfo* _internal_add_item_list();
  public:
  const ::auction::AuctionItemInfo& item_list(int index) const;
  ::auction::AuctionItemInfo* add_item_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::auction::AuctionItemInfo >&
      item_list() const;

  // uint32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:auction.S_SearchItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::auction::AuctionItemInfo > item_list_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Auction_2eproto;
};
// -------------------------------------------------------------------

class C_PurchaseItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auction.C_PurchaseItem) */ {
 public:
  inline C_PurchaseItem() : C_PurchaseItem(nullptr) {}
  ~C_PurchaseItem() override;
  explicit constexpr C_PurchaseItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PurchaseItem(const C_PurchaseItem& from);
  C_PurchaseItem(C_PurchaseItem&& from) noexcept
    : C_PurchaseItem() {
    *this = ::std::move(from);
  }

  inline C_PurchaseItem& operator=(const C_PurchaseItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PurchaseItem& operator=(C_PurchaseItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PurchaseItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PurchaseItem* internal_default_instance() {
    return reinterpret_cast<const C_PurchaseItem*>(
               &_C_PurchaseItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(C_PurchaseItem& a, C_PurchaseItem& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PurchaseItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PurchaseItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_PurchaseItem* New() const final {
    return new C_PurchaseItem();
  }

  C_PurchaseItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_PurchaseItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_PurchaseItem& from);
  void MergeFrom(const C_PurchaseItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PurchaseItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auction.C_PurchaseItem";
  }
  protected:
  explicit C_PurchaseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserPkFieldNumber = 1,
    kAuctionPkFieldNumber = 2,
    kQuantityFieldNumber = 3,
  };
  // uint64 user_pk = 1;
  void clear_user_pk();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_pk() const;
  void set_user_pk(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_pk() const;
  void _internal_set_user_pk(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 auction_pk = 2;
  void clear_auction_pk();
  ::PROTOBUF_NAMESPACE_ID::uint64 auction_pk() const;
  void set_auction_pk(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_auction_pk() const;
  void _internal_set_auction_pk(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 quantity = 3;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:auction.C_PurchaseItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_pk_;
  ::PROTOBUF_NAMESPACE_ID::uint64 auction_pk_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Auction_2eproto;
};
// -------------------------------------------------------------------

class S_PurchaseItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auction.S_PurchaseItem) */ {
 public:
  inline S_PurchaseItem() : S_PurchaseItem(nullptr) {}
  ~S_PurchaseItem() override;
  explicit constexpr S_PurchaseItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PurchaseItem(const S_PurchaseItem& from);
  S_PurchaseItem(S_PurchaseItem&& from) noexcept
    : S_PurchaseItem() {
    *this = ::std::move(from);
  }

  inline S_PurchaseItem& operator=(const S_PurchaseItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PurchaseItem& operator=(S_PurchaseItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PurchaseItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PurchaseItem* internal_default_instance() {
    return reinterpret_cast<const S_PurchaseItem*>(
               &_S_PurchaseItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_PurchaseItem& a, S_PurchaseItem& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PurchaseItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PurchaseItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_PurchaseItem* New() const final {
    return new S_PurchaseItem();
  }

  S_PurchaseItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_PurchaseItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_PurchaseItem& from);
  void MergeFrom(const S_PurchaseItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PurchaseItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auction.S_PurchaseItem";
  }
  protected:
  explicit S_PurchaseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsSuccessFieldNumber = 1,
    kItemTableFieldNumber = 2,
    kPriceFieldNumber = 3,
    kQuantityFieldNumber = 4,
  };
  // bool is_success = 1;
  void clear_is_success();
  bool is_success() const;
  void set_is_success(bool value);
  private:
  bool _internal_is_success() const;
  void _internal_set_is_success(bool value);
  public:

  // .message.ItemTable item_table = 2;
  void clear_item_table();
  ::message::ItemTable item_table() const;
  void set_item_table(::message::ItemTable value);
  private:
  ::message::ItemTable _internal_item_table() const;
  void _internal_set_item_table(::message::ItemTable value);
  public:

  // double price = 3;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // double quantity = 4;
  void clear_quantity();
  double quantity() const;
  void set_quantity(double value);
  private:
  double _internal_quantity() const;
  void _internal_set_quantity(double value);
  public:

  // @@protoc_insertion_point(class_scope:auction.S_PurchaseItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_success_;
  int item_table_;
  double price_;
  double quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Auction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuctionItemInfo

// uint64 auction_pk = 1;
inline void AuctionItemInfo::clear_auction_pk() {
  auction_pk_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AuctionItemInfo::_internal_auction_pk() const {
  return auction_pk_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AuctionItemInfo::auction_pk() const {
  // @@protoc_insertion_point(field_get:auction.AuctionItemInfo.auction_pk)
  return _internal_auction_pk();
}
inline void AuctionItemInfo::_internal_set_auction_pk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  auction_pk_ = value;
}
inline void AuctionItemInfo::set_auction_pk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_auction_pk(value);
  // @@protoc_insertion_point(field_set:auction.AuctionItemInfo.auction_pk)
}

// .message.ItemTable item_table = 2;
inline void AuctionItemInfo::clear_item_table() {
  item_table_ = 0;
}
inline ::message::ItemTable AuctionItemInfo::_internal_item_table() const {
  return static_cast< ::message::ItemTable >(item_table_);
}
inline ::message::ItemTable AuctionItemInfo::item_table() const {
  // @@protoc_insertion_point(field_get:auction.AuctionItemInfo.item_table)
  return _internal_item_table();
}
inline void AuctionItemInfo::_internal_set_item_table(::message::ItemTable value) {
  
  item_table_ = value;
}
inline void AuctionItemInfo::set_item_table(::message::ItemTable value) {
  _internal_set_item_table(value);
  // @@protoc_insertion_point(field_set:auction.AuctionItemInfo.item_table)
}

// uint64 price = 3;
inline void AuctionItemInfo::clear_price() {
  price_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AuctionItemInfo::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AuctionItemInfo::price() const {
  // @@protoc_insertion_point(field_get:auction.AuctionItemInfo.price)
  return _internal_price();
}
inline void AuctionItemInfo::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  price_ = value;
}
inline void AuctionItemInfo::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:auction.AuctionItemInfo.price)
}

// uint64 quantity = 4;
inline void AuctionItemInfo::clear_quantity() {
  quantity_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AuctionItemInfo::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AuctionItemInfo::quantity() const {
  // @@protoc_insertion_point(field_get:auction.AuctionItemInfo.quantity)
  return _internal_quantity();
}
inline void AuctionItemInfo::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void AuctionItemInfo::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:auction.AuctionItemInfo.quantity)
}

// -------------------------------------------------------------------

// C_PutItem

// -------------------------------------------------------------------

// S_PutItem

// -------------------------------------------------------------------

// C_GetOffItem

// -------------------------------------------------------------------

// S_GetOffItem

// -------------------------------------------------------------------

// C_SearchItem

// string item_name = 1;
inline void C_SearchItem::clear_item_name() {
  item_name_.ClearToEmpty();
}
inline const std::string& C_SearchItem::item_name() const {
  // @@protoc_insertion_point(field_get:auction.C_SearchItem.item_name)
  return _internal_item_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_SearchItem::set_item_name(ArgT0&& arg0, ArgT... args) {
 
 item_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:auction.C_SearchItem.item_name)
}
inline std::string* C_SearchItem::mutable_item_name() {
  // @@protoc_insertion_point(field_mutable:auction.C_SearchItem.item_name)
  return _internal_mutable_item_name();
}
inline const std::string& C_SearchItem::_internal_item_name() const {
  return item_name_.Get();
}
inline void C_SearchItem::_internal_set_item_name(const std::string& value) {
  
  item_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_SearchItem::_internal_mutable_item_name() {
  
  return item_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_SearchItem::release_item_name() {
  // @@protoc_insertion_point(field_release:auction.C_SearchItem.item_name)
  return item_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_SearchItem::set_allocated_item_name(std::string* item_name) {
  if (item_name != nullptr) {
    
  } else {
    
  }
  item_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:auction.C_SearchItem.item_name)
}

// uint32 page = 2;
inline void C_SearchItem::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_SearchItem::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_SearchItem::page() const {
  // @@protoc_insertion_point(field_get:auction.C_SearchItem.page)
  return _internal_page();
}
inline void C_SearchItem::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void C_SearchItem::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:auction.C_SearchItem.page)
}

// -------------------------------------------------------------------

// S_SearchItem

// repeated .auction.AuctionItemInfo item_list = 1;
inline int S_SearchItem::_internal_item_list_size() const {
  return item_list_.size();
}
inline int S_SearchItem::item_list_size() const {
  return _internal_item_list_size();
}
inline void S_SearchItem::clear_item_list() {
  item_list_.Clear();
}
inline ::auction::AuctionItemInfo* S_SearchItem::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:auction.S_SearchItem.item_list)
  return item_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::auction::AuctionItemInfo >*
S_SearchItem::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:auction.S_SearchItem.item_list)
  return &item_list_;
}
inline const ::auction::AuctionItemInfo& S_SearchItem::_internal_item_list(int index) const {
  return item_list_.Get(index);
}
inline const ::auction::AuctionItemInfo& S_SearchItem::item_list(int index) const {
  // @@protoc_insertion_point(field_get:auction.S_SearchItem.item_list)
  return _internal_item_list(index);
}
inline ::auction::AuctionItemInfo* S_SearchItem::_internal_add_item_list() {
  return item_list_.Add();
}
inline ::auction::AuctionItemInfo* S_SearchItem::add_item_list() {
  // @@protoc_insertion_point(field_add:auction.S_SearchItem.item_list)
  return _internal_add_item_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::auction::AuctionItemInfo >&
S_SearchItem::item_list() const {
  // @@protoc_insertion_point(field_list:auction.S_SearchItem.item_list)
  return item_list_;
}

// uint32 page = 2;
inline void S_SearchItem::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_SearchItem::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_SearchItem::page() const {
  // @@protoc_insertion_point(field_get:auction.S_SearchItem.page)
  return _internal_page();
}
inline void S_SearchItem::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void S_SearchItem::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:auction.S_SearchItem.page)
}

// -------------------------------------------------------------------

// C_PurchaseItem

// uint64 user_pk = 1;
inline void C_PurchaseItem::clear_user_pk() {
  user_pk_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_PurchaseItem::_internal_user_pk() const {
  return user_pk_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_PurchaseItem::user_pk() const {
  // @@protoc_insertion_point(field_get:auction.C_PurchaseItem.user_pk)
  return _internal_user_pk();
}
inline void C_PurchaseItem::_internal_set_user_pk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_pk_ = value;
}
inline void C_PurchaseItem::set_user_pk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_pk(value);
  // @@protoc_insertion_point(field_set:auction.C_PurchaseItem.user_pk)
}

// uint64 auction_pk = 2;
inline void C_PurchaseItem::clear_auction_pk() {
  auction_pk_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_PurchaseItem::_internal_auction_pk() const {
  return auction_pk_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_PurchaseItem::auction_pk() const {
  // @@protoc_insertion_point(field_get:auction.C_PurchaseItem.auction_pk)
  return _internal_auction_pk();
}
inline void C_PurchaseItem::_internal_set_auction_pk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  auction_pk_ = value;
}
inline void C_PurchaseItem::set_auction_pk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_auction_pk(value);
  // @@protoc_insertion_point(field_set:auction.C_PurchaseItem.auction_pk)
}

// uint64 quantity = 3;
inline void C_PurchaseItem::clear_quantity() {
  quantity_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_PurchaseItem::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_PurchaseItem::quantity() const {
  // @@protoc_insertion_point(field_get:auction.C_PurchaseItem.quantity)
  return _internal_quantity();
}
inline void C_PurchaseItem::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void C_PurchaseItem::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:auction.C_PurchaseItem.quantity)
}

// -------------------------------------------------------------------

// S_PurchaseItem

// bool is_success = 1;
inline void S_PurchaseItem::clear_is_success() {
  is_success_ = false;
}
inline bool S_PurchaseItem::_internal_is_success() const {
  return is_success_;
}
inline bool S_PurchaseItem::is_success() const {
  // @@protoc_insertion_point(field_get:auction.S_PurchaseItem.is_success)
  return _internal_is_success();
}
inline void S_PurchaseItem::_internal_set_is_success(bool value) {
  
  is_success_ = value;
}
inline void S_PurchaseItem::set_is_success(bool value) {
  _internal_set_is_success(value);
  // @@protoc_insertion_point(field_set:auction.S_PurchaseItem.is_success)
}

// .message.ItemTable item_table = 2;
inline void S_PurchaseItem::clear_item_table() {
  item_table_ = 0;
}
inline ::message::ItemTable S_PurchaseItem::_internal_item_table() const {
  return static_cast< ::message::ItemTable >(item_table_);
}
inline ::message::ItemTable S_PurchaseItem::item_table() const {
  // @@protoc_insertion_point(field_get:auction.S_PurchaseItem.item_table)
  return _internal_item_table();
}
inline void S_PurchaseItem::_internal_set_item_table(::message::ItemTable value) {
  
  item_table_ = value;
}
inline void S_PurchaseItem::set_item_table(::message::ItemTable value) {
  _internal_set_item_table(value);
  // @@protoc_insertion_point(field_set:auction.S_PurchaseItem.item_table)
}

// double price = 3;
inline void S_PurchaseItem::clear_price() {
  price_ = 0;
}
inline double S_PurchaseItem::_internal_price() const {
  return price_;
}
inline double S_PurchaseItem::price() const {
  // @@protoc_insertion_point(field_get:auction.S_PurchaseItem.price)
  return _internal_price();
}
inline void S_PurchaseItem::_internal_set_price(double value) {
  
  price_ = value;
}
inline void S_PurchaseItem::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:auction.S_PurchaseItem.price)
}

// double quantity = 4;
inline void S_PurchaseItem::clear_quantity() {
  quantity_ = 0;
}
inline double S_PurchaseItem::_internal_quantity() const {
  return quantity_;
}
inline double S_PurchaseItem::quantity() const {
  // @@protoc_insertion_point(field_get:auction.S_PurchaseItem.quantity)
  return _internal_quantity();
}
inline void S_PurchaseItem::_internal_set_quantity(double value) {
  
  quantity_ = value;
}
inline void S_PurchaseItem::set_quantity(double value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:auction.S_PurchaseItem.quantity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace auction

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Auction_2eproto
