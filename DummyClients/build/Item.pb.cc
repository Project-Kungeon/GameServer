// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Item.proto

#include "Item.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace game {
namespace item {
constexpr C_Item_PickedUp::C_Item_PickedUp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(uint64_t{0u})
  , picked_object_id_(uint64_t{0u}){}
struct C_Item_PickedUpDefaultTypeInternal {
  constexpr C_Item_PickedUpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_Item_PickedUpDefaultTypeInternal() {}
  union {
    C_Item_PickedUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_Item_PickedUpDefaultTypeInternal _C_Item_PickedUp_default_instance_;
constexpr S_Item_PickedUp::S_Item_PickedUp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(uint64_t{0u})
  , picked_object_id_(uint64_t{0u}){}
struct S_Item_PickedUpDefaultTypeInternal {
  constexpr S_Item_PickedUpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Item_PickedUpDefaultTypeInternal() {}
  union {
    S_Item_PickedUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Item_PickedUpDefaultTypeInternal _S_Item_PickedUp_default_instance_;
constexpr S_Item_Acquisition::S_Item_Acquisition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_info_(nullptr)
  , player_id_(uint64_t{0u}){}
struct S_Item_AcquisitionDefaultTypeInternal {
  constexpr S_Item_AcquisitionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Item_AcquisitionDefaultTypeInternal() {}
  union {
    S_Item_Acquisition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Item_AcquisitionDefaultTypeInternal _S_Item_Acquisition_default_instance_;
constexpr C_Item_ConsumeableUsed::C_Item_ConsumeableUsed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(uint64_t{0u})
  , used_item_id_(uint64_t{0u})
  , item_table_(0)
{}
struct C_Item_ConsumeableUsedDefaultTypeInternal {
  constexpr C_Item_ConsumeableUsedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_Item_ConsumeableUsedDefaultTypeInternal() {}
  union {
    C_Item_ConsumeableUsed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_Item_ConsumeableUsedDefaultTypeInternal _C_Item_ConsumeableUsed_default_instance_;
constexpr S_Item_ConsumeableUsed::S_Item_ConsumeableUsed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(uint64_t{0u})
  , used_item_id_(uint64_t{0u}){}
struct S_Item_ConsumeableUsedDefaultTypeInternal {
  constexpr S_Item_ConsumeableUsedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Item_ConsumeableUsedDefaultTypeInternal() {}
  union {
    S_Item_ConsumeableUsed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Item_ConsumeableUsedDefaultTypeInternal _S_Item_ConsumeableUsed_default_instance_;
constexpr C_Item_OpenInventory::C_Item_OpenInventory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(uint64_t{0u}){}
struct C_Item_OpenInventoryDefaultTypeInternal {
  constexpr C_Item_OpenInventoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_Item_OpenInventoryDefaultTypeInternal() {}
  union {
    C_Item_OpenInventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_Item_OpenInventoryDefaultTypeInternal _C_Item_OpenInventory_default_instance_;
constexpr S_Item_OpenInventory::S_Item_OpenInventory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slots_()
  , player_id_(uint64_t{0u}){}
struct S_Item_OpenInventoryDefaultTypeInternal {
  constexpr S_Item_OpenInventoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Item_OpenInventoryDefaultTypeInternal() {}
  union {
    S_Item_OpenInventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Item_OpenInventoryDefaultTypeInternal _S_Item_OpenInventory_default_instance_;
}  // namespace item
}  // namespace game
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Item_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Item_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Item_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Item_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::item::C_Item_PickedUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::item::C_Item_PickedUp, player_id_),
  PROTOBUF_FIELD_OFFSET(::game::item::C_Item_PickedUp, picked_object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::item::S_Item_PickedUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::item::S_Item_PickedUp, player_id_),
  PROTOBUF_FIELD_OFFSET(::game::item::S_Item_PickedUp, picked_object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::item::S_Item_Acquisition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::item::S_Item_Acquisition, player_id_),
  PROTOBUF_FIELD_OFFSET(::game::item::S_Item_Acquisition, item_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::item::C_Item_ConsumeableUsed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::item::C_Item_ConsumeableUsed, player_id_),
  PROTOBUF_FIELD_OFFSET(::game::item::C_Item_ConsumeableUsed, used_item_id_),
  PROTOBUF_FIELD_OFFSET(::game::item::C_Item_ConsumeableUsed, item_table_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::item::S_Item_ConsumeableUsed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::item::S_Item_ConsumeableUsed, player_id_),
  PROTOBUF_FIELD_OFFSET(::game::item::S_Item_ConsumeableUsed, used_item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::item::C_Item_OpenInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::item::C_Item_OpenInventory, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::item::S_Item_OpenInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::item::S_Item_OpenInventory, player_id_),
  PROTOBUF_FIELD_OFFSET(::game::item::S_Item_OpenInventory, slots_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::game::item::C_Item_PickedUp)},
  { 7, -1, sizeof(::game::item::S_Item_PickedUp)},
  { 14, -1, sizeof(::game::item::S_Item_Acquisition)},
  { 21, -1, sizeof(::game::item::C_Item_ConsumeableUsed)},
  { 29, -1, sizeof(::game::item::S_Item_ConsumeableUsed)},
  { 36, -1, sizeof(::game::item::C_Item_OpenInventory)},
  { 42, -1, sizeof(::game::item::S_Item_OpenInventory)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::item::_C_Item_PickedUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::item::_S_Item_PickedUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::item::_S_Item_Acquisition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::item::_C_Item_ConsumeableUsed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::item::_S_Item_ConsumeableUsed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::item::_C_Item_OpenInventory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::item::_S_Item_OpenInventory_default_instance_),
};

const char descriptor_table_protodef_Item_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nItem.proto\022\tgame.item\032\nEnum.proto\032\014Str"
  "uct.proto\">\n\017C_Item_PickedUp\022\021\n\tplayer_i"
  "d\030\001 \001(\004\022\030\n\020picked_object_id\030\002 \001(\004\">\n\017S_I"
  "tem_PickedUp\022\021\n\tplayer_id\030\001 \001(\004\022\030\n\020picke"
  "d_object_id\030\002 \001(\004\"M\n\022S_Item_Acquisition\022"
  "\021\n\tplayer_id\030\001 \001(\004\022$\n\titem_info\030\002 \001(\0132\021."
  "message.ItemInfo\"i\n\026C_Item_ConsumeableUs"
  "ed\022\021\n\tplayer_id\030\001 \001(\004\022\024\n\014used_item_id\030\002 "
  "\001(\004\022&\n\nitem_table\030\003 \001(\0162\022.message.ItemTa"
  "ble\"A\n\026S_Item_ConsumeableUsed\022\021\n\tplayer_"
  "id\030\001 \001(\004\022\024\n\014used_item_id\030\002 \001(\004\")\n\024C_Item"
  "_OpenInventory\022\021\n\tplayer_id\030\001 \001(\004\"P\n\024S_I"
  "tem_OpenInventory\022\021\n\tplayer_id\030\001 \001(\004\022%\n\005"
  "slots\030\002 \003(\0132\026.message.InventorySlotb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Item_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Item_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Item_2eproto = {
  false, false, 563, descriptor_table_protodef_Item_2eproto, "Item.proto", 
  &descriptor_table_Item_2eproto_once, descriptor_table_Item_2eproto_deps, 2, 7,
  schemas, file_default_instances, TableStruct_Item_2eproto::offsets,
  file_level_metadata_Item_2eproto, file_level_enum_descriptors_Item_2eproto, file_level_service_descriptors_Item_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Item_2eproto_getter() {
  return &descriptor_table_Item_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Item_2eproto(&descriptor_table_Item_2eproto);
namespace game {
namespace item {

// ===================================================================

class C_Item_PickedUp::_Internal {
 public:
};

C_Item_PickedUp::C_Item_PickedUp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.item.C_Item_PickedUp)
}
C_Item_PickedUp::C_Item_PickedUp(const C_Item_PickedUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&picked_object_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(picked_object_id_));
  // @@protoc_insertion_point(copy_constructor:game.item.C_Item_PickedUp)
}

void C_Item_PickedUp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&picked_object_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(picked_object_id_));
}

C_Item_PickedUp::~C_Item_PickedUp() {
  // @@protoc_insertion_point(destructor:game.item.C_Item_PickedUp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Item_PickedUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Item_PickedUp::ArenaDtor(void* object) {
  C_Item_PickedUp* _this = reinterpret_cast< C_Item_PickedUp* >(object);
  (void)_this;
}
void C_Item_PickedUp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Item_PickedUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Item_PickedUp::Clear() {
// @@protoc_insertion_point(message_clear_start:game.item.C_Item_PickedUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&picked_object_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(picked_object_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Item_PickedUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 picked_object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          picked_object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Item_PickedUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.item.C_Item_PickedUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // uint64 picked_object_id = 2;
  if (this->picked_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_picked_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.item.C_Item_PickedUp)
  return target;
}

size_t C_Item_PickedUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.item.C_Item_PickedUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // uint64 picked_object_id = 2;
  if (this->picked_object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_picked_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Item_PickedUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.item.C_Item_PickedUp)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Item_PickedUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Item_PickedUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.item.C_Item_PickedUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.item.C_Item_PickedUp)
    MergeFrom(*source);
  }
}

void C_Item_PickedUp::MergeFrom(const C_Item_PickedUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.item.C_Item_PickedUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.picked_object_id() != 0) {
    _internal_set_picked_object_id(from._internal_picked_object_id());
  }
}

void C_Item_PickedUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.item.C_Item_PickedUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Item_PickedUp::CopyFrom(const C_Item_PickedUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.item.C_Item_PickedUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Item_PickedUp::IsInitialized() const {
  return true;
}

void C_Item_PickedUp::InternalSwap(C_Item_PickedUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_Item_PickedUp, picked_object_id_)
      + sizeof(C_Item_PickedUp::picked_object_id_)
      - PROTOBUF_FIELD_OFFSET(C_Item_PickedUp, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Item_PickedUp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Item_2eproto_getter, &descriptor_table_Item_2eproto_once,
      file_level_metadata_Item_2eproto[0]);
}

// ===================================================================

class S_Item_PickedUp::_Internal {
 public:
};

S_Item_PickedUp::S_Item_PickedUp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.item.S_Item_PickedUp)
}
S_Item_PickedUp::S_Item_PickedUp(const S_Item_PickedUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&picked_object_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(picked_object_id_));
  // @@protoc_insertion_point(copy_constructor:game.item.S_Item_PickedUp)
}

void S_Item_PickedUp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&picked_object_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(picked_object_id_));
}

S_Item_PickedUp::~S_Item_PickedUp() {
  // @@protoc_insertion_point(destructor:game.item.S_Item_PickedUp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Item_PickedUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Item_PickedUp::ArenaDtor(void* object) {
  S_Item_PickedUp* _this = reinterpret_cast< S_Item_PickedUp* >(object);
  (void)_this;
}
void S_Item_PickedUp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Item_PickedUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Item_PickedUp::Clear() {
// @@protoc_insertion_point(message_clear_start:game.item.S_Item_PickedUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&picked_object_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(picked_object_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Item_PickedUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 picked_object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          picked_object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Item_PickedUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.item.S_Item_PickedUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // uint64 picked_object_id = 2;
  if (this->picked_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_picked_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.item.S_Item_PickedUp)
  return target;
}

size_t S_Item_PickedUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.item.S_Item_PickedUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // uint64 picked_object_id = 2;
  if (this->picked_object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_picked_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Item_PickedUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.item.S_Item_PickedUp)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Item_PickedUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Item_PickedUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.item.S_Item_PickedUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.item.S_Item_PickedUp)
    MergeFrom(*source);
  }
}

void S_Item_PickedUp::MergeFrom(const S_Item_PickedUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.item.S_Item_PickedUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.picked_object_id() != 0) {
    _internal_set_picked_object_id(from._internal_picked_object_id());
  }
}

void S_Item_PickedUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.item.S_Item_PickedUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Item_PickedUp::CopyFrom(const S_Item_PickedUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.item.S_Item_PickedUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Item_PickedUp::IsInitialized() const {
  return true;
}

void S_Item_PickedUp::InternalSwap(S_Item_PickedUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Item_PickedUp, picked_object_id_)
      + sizeof(S_Item_PickedUp::picked_object_id_)
      - PROTOBUF_FIELD_OFFSET(S_Item_PickedUp, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Item_PickedUp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Item_2eproto_getter, &descriptor_table_Item_2eproto_once,
      file_level_metadata_Item_2eproto[1]);
}

// ===================================================================

class S_Item_Acquisition::_Internal {
 public:
  static const ::message::ItemInfo& item_info(const S_Item_Acquisition* msg);
};

const ::message::ItemInfo&
S_Item_Acquisition::_Internal::item_info(const S_Item_Acquisition* msg) {
  return *msg->item_info_;
}
void S_Item_Acquisition::clear_item_info() {
  if (GetArenaForAllocation() == nullptr && item_info_ != nullptr) {
    delete item_info_;
  }
  item_info_ = nullptr;
}
S_Item_Acquisition::S_Item_Acquisition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.item.S_Item_Acquisition)
}
S_Item_Acquisition::S_Item_Acquisition(const S_Item_Acquisition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item_info()) {
    item_info_ = new ::message::ItemInfo(*from.item_info_);
  } else {
    item_info_ = nullptr;
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:game.item.S_Item_Acquisition)
}

void S_Item_Acquisition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&item_info_)) + sizeof(player_id_));
}

S_Item_Acquisition::~S_Item_Acquisition() {
  // @@protoc_insertion_point(destructor:game.item.S_Item_Acquisition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Item_Acquisition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete item_info_;
}

void S_Item_Acquisition::ArenaDtor(void* object) {
  S_Item_Acquisition* _this = reinterpret_cast< S_Item_Acquisition* >(object);
  (void)_this;
}
void S_Item_Acquisition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Item_Acquisition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Item_Acquisition::Clear() {
// @@protoc_insertion_point(message_clear_start:game.item.S_Item_Acquisition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && item_info_ != nullptr) {
    delete item_info_;
  }
  item_info_ = nullptr;
  player_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Item_Acquisition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.ItemInfo item_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Item_Acquisition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.item.S_Item_Acquisition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // .message.ItemInfo item_info = 2;
  if (this->has_item_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::item_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.item.S_Item_Acquisition)
  return target;
}

size_t S_Item_Acquisition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.item.S_Item_Acquisition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.ItemInfo item_info = 2;
  if (this->has_item_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_info_);
  }

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Item_Acquisition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.item.S_Item_Acquisition)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Item_Acquisition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Item_Acquisition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.item.S_Item_Acquisition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.item.S_Item_Acquisition)
    MergeFrom(*source);
  }
}

void S_Item_Acquisition::MergeFrom(const S_Item_Acquisition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.item.S_Item_Acquisition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item_info()) {
    _internal_mutable_item_info()->::message::ItemInfo::MergeFrom(from._internal_item_info());
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void S_Item_Acquisition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.item.S_Item_Acquisition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Item_Acquisition::CopyFrom(const S_Item_Acquisition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.item.S_Item_Acquisition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Item_Acquisition::IsInitialized() const {
  return true;
}

void S_Item_Acquisition::InternalSwap(S_Item_Acquisition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Item_Acquisition, player_id_)
      + sizeof(S_Item_Acquisition::player_id_)
      - PROTOBUF_FIELD_OFFSET(S_Item_Acquisition, item_info_)>(
          reinterpret_cast<char*>(&item_info_),
          reinterpret_cast<char*>(&other->item_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Item_Acquisition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Item_2eproto_getter, &descriptor_table_Item_2eproto_once,
      file_level_metadata_Item_2eproto[2]);
}

// ===================================================================

class C_Item_ConsumeableUsed::_Internal {
 public:
};

C_Item_ConsumeableUsed::C_Item_ConsumeableUsed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.item.C_Item_ConsumeableUsed)
}
C_Item_ConsumeableUsed::C_Item_ConsumeableUsed(const C_Item_ConsumeableUsed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_table_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(item_table_));
  // @@protoc_insertion_point(copy_constructor:game.item.C_Item_ConsumeableUsed)
}

void C_Item_ConsumeableUsed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_table_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(item_table_));
}

C_Item_ConsumeableUsed::~C_Item_ConsumeableUsed() {
  // @@protoc_insertion_point(destructor:game.item.C_Item_ConsumeableUsed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Item_ConsumeableUsed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Item_ConsumeableUsed::ArenaDtor(void* object) {
  C_Item_ConsumeableUsed* _this = reinterpret_cast< C_Item_ConsumeableUsed* >(object);
  (void)_this;
}
void C_Item_ConsumeableUsed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Item_ConsumeableUsed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Item_ConsumeableUsed::Clear() {
// @@protoc_insertion_point(message_clear_start:game.item.C_Item_ConsumeableUsed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_table_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(item_table_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Item_ConsumeableUsed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 used_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          used_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.ItemTable item_table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_item_table(static_cast<::message::ItemTable>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Item_ConsumeableUsed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.item.C_Item_ConsumeableUsed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // uint64 used_item_id = 2;
  if (this->used_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_used_item_id(), target);
  }

  // .message.ItemTable item_table = 3;
  if (this->item_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_item_table(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.item.C_Item_ConsumeableUsed)
  return target;
}

size_t C_Item_ConsumeableUsed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.item.C_Item_ConsumeableUsed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // uint64 used_item_id = 2;
  if (this->used_item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_used_item_id());
  }

  // .message.ItemTable item_table = 3;
  if (this->item_table() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_item_table());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Item_ConsumeableUsed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.item.C_Item_ConsumeableUsed)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Item_ConsumeableUsed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Item_ConsumeableUsed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.item.C_Item_ConsumeableUsed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.item.C_Item_ConsumeableUsed)
    MergeFrom(*source);
  }
}

void C_Item_ConsumeableUsed::MergeFrom(const C_Item_ConsumeableUsed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.item.C_Item_ConsumeableUsed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.used_item_id() != 0) {
    _internal_set_used_item_id(from._internal_used_item_id());
  }
  if (from.item_table() != 0) {
    _internal_set_item_table(from._internal_item_table());
  }
}

void C_Item_ConsumeableUsed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.item.C_Item_ConsumeableUsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Item_ConsumeableUsed::CopyFrom(const C_Item_ConsumeableUsed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.item.C_Item_ConsumeableUsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Item_ConsumeableUsed::IsInitialized() const {
  return true;
}

void C_Item_ConsumeableUsed::InternalSwap(C_Item_ConsumeableUsed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_Item_ConsumeableUsed, item_table_)
      + sizeof(C_Item_ConsumeableUsed::item_table_)
      - PROTOBUF_FIELD_OFFSET(C_Item_ConsumeableUsed, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Item_ConsumeableUsed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Item_2eproto_getter, &descriptor_table_Item_2eproto_once,
      file_level_metadata_Item_2eproto[3]);
}

// ===================================================================

class S_Item_ConsumeableUsed::_Internal {
 public:
};

S_Item_ConsumeableUsed::S_Item_ConsumeableUsed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.item.S_Item_ConsumeableUsed)
}
S_Item_ConsumeableUsed::S_Item_ConsumeableUsed(const S_Item_ConsumeableUsed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&used_item_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(used_item_id_));
  // @@protoc_insertion_point(copy_constructor:game.item.S_Item_ConsumeableUsed)
}

void S_Item_ConsumeableUsed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&used_item_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(used_item_id_));
}

S_Item_ConsumeableUsed::~S_Item_ConsumeableUsed() {
  // @@protoc_insertion_point(destructor:game.item.S_Item_ConsumeableUsed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Item_ConsumeableUsed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Item_ConsumeableUsed::ArenaDtor(void* object) {
  S_Item_ConsumeableUsed* _this = reinterpret_cast< S_Item_ConsumeableUsed* >(object);
  (void)_this;
}
void S_Item_ConsumeableUsed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Item_ConsumeableUsed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Item_ConsumeableUsed::Clear() {
// @@protoc_insertion_point(message_clear_start:game.item.S_Item_ConsumeableUsed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&used_item_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(used_item_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Item_ConsumeableUsed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 used_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          used_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Item_ConsumeableUsed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.item.S_Item_ConsumeableUsed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // uint64 used_item_id = 2;
  if (this->used_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_used_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.item.S_Item_ConsumeableUsed)
  return target;
}

size_t S_Item_ConsumeableUsed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.item.S_Item_ConsumeableUsed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // uint64 used_item_id = 2;
  if (this->used_item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_used_item_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Item_ConsumeableUsed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.item.S_Item_ConsumeableUsed)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Item_ConsumeableUsed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Item_ConsumeableUsed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.item.S_Item_ConsumeableUsed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.item.S_Item_ConsumeableUsed)
    MergeFrom(*source);
  }
}

void S_Item_ConsumeableUsed::MergeFrom(const S_Item_ConsumeableUsed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.item.S_Item_ConsumeableUsed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.used_item_id() != 0) {
    _internal_set_used_item_id(from._internal_used_item_id());
  }
}

void S_Item_ConsumeableUsed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.item.S_Item_ConsumeableUsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Item_ConsumeableUsed::CopyFrom(const S_Item_ConsumeableUsed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.item.S_Item_ConsumeableUsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Item_ConsumeableUsed::IsInitialized() const {
  return true;
}

void S_Item_ConsumeableUsed::InternalSwap(S_Item_ConsumeableUsed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Item_ConsumeableUsed, used_item_id_)
      + sizeof(S_Item_ConsumeableUsed::used_item_id_)
      - PROTOBUF_FIELD_OFFSET(S_Item_ConsumeableUsed, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Item_ConsumeableUsed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Item_2eproto_getter, &descriptor_table_Item_2eproto_once,
      file_level_metadata_Item_2eproto[4]);
}

// ===================================================================

class C_Item_OpenInventory::_Internal {
 public:
};

C_Item_OpenInventory::C_Item_OpenInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.item.C_Item_OpenInventory)
}
C_Item_OpenInventory::C_Item_OpenInventory(const C_Item_OpenInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:game.item.C_Item_OpenInventory)
}

void C_Item_OpenInventory::SharedCtor() {
player_id_ = uint64_t{0u};
}

C_Item_OpenInventory::~C_Item_OpenInventory() {
  // @@protoc_insertion_point(destructor:game.item.C_Item_OpenInventory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Item_OpenInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Item_OpenInventory::ArenaDtor(void* object) {
  C_Item_OpenInventory* _this = reinterpret_cast< C_Item_OpenInventory* >(object);
  (void)_this;
}
void C_Item_OpenInventory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Item_OpenInventory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Item_OpenInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:game.item.C_Item_OpenInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Item_OpenInventory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Item_OpenInventory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.item.C_Item_OpenInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.item.C_Item_OpenInventory)
  return target;
}

size_t C_Item_OpenInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.item.C_Item_OpenInventory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Item_OpenInventory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.item.C_Item_OpenInventory)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Item_OpenInventory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Item_OpenInventory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.item.C_Item_OpenInventory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.item.C_Item_OpenInventory)
    MergeFrom(*source);
  }
}

void C_Item_OpenInventory::MergeFrom(const C_Item_OpenInventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.item.C_Item_OpenInventory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void C_Item_OpenInventory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.item.C_Item_OpenInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Item_OpenInventory::CopyFrom(const C_Item_OpenInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.item.C_Item_OpenInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Item_OpenInventory::IsInitialized() const {
  return true;
}

void C_Item_OpenInventory::InternalSwap(C_Item_OpenInventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Item_OpenInventory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Item_2eproto_getter, &descriptor_table_Item_2eproto_once,
      file_level_metadata_Item_2eproto[5]);
}

// ===================================================================

class S_Item_OpenInventory::_Internal {
 public:
};

void S_Item_OpenInventory::clear_slots() {
  slots_.Clear();
}
S_Item_OpenInventory::S_Item_OpenInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  slots_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.item.S_Item_OpenInventory)
}
S_Item_OpenInventory::S_Item_OpenInventory(const S_Item_OpenInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      slots_(from.slots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:game.item.S_Item_OpenInventory)
}

void S_Item_OpenInventory::SharedCtor() {
player_id_ = uint64_t{0u};
}

S_Item_OpenInventory::~S_Item_OpenInventory() {
  // @@protoc_insertion_point(destructor:game.item.S_Item_OpenInventory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Item_OpenInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Item_OpenInventory::ArenaDtor(void* object) {
  S_Item_OpenInventory* _this = reinterpret_cast< S_Item_OpenInventory* >(object);
  (void)_this;
}
void S_Item_OpenInventory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Item_OpenInventory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Item_OpenInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:game.item.S_Item_OpenInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slots_.Clear();
  player_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Item_OpenInventory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .message.InventorySlot slots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Item_OpenInventory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.item.S_Item_OpenInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // repeated .message.InventorySlot slots = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_slots(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.item.S_Item_OpenInventory)
  return target;
}

size_t S_Item_OpenInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.item.S_Item_OpenInventory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.InventorySlot slots = 2;
  total_size += 1UL * this->_internal_slots_size();
  for (const auto& msg : this->slots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Item_OpenInventory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.item.S_Item_OpenInventory)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Item_OpenInventory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Item_OpenInventory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.item.S_Item_OpenInventory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.item.S_Item_OpenInventory)
    MergeFrom(*source);
  }
}

void S_Item_OpenInventory::MergeFrom(const S_Item_OpenInventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.item.S_Item_OpenInventory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slots_.MergeFrom(from.slots_);
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void S_Item_OpenInventory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.item.S_Item_OpenInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Item_OpenInventory::CopyFrom(const S_Item_OpenInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.item.S_Item_OpenInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Item_OpenInventory::IsInitialized() const {
  return true;
}

void S_Item_OpenInventory::InternalSwap(S_Item_OpenInventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  slots_.InternalSwap(&other->slots_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Item_OpenInventory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Item_2eproto_getter, &descriptor_table_Item_2eproto_once,
      file_level_metadata_Item_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace item
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::item::C_Item_PickedUp* Arena::CreateMaybeMessage< ::game::item::C_Item_PickedUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::item::C_Item_PickedUp >(arena);
}
template<> PROTOBUF_NOINLINE ::game::item::S_Item_PickedUp* Arena::CreateMaybeMessage< ::game::item::S_Item_PickedUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::item::S_Item_PickedUp >(arena);
}
template<> PROTOBUF_NOINLINE ::game::item::S_Item_Acquisition* Arena::CreateMaybeMessage< ::game::item::S_Item_Acquisition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::item::S_Item_Acquisition >(arena);
}
template<> PROTOBUF_NOINLINE ::game::item::C_Item_ConsumeableUsed* Arena::CreateMaybeMessage< ::game::item::C_Item_ConsumeableUsed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::item::C_Item_ConsumeableUsed >(arena);
}
template<> PROTOBUF_NOINLINE ::game::item::S_Item_ConsumeableUsed* Arena::CreateMaybeMessage< ::game::item::S_Item_ConsumeableUsed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::item::S_Item_ConsumeableUsed >(arena);
}
template<> PROTOBUF_NOINLINE ::game::item::C_Item_OpenInventory* Arena::CreateMaybeMessage< ::game::item::C_Item_OpenInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::item::C_Item_OpenInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::game::item::S_Item_OpenInventory* Arena::CreateMaybeMessage< ::game::item::S_Item_OpenInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::item::S_Item_OpenInventory >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
