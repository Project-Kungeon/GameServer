// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#include "Login.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace account {
namespace login {
constexpr C_Login::C_Login(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : email_()
  , password_(){}
struct C_LoginDefaultTypeInternal {
  constexpr C_LoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_LoginDefaultTypeInternal() {}
  union {
    C_Login _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_LoginDefaultTypeInternal _C_Login_default_instance_;
constexpr S_Login::S_Login(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_()
  , fail_message_()
  , is_success_(0){}
struct S_LoginDefaultTypeInternal {
  constexpr S_LoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_LoginDefaultTypeInternal() {}
  union {
    S_Login _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_LoginDefaultTypeInternal _S_Login_default_instance_;
constexpr C_Register::C_Register(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : email_()
  , password_()
  , confirm_password_(){}
struct C_RegisterDefaultTypeInternal {
  constexpr C_RegisterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_RegisterDefaultTypeInternal() {}
  union {
    C_Register _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_RegisterDefaultTypeInternal _C_Register_default_instance_;
constexpr S_Register::S_Register(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_success_(0){}
struct S_RegisterDefaultTypeInternal {
  constexpr S_RegisterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_RegisterDefaultTypeInternal() {}
  union {
    S_Register _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_RegisterDefaultTypeInternal _S_Register_default_instance_;
}  // namespace login
}  // namespace account
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Login_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Login_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Login_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Login_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::account::login::C_Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::account::login::C_Login, email_),
  PROTOBUF_FIELD_OFFSET(::account::login::C_Login, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::account::login::S_Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::account::login::S_Login, is_success_),
  PROTOBUF_FIELD_OFFSET(::account::login::S_Login, session_id_),
  PROTOBUF_FIELD_OFFSET(::account::login::S_Login, fail_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::account::login::C_Register, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::account::login::C_Register, email_),
  PROTOBUF_FIELD_OFFSET(::account::login::C_Register, password_),
  PROTOBUF_FIELD_OFFSET(::account::login::C_Register, confirm_password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::account::login::S_Register, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::account::login::S_Register, is_success_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::account::login::C_Login)},
  { 7, -1, sizeof(::account::login::S_Login)},
  { 15, -1, sizeof(::account::login::C_Register)},
  { 23, -1, sizeof(::account::login::S_Register)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::account::login::_C_Login_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::account::login::_S_Login_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::account::login::_C_Register_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::account::login::_S_Register_default_instance_),
};

const char descriptor_table_protodef_Login_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Login.proto\022\raccount.login\"*\n\007C_Login\022"
  "\r\n\005email\030\001 \003(\t\022\020\n\010password\030\002 \003(\t\"G\n\007S_Lo"
  "gin\022\022\n\nis_success\030\001 \001(\005\022\022\n\nsession_id\030\002 "
  "\003(\t\022\024\n\014fail_message\030\003 \003(\t\"G\n\nC_Register\022"
  "\r\n\005email\030\001 \003(\t\022\020\n\010password\030\002 \003(\t\022\030\n\020conf"
  "irm_password\030\003 \003(\t\" \n\nS_Register\022\022\n\nis_s"
  "uccess\030\001 \001(\005b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Login_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Login_2eproto = {
  false, false, 260, descriptor_table_protodef_Login_2eproto, "Login.proto", 
  &descriptor_table_Login_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_Login_2eproto::offsets,
  file_level_metadata_Login_2eproto, file_level_enum_descriptors_Login_2eproto, file_level_service_descriptors_Login_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Login_2eproto_getter() {
  return &descriptor_table_Login_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Login_2eproto(&descriptor_table_Login_2eproto);
namespace account {
namespace login {

// ===================================================================

class C_Login::_Internal {
 public:
};

C_Login::C_Login(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  email_(arena),
  password_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:account.login.C_Login)
}
C_Login::C_Login(const C_Login& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      email_(from.email_),
      password_(from.password_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:account.login.C_Login)
}

void C_Login::SharedCtor() {
}

C_Login::~C_Login() {
  // @@protoc_insertion_point(destructor:account.login.C_Login)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Login::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Login::ArenaDtor(void* object) {
  C_Login* _this = reinterpret_cast< C_Login* >(object);
  (void)_this;
}
void C_Login::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Login::Clear() {
// @@protoc_insertion_point(message_clear_start:account.login.C_Login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_.Clear();
  password_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Login::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_email();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "account.login.C_Login.email"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_password();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "account.login.C_Login.password"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Login::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:account.login.C_Login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string email = 1;
  for (int i = 0, n = this->_internal_email_size(); i < n; i++) {
    const auto& s = this->_internal_email(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "account.login.C_Login.email");
    target = stream->WriteString(1, s, target);
  }

  // repeated string password = 2;
  for (int i = 0, n = this->_internal_password_size(); i < n; i++) {
    const auto& s = this->_internal_password(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "account.login.C_Login.password");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:account.login.C_Login)
  return target;
}

size_t C_Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:account.login.C_Login)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string email = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(email_.size());
  for (int i = 0, n = email_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      email_.Get(i));
  }

  // repeated string password = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(password_.size());
  for (int i = 0, n = password_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      password_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Login::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:account.login.C_Login)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Login* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Login>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:account.login.C_Login)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:account.login.C_Login)
    MergeFrom(*source);
  }
}

void C_Login::MergeFrom(const C_Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:account.login.C_Login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  email_.MergeFrom(from.email_);
  password_.MergeFrom(from.password_);
}

void C_Login::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:account.login.C_Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Login::CopyFrom(const C_Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:account.login.C_Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Login::IsInitialized() const {
  return true;
}

void C_Login::InternalSwap(C_Login* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  email_.InternalSwap(&other->email_);
  password_.InternalSwap(&other->password_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Login::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Login_2eproto_getter, &descriptor_table_Login_2eproto_once,
      file_level_metadata_Login_2eproto[0]);
}

// ===================================================================

class S_Login::_Internal {
 public:
};

S_Login::S_Login(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  session_id_(arena),
  fail_message_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:account.login.S_Login)
}
S_Login::S_Login(const S_Login& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      session_id_(from.session_id_),
      fail_message_(from.fail_message_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_success_ = from.is_success_;
  // @@protoc_insertion_point(copy_constructor:account.login.S_Login)
}

void S_Login::SharedCtor() {
is_success_ = 0;
}

S_Login::~S_Login() {
  // @@protoc_insertion_point(destructor:account.login.S_Login)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Login::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Login::ArenaDtor(void* object) {
  S_Login* _this = reinterpret_cast< S_Login* >(object);
  (void)_this;
}
void S_Login::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Login::Clear() {
// @@protoc_insertion_point(message_clear_start:account.login.S_Login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.Clear();
  fail_message_.Clear();
  is_success_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Login::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 is_success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_session_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "account.login.S_Login.session_id"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string fail_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_fail_message();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "account.login.S_Login.fail_message"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Login::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:account.login.S_Login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 is_success = 1;
  if (this->is_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_is_success(), target);
  }

  // repeated string session_id = 2;
  for (int i = 0, n = this->_internal_session_id_size(); i < n; i++) {
    const auto& s = this->_internal_session_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "account.login.S_Login.session_id");
    target = stream->WriteString(2, s, target);
  }

  // repeated string fail_message = 3;
  for (int i = 0, n = this->_internal_fail_message_size(); i < n; i++) {
    const auto& s = this->_internal_fail_message(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "account.login.S_Login.fail_message");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:account.login.S_Login)
  return target;
}

size_t S_Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:account.login.S_Login)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string session_id = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(session_id_.size());
  for (int i = 0, n = session_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      session_id_.Get(i));
  }

  // repeated string fail_message = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(fail_message_.size());
  for (int i = 0, n = fail_message_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      fail_message_.Get(i));
  }

  // int32 is_success = 1;
  if (this->is_success() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_success());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Login::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:account.login.S_Login)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Login* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Login>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:account.login.S_Login)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:account.login.S_Login)
    MergeFrom(*source);
  }
}

void S_Login::MergeFrom(const S_Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:account.login.S_Login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  session_id_.MergeFrom(from.session_id_);
  fail_message_.MergeFrom(from.fail_message_);
  if (from.is_success() != 0) {
    _internal_set_is_success(from._internal_is_success());
  }
}

void S_Login::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:account.login.S_Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Login::CopyFrom(const S_Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:account.login.S_Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Login::IsInitialized() const {
  return true;
}

void S_Login::InternalSwap(S_Login* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  session_id_.InternalSwap(&other->session_id_);
  fail_message_.InternalSwap(&other->fail_message_);
  swap(is_success_, other->is_success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Login::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Login_2eproto_getter, &descriptor_table_Login_2eproto_once,
      file_level_metadata_Login_2eproto[1]);
}

// ===================================================================

class C_Register::_Internal {
 public:
};

C_Register::C_Register(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  email_(arena),
  password_(arena),
  confirm_password_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:account.login.C_Register)
}
C_Register::C_Register(const C_Register& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      email_(from.email_),
      password_(from.password_),
      confirm_password_(from.confirm_password_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:account.login.C_Register)
}

void C_Register::SharedCtor() {
}

C_Register::~C_Register() {
  // @@protoc_insertion_point(destructor:account.login.C_Register)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Register::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Register::ArenaDtor(void* object) {
  C_Register* _this = reinterpret_cast< C_Register* >(object);
  (void)_this;
}
void C_Register::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Register::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Register::Clear() {
// @@protoc_insertion_point(message_clear_start:account.login.C_Register)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_.Clear();
  password_.Clear();
  confirm_password_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Register::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_email();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "account.login.C_Register.email"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_password();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "account.login.C_Register.password"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string confirm_password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_confirm_password();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "account.login.C_Register.confirm_password"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Register::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:account.login.C_Register)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string email = 1;
  for (int i = 0, n = this->_internal_email_size(); i < n; i++) {
    const auto& s = this->_internal_email(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "account.login.C_Register.email");
    target = stream->WriteString(1, s, target);
  }

  // repeated string password = 2;
  for (int i = 0, n = this->_internal_password_size(); i < n; i++) {
    const auto& s = this->_internal_password(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "account.login.C_Register.password");
    target = stream->WriteString(2, s, target);
  }

  // repeated string confirm_password = 3;
  for (int i = 0, n = this->_internal_confirm_password_size(); i < n; i++) {
    const auto& s = this->_internal_confirm_password(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "account.login.C_Register.confirm_password");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:account.login.C_Register)
  return target;
}

size_t C_Register::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:account.login.C_Register)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string email = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(email_.size());
  for (int i = 0, n = email_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      email_.Get(i));
  }

  // repeated string password = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(password_.size());
  for (int i = 0, n = password_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      password_.Get(i));
  }

  // repeated string confirm_password = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(confirm_password_.size());
  for (int i = 0, n = confirm_password_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      confirm_password_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Register::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:account.login.C_Register)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Register* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Register>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:account.login.C_Register)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:account.login.C_Register)
    MergeFrom(*source);
  }
}

void C_Register::MergeFrom(const C_Register& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:account.login.C_Register)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  email_.MergeFrom(from.email_);
  password_.MergeFrom(from.password_);
  confirm_password_.MergeFrom(from.confirm_password_);
}

void C_Register::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:account.login.C_Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Register::CopyFrom(const C_Register& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:account.login.C_Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Register::IsInitialized() const {
  return true;
}

void C_Register::InternalSwap(C_Register* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  email_.InternalSwap(&other->email_);
  password_.InternalSwap(&other->password_);
  confirm_password_.InternalSwap(&other->confirm_password_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Register::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Login_2eproto_getter, &descriptor_table_Login_2eproto_once,
      file_level_metadata_Login_2eproto[2]);
}

// ===================================================================

class S_Register::_Internal {
 public:
};

S_Register::S_Register(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:account.login.S_Register)
}
S_Register::S_Register(const S_Register& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_success_ = from.is_success_;
  // @@protoc_insertion_point(copy_constructor:account.login.S_Register)
}

void S_Register::SharedCtor() {
is_success_ = 0;
}

S_Register::~S_Register() {
  // @@protoc_insertion_point(destructor:account.login.S_Register)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Register::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Register::ArenaDtor(void* object) {
  S_Register* _this = reinterpret_cast< S_Register* >(object);
  (void)_this;
}
void S_Register::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Register::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Register::Clear() {
// @@protoc_insertion_point(message_clear_start:account.login.S_Register)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_success_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Register::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 is_success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Register::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:account.login.S_Register)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 is_success = 1;
  if (this->is_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_is_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:account.login.S_Register)
  return target;
}

size_t S_Register::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:account.login.S_Register)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 is_success = 1;
  if (this->is_success() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_success());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Register::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:account.login.S_Register)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Register* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Register>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:account.login.S_Register)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:account.login.S_Register)
    MergeFrom(*source);
  }
}

void S_Register::MergeFrom(const S_Register& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:account.login.S_Register)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_success() != 0) {
    _internal_set_is_success(from._internal_is_success());
  }
}

void S_Register::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:account.login.S_Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Register::CopyFrom(const S_Register& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:account.login.S_Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Register::IsInitialized() const {
  return true;
}

void S_Register::InternalSwap(S_Register* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(is_success_, other->is_success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Register::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Login_2eproto_getter, &descriptor_table_Login_2eproto_once,
      file_level_metadata_Login_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace login
}  // namespace account
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::account::login::C_Login* Arena::CreateMaybeMessage< ::account::login::C_Login >(Arena* arena) {
  return Arena::CreateMessageInternal< ::account::login::C_Login >(arena);
}
template<> PROTOBUF_NOINLINE ::account::login::S_Login* Arena::CreateMaybeMessage< ::account::login::S_Login >(Arena* arena) {
  return Arena::CreateMessageInternal< ::account::login::S_Login >(arena);
}
template<> PROTOBUF_NOINLINE ::account::login::C_Register* Arena::CreateMaybeMessage< ::account::login::C_Register >(Arena* arena) {
  return Arena::CreateMessageInternal< ::account::login::C_Register >(arena);
}
template<> PROTOBUF_NOINLINE ::account::login::S_Register* Arena::CreateMaybeMessage< ::account::login::S_Register >(Arena* arena) {
  return Arena::CreateMessageInternal< ::account::login::S_Register >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
