// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharacterSelect.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CharacterSelect_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CharacterSelect_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CharacterSelect_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CharacterSelect_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CharacterSelect_2eproto;
namespace account {
namespace character {
namespace select {
class C_CharacterList;
struct C_CharacterListDefaultTypeInternal;
extern C_CharacterListDefaultTypeInternal _C_CharacterList_default_instance_;
class C_CreateCharacter;
struct C_CreateCharacterDefaultTypeInternal;
extern C_CreateCharacterDefaultTypeInternal _C_CreateCharacter_default_instance_;
class C_SelectCharacter;
struct C_SelectCharacterDefaultTypeInternal;
extern C_SelectCharacterDefaultTypeInternal _C_SelectCharacter_default_instance_;
class CharacterInfo;
struct CharacterInfoDefaultTypeInternal;
extern CharacterInfoDefaultTypeInternal _CharacterInfo_default_instance_;
class S_CharacterList;
struct S_CharacterListDefaultTypeInternal;
extern S_CharacterListDefaultTypeInternal _S_CharacterList_default_instance_;
class S_CreateCharacter;
struct S_CreateCharacterDefaultTypeInternal;
extern S_CreateCharacterDefaultTypeInternal _S_CreateCharacter_default_instance_;
class S_SelectCharacter;
struct S_SelectCharacterDefaultTypeInternal;
extern S_SelectCharacterDefaultTypeInternal _S_SelectCharacter_default_instance_;
}  // namespace select
}  // namespace character
}  // namespace account
PROTOBUF_NAMESPACE_OPEN
template<> ::account::character::select::C_CharacterList* Arena::CreateMaybeMessage<::account::character::select::C_CharacterList>(Arena*);
template<> ::account::character::select::C_CreateCharacter* Arena::CreateMaybeMessage<::account::character::select::C_CreateCharacter>(Arena*);
template<> ::account::character::select::C_SelectCharacter* Arena::CreateMaybeMessage<::account::character::select::C_SelectCharacter>(Arena*);
template<> ::account::character::select::CharacterInfo* Arena::CreateMaybeMessage<::account::character::select::CharacterInfo>(Arena*);
template<> ::account::character::select::S_CharacterList* Arena::CreateMaybeMessage<::account::character::select::S_CharacterList>(Arena*);
template<> ::account::character::select::S_CreateCharacter* Arena::CreateMaybeMessage<::account::character::select::S_CreateCharacter>(Arena*);
template<> ::account::character::select::S_SelectCharacter* Arena::CreateMaybeMessage<::account::character::select::S_SelectCharacter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace account {
namespace character {
namespace select {

// ===================================================================

class C_CharacterList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:account.character.select.C_CharacterList) */ {
 public:
  inline C_CharacterList() : C_CharacterList(nullptr) {}
  ~C_CharacterList() override;
  explicit constexpr C_CharacterList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CharacterList(const C_CharacterList& from);
  C_CharacterList(C_CharacterList&& from) noexcept
    : C_CharacterList() {
    *this = ::std::move(from);
  }

  inline C_CharacterList& operator=(const C_CharacterList& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CharacterList& operator=(C_CharacterList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CharacterList& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CharacterList* internal_default_instance() {
    return reinterpret_cast<const C_CharacterList*>(
               &_C_CharacterList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_CharacterList& a, C_CharacterList& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CharacterList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CharacterList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_CharacterList* New() const final {
    return new C_CharacterList();
  }

  C_CharacterList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_CharacterList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_CharacterList& from);
  void MergeFrom(const C_CharacterList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CharacterList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "account.character.select.C_CharacterList";
  }
  protected:
  explicit C_CharacterList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // string session_id = 1;
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:account.character.select.C_CharacterList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CharacterSelect_2eproto;
};
// -------------------------------------------------------------------

class CharacterInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:account.character.select.CharacterInfo) */ {
 public:
  inline CharacterInfo() : CharacterInfo(nullptr) {}
  ~CharacterInfo() override;
  explicit constexpr CharacterInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterInfo(const CharacterInfo& from);
  CharacterInfo(CharacterInfo&& from) noexcept
    : CharacterInfo() {
    *this = ::std::move(from);
  }

  inline CharacterInfo& operator=(const CharacterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterInfo& operator=(CharacterInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterInfo* internal_default_instance() {
    return reinterpret_cast<const CharacterInfo*>(
               &_CharacterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CharacterInfo& a, CharacterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CharacterInfo* New() const final {
    return new CharacterInfo();
  }

  CharacterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CharacterInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CharacterInfo& from);
  void MergeFrom(const CharacterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "account.character.select.CharacterInfo";
  }
  protected:
  explicit CharacterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kPkFieldNumber = 1,
    kClassTypeFieldNumber = 3,
  };
  // repeated string nickname = 2;
  int nickname_size() const;
  private:
  int _internal_nickname_size() const;
  public:
  void clear_nickname();
  const std::string& nickname(int index) const;
  std::string* mutable_nickname(int index);
  void set_nickname(int index, const std::string& value);
  void set_nickname(int index, std::string&& value);
  void set_nickname(int index, const char* value);
  void set_nickname(int index, const char* value, size_t size);
  std::string* add_nickname();
  void add_nickname(const std::string& value);
  void add_nickname(std::string&& value);
  void add_nickname(const char* value);
  void add_nickname(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& nickname() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_nickname();
  private:
  const std::string& _internal_nickname(int index) const;
  std::string* _internal_add_nickname();
  public:

  // uint64 pk = 1;
  void clear_pk();
  ::PROTOBUF_NAMESPACE_ID::uint64 pk() const;
  void set_pk(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pk() const;
  void _internal_set_pk(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 class_type = 3;
  void clear_class_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 class_type() const;
  void set_class_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_class_type() const;
  void _internal_set_class_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:account.character.select.CharacterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> nickname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 class_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CharacterSelect_2eproto;
};
// -------------------------------------------------------------------

class S_CharacterList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:account.character.select.S_CharacterList) */ {
 public:
  inline S_CharacterList() : S_CharacterList(nullptr) {}
  ~S_CharacterList() override;
  explicit constexpr S_CharacterList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CharacterList(const S_CharacterList& from);
  S_CharacterList(S_CharacterList&& from) noexcept
    : S_CharacterList() {
    *this = ::std::move(from);
  }

  inline S_CharacterList& operator=(const S_CharacterList& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CharacterList& operator=(S_CharacterList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CharacterList& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CharacterList* internal_default_instance() {
    return reinterpret_cast<const S_CharacterList*>(
               &_S_CharacterList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_CharacterList& a, S_CharacterList& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CharacterList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CharacterList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CharacterList* New() const final {
    return new S_CharacterList();
  }

  S_CharacterList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CharacterList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CharacterList& from);
  void MergeFrom(const S_CharacterList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CharacterList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "account.character.select.S_CharacterList";
  }
  protected:
  explicit S_CharacterList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterInfoListFieldNumber = 1,
  };
  // repeated .account.character.select.CharacterInfo character_info_list = 1;
  int character_info_list_size() const;
  private:
  int _internal_character_info_list_size() const;
  public:
  void clear_character_info_list();
  ::account::character::select::CharacterInfo* mutable_character_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::account::character::select::CharacterInfo >*
      mutable_character_info_list();
  private:
  const ::account::character::select::CharacterInfo& _internal_character_info_list(int index) const;
  ::account::character::select::CharacterInfo* _internal_add_character_info_list();
  public:
  const ::account::character::select::CharacterInfo& character_info_list(int index) const;
  ::account::character::select::CharacterInfo* add_character_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::account::character::select::CharacterInfo >&
      character_info_list() const;

  // @@protoc_insertion_point(class_scope:account.character.select.S_CharacterList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::account::character::select::CharacterInfo > character_info_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CharacterSelect_2eproto;
};
// -------------------------------------------------------------------

class C_CreateCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:account.character.select.C_CreateCharacter) */ {
 public:
  inline C_CreateCharacter() : C_CreateCharacter(nullptr) {}
  ~C_CreateCharacter() override;
  explicit constexpr C_CreateCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CreateCharacter(const C_CreateCharacter& from);
  C_CreateCharacter(C_CreateCharacter&& from) noexcept
    : C_CreateCharacter() {
    *this = ::std::move(from);
  }

  inline C_CreateCharacter& operator=(const C_CreateCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CreateCharacter& operator=(C_CreateCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CreateCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CreateCharacter* internal_default_instance() {
    return reinterpret_cast<const C_CreateCharacter*>(
               &_C_CreateCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C_CreateCharacter& a, C_CreateCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CreateCharacter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CreateCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_CreateCharacter* New() const final {
    return new C_CreateCharacter();
  }

  C_CreateCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_CreateCharacter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_CreateCharacter& from);
  void MergeFrom(const C_CreateCharacter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CreateCharacter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "account.character.select.C_CreateCharacter";
  }
  protected:
  explicit C_CreateCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:account.character.select.C_CreateCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CharacterSelect_2eproto;
};
// -------------------------------------------------------------------

class S_CreateCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:account.character.select.S_CreateCharacter) */ {
 public:
  inline S_CreateCharacter() : S_CreateCharacter(nullptr) {}
  ~S_CreateCharacter() override;
  explicit constexpr S_CreateCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CreateCharacter(const S_CreateCharacter& from);
  S_CreateCharacter(S_CreateCharacter&& from) noexcept
    : S_CreateCharacter() {
    *this = ::std::move(from);
  }

  inline S_CreateCharacter& operator=(const S_CreateCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CreateCharacter& operator=(S_CreateCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CreateCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CreateCharacter* internal_default_instance() {
    return reinterpret_cast<const S_CreateCharacter*>(
               &_S_CreateCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_CreateCharacter& a, S_CreateCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CreateCharacter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CreateCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CreateCharacter* New() const final {
    return new S_CreateCharacter();
  }

  S_CreateCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CreateCharacter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CreateCharacter& from);
  void MergeFrom(const S_CreateCharacter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CreateCharacter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "account.character.select.S_CreateCharacter";
  }
  protected:
  explicit S_CreateCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:account.character.select.S_CreateCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CharacterSelect_2eproto;
};
// -------------------------------------------------------------------

class C_SelectCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:account.character.select.C_SelectCharacter) */ {
 public:
  inline C_SelectCharacter() : C_SelectCharacter(nullptr) {}
  ~C_SelectCharacter() override;
  explicit constexpr C_SelectCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SelectCharacter(const C_SelectCharacter& from);
  C_SelectCharacter(C_SelectCharacter&& from) noexcept
    : C_SelectCharacter() {
    *this = ::std::move(from);
  }

  inline C_SelectCharacter& operator=(const C_SelectCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SelectCharacter& operator=(C_SelectCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SelectCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SelectCharacter* internal_default_instance() {
    return reinterpret_cast<const C_SelectCharacter*>(
               &_C_SelectCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C_SelectCharacter& a, C_SelectCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SelectCharacter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SelectCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_SelectCharacter* New() const final {
    return new C_SelectCharacter();
  }

  C_SelectCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_SelectCharacter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_SelectCharacter& from);
  void MergeFrom(const C_SelectCharacter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SelectCharacter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "account.character.select.C_SelectCharacter";
  }
  protected:
  explicit C_SelectCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterPkFieldNumber = 1,
  };
  // uint64 character_pk = 1;
  void clear_character_pk();
  ::PROTOBUF_NAMESPACE_ID::uint64 character_pk() const;
  void set_character_pk(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_character_pk() const;
  void _internal_set_character_pk(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:account.character.select.C_SelectCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 character_pk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CharacterSelect_2eproto;
};
// -------------------------------------------------------------------

class S_SelectCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:account.character.select.S_SelectCharacter) */ {
 public:
  inline S_SelectCharacter() : S_SelectCharacter(nullptr) {}
  ~S_SelectCharacter() override;
  explicit constexpr S_SelectCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SelectCharacter(const S_SelectCharacter& from);
  S_SelectCharacter(S_SelectCharacter&& from) noexcept
    : S_SelectCharacter() {
    *this = ::std::move(from);
  }

  inline S_SelectCharacter& operator=(const S_SelectCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SelectCharacter& operator=(S_SelectCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SelectCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SelectCharacter* internal_default_instance() {
    return reinterpret_cast<const S_SelectCharacter*>(
               &_S_SelectCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S_SelectCharacter& a, S_SelectCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SelectCharacter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SelectCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_SelectCharacter* New() const final {
    return new S_SelectCharacter();
  }

  S_SelectCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_SelectCharacter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_SelectCharacter& from);
  void MergeFrom(const S_SelectCharacter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SelectCharacter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "account.character.select.S_SelectCharacter";
  }
  protected:
  explicit S_SelectCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:account.character.select.S_SelectCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CharacterSelect_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_CharacterList

// string session_id = 1;
inline void C_CharacterList::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& C_CharacterList::session_id() const {
  // @@protoc_insertion_point(field_get:account.character.select.C_CharacterList.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CharacterList::set_session_id(ArgT0&& arg0, ArgT... args) {
 
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:account.character.select.C_CharacterList.session_id)
}
inline std::string* C_CharacterList::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:account.character.select.C_CharacterList.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& C_CharacterList::_internal_session_id() const {
  return session_id_.Get();
}
inline void C_CharacterList::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_CharacterList::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_CharacterList::release_session_id() {
  // @@protoc_insertion_point(field_release:account.character.select.C_CharacterList.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_CharacterList::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:account.character.select.C_CharacterList.session_id)
}

// -------------------------------------------------------------------

// CharacterInfo

// uint64 pk = 1;
inline void CharacterInfo::clear_pk() {
  pk_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CharacterInfo::_internal_pk() const {
  return pk_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CharacterInfo::pk() const {
  // @@protoc_insertion_point(field_get:account.character.select.CharacterInfo.pk)
  return _internal_pk();
}
inline void CharacterInfo::_internal_set_pk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pk_ = value;
}
inline void CharacterInfo::set_pk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pk(value);
  // @@protoc_insertion_point(field_set:account.character.select.CharacterInfo.pk)
}

// repeated string nickname = 2;
inline int CharacterInfo::_internal_nickname_size() const {
  return nickname_.size();
}
inline int CharacterInfo::nickname_size() const {
  return _internal_nickname_size();
}
inline void CharacterInfo::clear_nickname() {
  nickname_.Clear();
}
inline std::string* CharacterInfo::add_nickname() {
  // @@protoc_insertion_point(field_add_mutable:account.character.select.CharacterInfo.nickname)
  return _internal_add_nickname();
}
inline const std::string& CharacterInfo::_internal_nickname(int index) const {
  return nickname_.Get(index);
}
inline const std::string& CharacterInfo::nickname(int index) const {
  // @@protoc_insertion_point(field_get:account.character.select.CharacterInfo.nickname)
  return _internal_nickname(index);
}
inline std::string* CharacterInfo::mutable_nickname(int index) {
  // @@protoc_insertion_point(field_mutable:account.character.select.CharacterInfo.nickname)
  return nickname_.Mutable(index);
}
inline void CharacterInfo::set_nickname(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:account.character.select.CharacterInfo.nickname)
  nickname_.Mutable(index)->assign(value);
}
inline void CharacterInfo::set_nickname(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:account.character.select.CharacterInfo.nickname)
  nickname_.Mutable(index)->assign(std::move(value));
}
inline void CharacterInfo::set_nickname(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nickname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:account.character.select.CharacterInfo.nickname)
}
inline void CharacterInfo::set_nickname(int index, const char* value, size_t size) {
  nickname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account.character.select.CharacterInfo.nickname)
}
inline std::string* CharacterInfo::_internal_add_nickname() {
  return nickname_.Add();
}
inline void CharacterInfo::add_nickname(const std::string& value) {
  nickname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:account.character.select.CharacterInfo.nickname)
}
inline void CharacterInfo::add_nickname(std::string&& value) {
  nickname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:account.character.select.CharacterInfo.nickname)
}
inline void CharacterInfo::add_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nickname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:account.character.select.CharacterInfo.nickname)
}
inline void CharacterInfo::add_nickname(const char* value, size_t size) {
  nickname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:account.character.select.CharacterInfo.nickname)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CharacterInfo::nickname() const {
  // @@protoc_insertion_point(field_list:account.character.select.CharacterInfo.nickname)
  return nickname_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CharacterInfo::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable_list:account.character.select.CharacterInfo.nickname)
  return &nickname_;
}

// uint32 class_type = 3;
inline void CharacterInfo::clear_class_type() {
  class_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CharacterInfo::_internal_class_type() const {
  return class_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CharacterInfo::class_type() const {
  // @@protoc_insertion_point(field_get:account.character.select.CharacterInfo.class_type)
  return _internal_class_type();
}
inline void CharacterInfo::_internal_set_class_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  class_type_ = value;
}
inline void CharacterInfo::set_class_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_class_type(value);
  // @@protoc_insertion_point(field_set:account.character.select.CharacterInfo.class_type)
}

// -------------------------------------------------------------------

// S_CharacterList

// repeated .account.character.select.CharacterInfo character_info_list = 1;
inline int S_CharacterList::_internal_character_info_list_size() const {
  return character_info_list_.size();
}
inline int S_CharacterList::character_info_list_size() const {
  return _internal_character_info_list_size();
}
inline void S_CharacterList::clear_character_info_list() {
  character_info_list_.Clear();
}
inline ::account::character::select::CharacterInfo* S_CharacterList::mutable_character_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:account.character.select.S_CharacterList.character_info_list)
  return character_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::account::character::select::CharacterInfo >*
S_CharacterList::mutable_character_info_list() {
  // @@protoc_insertion_point(field_mutable_list:account.character.select.S_CharacterList.character_info_list)
  return &character_info_list_;
}
inline const ::account::character::select::CharacterInfo& S_CharacterList::_internal_character_info_list(int index) const {
  return character_info_list_.Get(index);
}
inline const ::account::character::select::CharacterInfo& S_CharacterList::character_info_list(int index) const {
  // @@protoc_insertion_point(field_get:account.character.select.S_CharacterList.character_info_list)
  return _internal_character_info_list(index);
}
inline ::account::character::select::CharacterInfo* S_CharacterList::_internal_add_character_info_list() {
  return character_info_list_.Add();
}
inline ::account::character::select::CharacterInfo* S_CharacterList::add_character_info_list() {
  // @@protoc_insertion_point(field_add:account.character.select.S_CharacterList.character_info_list)
  return _internal_add_character_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::account::character::select::CharacterInfo >&
S_CharacterList::character_info_list() const {
  // @@protoc_insertion_point(field_list:account.character.select.S_CharacterList.character_info_list)
  return character_info_list_;
}

// -------------------------------------------------------------------

// C_CreateCharacter

// -------------------------------------------------------------------

// S_CreateCharacter

// -------------------------------------------------------------------

// C_SelectCharacter

// uint64 character_pk = 1;
inline void C_SelectCharacter::clear_character_pk() {
  character_pk_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_SelectCharacter::_internal_character_pk() const {
  return character_pk_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_SelectCharacter::character_pk() const {
  // @@protoc_insertion_point(field_get:account.character.select.C_SelectCharacter.character_pk)
  return _internal_character_pk();
}
inline void C_SelectCharacter::_internal_set_character_pk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  character_pk_ = value;
}
inline void C_SelectCharacter::set_character_pk(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_character_pk(value);
  // @@protoc_insertion_point(field_set:account.character.select.C_SelectCharacter.character_pk)
}

// -------------------------------------------------------------------

// S_SelectCharacter

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace select
}  // namespace character
}  // namespace account

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CharacterSelect_2eproto
