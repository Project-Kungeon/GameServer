// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MonsterPattern.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MonsterPattern_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MonsterPattern_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MonsterPattern_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MonsterPattern_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MonsterPattern_2eproto;
namespace monster {
namespace pattern {
class C_Rampage_BasicAttackHit;
struct C_Rampage_BasicAttackHitDefaultTypeInternal;
extern C_Rampage_BasicAttackHitDefaultTypeInternal _C_Rampage_BasicAttackHit_default_instance_;
class S_Rampage_BasicAttack;
struct S_Rampage_BasicAttackDefaultTypeInternal;
extern S_Rampage_BasicAttackDefaultTypeInternal _S_Rampage_BasicAttack_default_instance_;
class S_Rampage_EarthQuake;
struct S_Rampage_EarthQuakeDefaultTypeInternal;
extern S_Rampage_EarthQuakeDefaultTypeInternal _S_Rampage_EarthQuake_default_instance_;
class S_Rampage_EnhanceAttack;
struct S_Rampage_EnhanceAttackDefaultTypeInternal;
extern S_Rampage_EnhanceAttackDefaultTypeInternal _S_Rampage_EnhanceAttack_default_instance_;
class S_Rampage_Roar;
struct S_Rampage_RoarDefaultTypeInternal;
extern S_Rampage_RoarDefaultTypeInternal _S_Rampage_Roar_default_instance_;
class S_Rampage_Throwaway;
struct S_Rampage_ThrowawayDefaultTypeInternal;
extern S_Rampage_ThrowawayDefaultTypeInternal _S_Rampage_Throwaway_default_instance_;
class S_TurnToTarget;
struct S_TurnToTargetDefaultTypeInternal;
extern S_TurnToTargetDefaultTypeInternal _S_TurnToTarget_default_instance_;
}  // namespace pattern
}  // namespace monster
PROTOBUF_NAMESPACE_OPEN
template<> ::monster::pattern::C_Rampage_BasicAttackHit* Arena::CreateMaybeMessage<::monster::pattern::C_Rampage_BasicAttackHit>(Arena*);
template<> ::monster::pattern::S_Rampage_BasicAttack* Arena::CreateMaybeMessage<::monster::pattern::S_Rampage_BasicAttack>(Arena*);
template<> ::monster::pattern::S_Rampage_EarthQuake* Arena::CreateMaybeMessage<::monster::pattern::S_Rampage_EarthQuake>(Arena*);
template<> ::monster::pattern::S_Rampage_EnhanceAttack* Arena::CreateMaybeMessage<::monster::pattern::S_Rampage_EnhanceAttack>(Arena*);
template<> ::monster::pattern::S_Rampage_Roar* Arena::CreateMaybeMessage<::monster::pattern::S_Rampage_Roar>(Arena*);
template<> ::monster::pattern::S_Rampage_Throwaway* Arena::CreateMaybeMessage<::monster::pattern::S_Rampage_Throwaway>(Arena*);
template<> ::monster::pattern::S_TurnToTarget* Arena::CreateMaybeMessage<::monster::pattern::S_TurnToTarget>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace monster {
namespace pattern {

// ===================================================================

class S_Rampage_BasicAttack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:monster.pattern.S_Rampage_BasicAttack) */ {
 public:
  inline S_Rampage_BasicAttack() : S_Rampage_BasicAttack(nullptr) {}
  ~S_Rampage_BasicAttack() override;
  explicit constexpr S_Rampage_BasicAttack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Rampage_BasicAttack(const S_Rampage_BasicAttack& from);
  S_Rampage_BasicAttack(S_Rampage_BasicAttack&& from) noexcept
    : S_Rampage_BasicAttack() {
    *this = ::std::move(from);
  }

  inline S_Rampage_BasicAttack& operator=(const S_Rampage_BasicAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Rampage_BasicAttack& operator=(S_Rampage_BasicAttack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Rampage_BasicAttack& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Rampage_BasicAttack* internal_default_instance() {
    return reinterpret_cast<const S_Rampage_BasicAttack*>(
               &_S_Rampage_BasicAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(S_Rampage_BasicAttack& a, S_Rampage_BasicAttack& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Rampage_BasicAttack* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Rampage_BasicAttack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_Rampage_BasicAttack* New() const final {
    return new S_Rampage_BasicAttack();
  }

  S_Rampage_BasicAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_Rampage_BasicAttack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_Rampage_BasicAttack& from);
  void MergeFrom(const S_Rampage_BasicAttack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Rampage_BasicAttack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "monster.pattern.S_Rampage_BasicAttack";
  }
  protected:
  explicit S_Rampage_BasicAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:monster.pattern.S_Rampage_BasicAttack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MonsterPattern_2eproto;
};
// -------------------------------------------------------------------

class C_Rampage_BasicAttackHit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:monster.pattern.C_Rampage_BasicAttackHit) */ {
 public:
  inline C_Rampage_BasicAttackHit() : C_Rampage_BasicAttackHit(nullptr) {}
  ~C_Rampage_BasicAttackHit() override;
  explicit constexpr C_Rampage_BasicAttackHit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Rampage_BasicAttackHit(const C_Rampage_BasicAttackHit& from);
  C_Rampage_BasicAttackHit(C_Rampage_BasicAttackHit&& from) noexcept
    : C_Rampage_BasicAttackHit() {
    *this = ::std::move(from);
  }

  inline C_Rampage_BasicAttackHit& operator=(const C_Rampage_BasicAttackHit& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Rampage_BasicAttackHit& operator=(C_Rampage_BasicAttackHit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Rampage_BasicAttackHit& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Rampage_BasicAttackHit* internal_default_instance() {
    return reinterpret_cast<const C_Rampage_BasicAttackHit*>(
               &_C_Rampage_BasicAttackHit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C_Rampage_BasicAttackHit& a, C_Rampage_BasicAttackHit& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Rampage_BasicAttackHit* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Rampage_BasicAttackHit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_Rampage_BasicAttackHit* New() const final {
    return new C_Rampage_BasicAttackHit();
  }

  C_Rampage_BasicAttackHit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_Rampage_BasicAttackHit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_Rampage_BasicAttackHit& from);
  void MergeFrom(const C_Rampage_BasicAttackHit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Rampage_BasicAttackHit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "monster.pattern.C_Rampage_BasicAttackHit";
  }
  protected:
  explicit C_Rampage_BasicAttackHit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 target_id = 2;
  void clear_target_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 target_id() const;
  void set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_target_id() const;
  void _internal_set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:monster.pattern.C_Rampage_BasicAttackHit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MonsterPattern_2eproto;
};
// -------------------------------------------------------------------

class S_Rampage_Roar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:monster.pattern.S_Rampage_Roar) */ {
 public:
  inline S_Rampage_Roar() : S_Rampage_Roar(nullptr) {}
  ~S_Rampage_Roar() override;
  explicit constexpr S_Rampage_Roar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Rampage_Roar(const S_Rampage_Roar& from);
  S_Rampage_Roar(S_Rampage_Roar&& from) noexcept
    : S_Rampage_Roar() {
    *this = ::std::move(from);
  }

  inline S_Rampage_Roar& operator=(const S_Rampage_Roar& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Rampage_Roar& operator=(S_Rampage_Roar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Rampage_Roar& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Rampage_Roar* internal_default_instance() {
    return reinterpret_cast<const S_Rampage_Roar*>(
               &_S_Rampage_Roar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_Rampage_Roar& a, S_Rampage_Roar& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Rampage_Roar* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Rampage_Roar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_Rampage_Roar* New() const final {
    return new S_Rampage_Roar();
  }

  S_Rampage_Roar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_Rampage_Roar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_Rampage_Roar& from);
  void MergeFrom(const S_Rampage_Roar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Rampage_Roar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "monster.pattern.S_Rampage_Roar";
  }
  protected:
  explicit S_Rampage_Roar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:monster.pattern.S_Rampage_Roar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MonsterPattern_2eproto;
};
// -------------------------------------------------------------------

class S_Rampage_EarthQuake final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:monster.pattern.S_Rampage_EarthQuake) */ {
 public:
  inline S_Rampage_EarthQuake() : S_Rampage_EarthQuake(nullptr) {}
  ~S_Rampage_EarthQuake() override;
  explicit constexpr S_Rampage_EarthQuake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Rampage_EarthQuake(const S_Rampage_EarthQuake& from);
  S_Rampage_EarthQuake(S_Rampage_EarthQuake&& from) noexcept
    : S_Rampage_EarthQuake() {
    *this = ::std::move(from);
  }

  inline S_Rampage_EarthQuake& operator=(const S_Rampage_EarthQuake& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Rampage_EarthQuake& operator=(S_Rampage_EarthQuake&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Rampage_EarthQuake& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Rampage_EarthQuake* internal_default_instance() {
    return reinterpret_cast<const S_Rampage_EarthQuake*>(
               &_S_Rampage_EarthQuake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_Rampage_EarthQuake& a, S_Rampage_EarthQuake& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Rampage_EarthQuake* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Rampage_EarthQuake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_Rampage_EarthQuake* New() const final {
    return new S_Rampage_EarthQuake();
  }

  S_Rampage_EarthQuake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_Rampage_EarthQuake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_Rampage_EarthQuake& from);
  void MergeFrom(const S_Rampage_EarthQuake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Rampage_EarthQuake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "monster.pattern.S_Rampage_EarthQuake";
  }
  protected:
  explicit S_Rampage_EarthQuake(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:monster.pattern.S_Rampage_EarthQuake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MonsterPattern_2eproto;
};
// -------------------------------------------------------------------

class S_TurnToTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:monster.pattern.S_TurnToTarget) */ {
 public:
  inline S_TurnToTarget() : S_TurnToTarget(nullptr) {}
  ~S_TurnToTarget() override;
  explicit constexpr S_TurnToTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_TurnToTarget(const S_TurnToTarget& from);
  S_TurnToTarget(S_TurnToTarget&& from) noexcept
    : S_TurnToTarget() {
    *this = ::std::move(from);
  }

  inline S_TurnToTarget& operator=(const S_TurnToTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_TurnToTarget& operator=(S_TurnToTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_TurnToTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_TurnToTarget* internal_default_instance() {
    return reinterpret_cast<const S_TurnToTarget*>(
               &_S_TurnToTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_TurnToTarget& a, S_TurnToTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(S_TurnToTarget* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_TurnToTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_TurnToTarget* New() const final {
    return new S_TurnToTarget();
  }

  S_TurnToTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_TurnToTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_TurnToTarget& from);
  void MergeFrom(const S_TurnToTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_TurnToTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "monster.pattern.S_TurnToTarget";
  }
  protected:
  explicit S_TurnToTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kPitchFieldNumber = 2,
    kYawFieldNumber = 3,
    kRollFieldNumber = 4,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float pitch = 2;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float yaw = 3;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float roll = 4;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // @@protoc_insertion_point(class_scope:monster.pattern.S_TurnToTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id_;
  float pitch_;
  float yaw_;
  float roll_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MonsterPattern_2eproto;
};
// -------------------------------------------------------------------

class S_Rampage_EnhanceAttack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:monster.pattern.S_Rampage_EnhanceAttack) */ {
 public:
  inline S_Rampage_EnhanceAttack() : S_Rampage_EnhanceAttack(nullptr) {}
  ~S_Rampage_EnhanceAttack() override;
  explicit constexpr S_Rampage_EnhanceAttack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Rampage_EnhanceAttack(const S_Rampage_EnhanceAttack& from);
  S_Rampage_EnhanceAttack(S_Rampage_EnhanceAttack&& from) noexcept
    : S_Rampage_EnhanceAttack() {
    *this = ::std::move(from);
  }

  inline S_Rampage_EnhanceAttack& operator=(const S_Rampage_EnhanceAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Rampage_EnhanceAttack& operator=(S_Rampage_EnhanceAttack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Rampage_EnhanceAttack& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Rampage_EnhanceAttack* internal_default_instance() {
    return reinterpret_cast<const S_Rampage_EnhanceAttack*>(
               &_S_Rampage_EnhanceAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_Rampage_EnhanceAttack& a, S_Rampage_EnhanceAttack& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Rampage_EnhanceAttack* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Rampage_EnhanceAttack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_Rampage_EnhanceAttack* New() const final {
    return new S_Rampage_EnhanceAttack();
  }

  S_Rampage_EnhanceAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_Rampage_EnhanceAttack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_Rampage_EnhanceAttack& from);
  void MergeFrom(const S_Rampage_EnhanceAttack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Rampage_EnhanceAttack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "monster.pattern.S_Rampage_EnhanceAttack";
  }
  protected:
  explicit S_Rampage_EnhanceAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:monster.pattern.S_Rampage_EnhanceAttack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MonsterPattern_2eproto;
};
// -------------------------------------------------------------------

class S_Rampage_Throwaway final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:monster.pattern.S_Rampage_Throwaway) */ {
 public:
  inline S_Rampage_Throwaway() : S_Rampage_Throwaway(nullptr) {}
  ~S_Rampage_Throwaway() override;
  explicit constexpr S_Rampage_Throwaway(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Rampage_Throwaway(const S_Rampage_Throwaway& from);
  S_Rampage_Throwaway(S_Rampage_Throwaway&& from) noexcept
    : S_Rampage_Throwaway() {
    *this = ::std::move(from);
  }

  inline S_Rampage_Throwaway& operator=(const S_Rampage_Throwaway& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Rampage_Throwaway& operator=(S_Rampage_Throwaway&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Rampage_Throwaway& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Rampage_Throwaway* internal_default_instance() {
    return reinterpret_cast<const S_Rampage_Throwaway*>(
               &_S_Rampage_Throwaway_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S_Rampage_Throwaway& a, S_Rampage_Throwaway& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Rampage_Throwaway* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Rampage_Throwaway* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_Rampage_Throwaway* New() const final {
    return new S_Rampage_Throwaway();
  }

  S_Rampage_Throwaway* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_Rampage_Throwaway>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_Rampage_Throwaway& from);
  void MergeFrom(const S_Rampage_Throwaway& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Rampage_Throwaway* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "monster.pattern.S_Rampage_Throwaway";
  }
  protected:
  explicit S_Rampage_Throwaway(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kTargetXFieldNumber = 2,
    kTargetYFieldNumber = 3,
    kTargetZFieldNumber = 4,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float target_x = 2;
  void clear_target_x();
  float target_x() const;
  void set_target_x(float value);
  private:
  float _internal_target_x() const;
  void _internal_set_target_x(float value);
  public:

  // float target_y = 3;
  void clear_target_y();
  float target_y() const;
  void set_target_y(float value);
  private:
  float _internal_target_y() const;
  void _internal_set_target_y(float value);
  public:

  // float target_z = 4;
  void clear_target_z();
  float target_z() const;
  void set_target_z(float value);
  private:
  float _internal_target_z() const;
  void _internal_set_target_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:monster.pattern.S_Rampage_Throwaway)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 object_id_;
  float target_x_;
  float target_y_;
  float target_z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MonsterPattern_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S_Rampage_BasicAttack

// uint64 object_id = 1;
inline void S_Rampage_BasicAttack::clear_object_id() {
  object_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_Rampage_BasicAttack::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_Rampage_BasicAttack::object_id() const {
  // @@protoc_insertion_point(field_get:monster.pattern.S_Rampage_BasicAttack.object_id)
  return _internal_object_id();
}
inline void S_Rampage_BasicAttack::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  object_id_ = value;
}
inline void S_Rampage_BasicAttack::set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:monster.pattern.S_Rampage_BasicAttack.object_id)
}

// -------------------------------------------------------------------

// C_Rampage_BasicAttackHit

// uint64 object_id = 1;
inline void C_Rampage_BasicAttackHit::clear_object_id() {
  object_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_Rampage_BasicAttackHit::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_Rampage_BasicAttackHit::object_id() const {
  // @@protoc_insertion_point(field_get:monster.pattern.C_Rampage_BasicAttackHit.object_id)
  return _internal_object_id();
}
inline void C_Rampage_BasicAttackHit::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  object_id_ = value;
}
inline void C_Rampage_BasicAttackHit::set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:monster.pattern.C_Rampage_BasicAttackHit.object_id)
}

// uint64 target_id = 2;
inline void C_Rampage_BasicAttackHit::clear_target_id() {
  target_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_Rampage_BasicAttackHit::_internal_target_id() const {
  return target_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_Rampage_BasicAttackHit::target_id() const {
  // @@protoc_insertion_point(field_get:monster.pattern.C_Rampage_BasicAttackHit.target_id)
  return _internal_target_id();
}
inline void C_Rampage_BasicAttackHit::_internal_set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  target_id_ = value;
}
inline void C_Rampage_BasicAttackHit::set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:monster.pattern.C_Rampage_BasicAttackHit.target_id)
}

// -------------------------------------------------------------------

// S_Rampage_Roar

// uint64 object_id = 1;
inline void S_Rampage_Roar::clear_object_id() {
  object_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_Rampage_Roar::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_Rampage_Roar::object_id() const {
  // @@protoc_insertion_point(field_get:monster.pattern.S_Rampage_Roar.object_id)
  return _internal_object_id();
}
inline void S_Rampage_Roar::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  object_id_ = value;
}
inline void S_Rampage_Roar::set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:monster.pattern.S_Rampage_Roar.object_id)
}

// -------------------------------------------------------------------

// S_Rampage_EarthQuake

// uint64 object_id = 1;
inline void S_Rampage_EarthQuake::clear_object_id() {
  object_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_Rampage_EarthQuake::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_Rampage_EarthQuake::object_id() const {
  // @@protoc_insertion_point(field_get:monster.pattern.S_Rampage_EarthQuake.object_id)
  return _internal_object_id();
}
inline void S_Rampage_EarthQuake::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  object_id_ = value;
}
inline void S_Rampage_EarthQuake::set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:monster.pattern.S_Rampage_EarthQuake.object_id)
}

// -------------------------------------------------------------------

// S_TurnToTarget

// uint64 object_id = 1;
inline void S_TurnToTarget::clear_object_id() {
  object_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_TurnToTarget::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_TurnToTarget::object_id() const {
  // @@protoc_insertion_point(field_get:monster.pattern.S_TurnToTarget.object_id)
  return _internal_object_id();
}
inline void S_TurnToTarget::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  object_id_ = value;
}
inline void S_TurnToTarget::set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:monster.pattern.S_TurnToTarget.object_id)
}

// float pitch = 2;
inline void S_TurnToTarget::clear_pitch() {
  pitch_ = 0;
}
inline float S_TurnToTarget::_internal_pitch() const {
  return pitch_;
}
inline float S_TurnToTarget::pitch() const {
  // @@protoc_insertion_point(field_get:monster.pattern.S_TurnToTarget.pitch)
  return _internal_pitch();
}
inline void S_TurnToTarget::_internal_set_pitch(float value) {
  
  pitch_ = value;
}
inline void S_TurnToTarget::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:monster.pattern.S_TurnToTarget.pitch)
}

// float yaw = 3;
inline void S_TurnToTarget::clear_yaw() {
  yaw_ = 0;
}
inline float S_TurnToTarget::_internal_yaw() const {
  return yaw_;
}
inline float S_TurnToTarget::yaw() const {
  // @@protoc_insertion_point(field_get:monster.pattern.S_TurnToTarget.yaw)
  return _internal_yaw();
}
inline void S_TurnToTarget::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void S_TurnToTarget::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:monster.pattern.S_TurnToTarget.yaw)
}

// float roll = 4;
inline void S_TurnToTarget::clear_roll() {
  roll_ = 0;
}
inline float S_TurnToTarget::_internal_roll() const {
  return roll_;
}
inline float S_TurnToTarget::roll() const {
  // @@protoc_insertion_point(field_get:monster.pattern.S_TurnToTarget.roll)
  return _internal_roll();
}
inline void S_TurnToTarget::_internal_set_roll(float value) {
  
  roll_ = value;
}
inline void S_TurnToTarget::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:monster.pattern.S_TurnToTarget.roll)
}

// -------------------------------------------------------------------

// S_Rampage_EnhanceAttack

// uint64 object_id = 1;
inline void S_Rampage_EnhanceAttack::clear_object_id() {
  object_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_Rampage_EnhanceAttack::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_Rampage_EnhanceAttack::object_id() const {
  // @@protoc_insertion_point(field_get:monster.pattern.S_Rampage_EnhanceAttack.object_id)
  return _internal_object_id();
}
inline void S_Rampage_EnhanceAttack::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  object_id_ = value;
}
inline void S_Rampage_EnhanceAttack::set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:monster.pattern.S_Rampage_EnhanceAttack.object_id)
}

// -------------------------------------------------------------------

// S_Rampage_Throwaway

// uint64 object_id = 1;
inline void S_Rampage_Throwaway::clear_object_id() {
  object_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_Rampage_Throwaway::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_Rampage_Throwaway::object_id() const {
  // @@protoc_insertion_point(field_get:monster.pattern.S_Rampage_Throwaway.object_id)
  return _internal_object_id();
}
inline void S_Rampage_Throwaway::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  object_id_ = value;
}
inline void S_Rampage_Throwaway::set_object_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:monster.pattern.S_Rampage_Throwaway.object_id)
}

// float target_x = 2;
inline void S_Rampage_Throwaway::clear_target_x() {
  target_x_ = 0;
}
inline float S_Rampage_Throwaway::_internal_target_x() const {
  return target_x_;
}
inline float S_Rampage_Throwaway::target_x() const {
  // @@protoc_insertion_point(field_get:monster.pattern.S_Rampage_Throwaway.target_x)
  return _internal_target_x();
}
inline void S_Rampage_Throwaway::_internal_set_target_x(float value) {
  
  target_x_ = value;
}
inline void S_Rampage_Throwaway::set_target_x(float value) {
  _internal_set_target_x(value);
  // @@protoc_insertion_point(field_set:monster.pattern.S_Rampage_Throwaway.target_x)
}

// float target_y = 3;
inline void S_Rampage_Throwaway::clear_target_y() {
  target_y_ = 0;
}
inline float S_Rampage_Throwaway::_internal_target_y() const {
  return target_y_;
}
inline float S_Rampage_Throwaway::target_y() const {
  // @@protoc_insertion_point(field_get:monster.pattern.S_Rampage_Throwaway.target_y)
  return _internal_target_y();
}
inline void S_Rampage_Throwaway::_internal_set_target_y(float value) {
  
  target_y_ = value;
}
inline void S_Rampage_Throwaway::set_target_y(float value) {
  _internal_set_target_y(value);
  // @@protoc_insertion_point(field_set:monster.pattern.S_Rampage_Throwaway.target_y)
}

// float target_z = 4;
inline void S_Rampage_Throwaway::clear_target_z() {
  target_z_ = 0;
}
inline float S_Rampage_Throwaway::_internal_target_z() const {
  return target_z_;
}
inline float S_Rampage_Throwaway::target_z() const {
  // @@protoc_insertion_point(field_get:monster.pattern.S_Rampage_Throwaway.target_z)
  return _internal_target_z();
}
inline void S_Rampage_Throwaway::_internal_set_target_z(float value) {
  
  target_z_ = value;
}
inline void S_Rampage_Throwaway::set_target_z(float value) {
  _internal_set_target_z(value);
  // @@protoc_insertion_point(field_set:monster.pattern.S_Rampage_Throwaway.target_z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pattern
}  // namespace monster

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MonsterPattern_2eproto
