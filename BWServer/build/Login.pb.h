// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Login_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Login_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Login_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Login_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Login_2eproto;
namespace account {
namespace login {
class C_Login;
struct C_LoginDefaultTypeInternal;
extern C_LoginDefaultTypeInternal _C_Login_default_instance_;
class C_Register;
struct C_RegisterDefaultTypeInternal;
extern C_RegisterDefaultTypeInternal _C_Register_default_instance_;
class S_Login;
struct S_LoginDefaultTypeInternal;
extern S_LoginDefaultTypeInternal _S_Login_default_instance_;
class S_Register;
struct S_RegisterDefaultTypeInternal;
extern S_RegisterDefaultTypeInternal _S_Register_default_instance_;
}  // namespace login
}  // namespace account
PROTOBUF_NAMESPACE_OPEN
template<> ::account::login::C_Login* Arena::CreateMaybeMessage<::account::login::C_Login>(Arena*);
template<> ::account::login::C_Register* Arena::CreateMaybeMessage<::account::login::C_Register>(Arena*);
template<> ::account::login::S_Login* Arena::CreateMaybeMessage<::account::login::S_Login>(Arena*);
template<> ::account::login::S_Register* Arena::CreateMaybeMessage<::account::login::S_Register>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace account {
namespace login {

// ===================================================================

class C_Login final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:account.login.C_Login) */ {
 public:
  inline C_Login() : C_Login(nullptr) {}
  ~C_Login() override;
  explicit PROTOBUF_CONSTEXPR C_Login(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Login(const C_Login& from);
  C_Login(C_Login&& from) noexcept
    : C_Login() {
    *this = ::std::move(from);
  }

  inline C_Login& operator=(const C_Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Login& operator=(C_Login&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Login& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Login* internal_default_instance() {
    return reinterpret_cast<const C_Login*>(
               &_C_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_Login& a, C_Login& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Login* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Login* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Login>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Login& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_Login& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Login* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "account.login.C_Login";
  }
  protected:
  explicit C_Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // repeated string email = 1;
  int email_size() const;
  private:
  int _internal_email_size() const;
  public:
  void clear_email();
  const std::string& email(int index) const;
  std::string* mutable_email(int index);
  void set_email(int index, const std::string& value);
  void set_email(int index, std::string&& value);
  void set_email(int index, const char* value);
  void set_email(int index, const char* value, size_t size);
  std::string* add_email();
  void add_email(const std::string& value);
  void add_email(std::string&& value);
  void add_email(const char* value);
  void add_email(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& email() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_email();
  private:
  const std::string& _internal_email(int index) const;
  std::string* _internal_add_email();
  public:

  // repeated string password = 2;
  int password_size() const;
  private:
  int _internal_password_size() const;
  public:
  void clear_password();
  const std::string& password(int index) const;
  std::string* mutable_password(int index);
  void set_password(int index, const std::string& value);
  void set_password(int index, std::string&& value);
  void set_password(int index, const char* value);
  void set_password(int index, const char* value, size_t size);
  std::string* add_password();
  void add_password(const std::string& value);
  void add_password(std::string&& value);
  void add_password(const char* value);
  void add_password(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& password() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_password();
  private:
  const std::string& _internal_password(int index) const;
  std::string* _internal_add_password();
  public:

  // @@protoc_insertion_point(class_scope:account.login.C_Login)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> email_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class S_Login final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:account.login.S_Login) */ {
 public:
  inline S_Login() : S_Login(nullptr) {}
  ~S_Login() override;
  explicit PROTOBUF_CONSTEXPR S_Login(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Login(const S_Login& from);
  S_Login(S_Login&& from) noexcept
    : S_Login() {
    *this = ::std::move(from);
  }

  inline S_Login& operator=(const S_Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Login& operator=(S_Login&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Login& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Login* internal_default_instance() {
    return reinterpret_cast<const S_Login*>(
               &_S_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_Login& a, S_Login& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Login* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Login* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Login>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Login& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_Login& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Login* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "account.login.S_Login";
  }
  protected:
  explicit S_Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 2,
    kFailMessageFieldNumber = 3,
    kIsSuccessFieldNumber = 1,
  };
  // repeated string session_id = 2;
  int session_id_size() const;
  private:
  int _internal_session_id_size() const;
  public:
  void clear_session_id();
  const std::string& session_id(int index) const;
  std::string* mutable_session_id(int index);
  void set_session_id(int index, const std::string& value);
  void set_session_id(int index, std::string&& value);
  void set_session_id(int index, const char* value);
  void set_session_id(int index, const char* value, size_t size);
  std::string* add_session_id();
  void add_session_id(const std::string& value);
  void add_session_id(std::string&& value);
  void add_session_id(const char* value);
  void add_session_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& session_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_session_id();
  private:
  const std::string& _internal_session_id(int index) const;
  std::string* _internal_add_session_id();
  public:

  // repeated string fail_message = 3;
  int fail_message_size() const;
  private:
  int _internal_fail_message_size() const;
  public:
  void clear_fail_message();
  const std::string& fail_message(int index) const;
  std::string* mutable_fail_message(int index);
  void set_fail_message(int index, const std::string& value);
  void set_fail_message(int index, std::string&& value);
  void set_fail_message(int index, const char* value);
  void set_fail_message(int index, const char* value, size_t size);
  std::string* add_fail_message();
  void add_fail_message(const std::string& value);
  void add_fail_message(std::string&& value);
  void add_fail_message(const char* value);
  void add_fail_message(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& fail_message() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_fail_message();
  private:
  const std::string& _internal_fail_message(int index) const;
  std::string* _internal_add_fail_message();
  public:

  // int32 is_success = 1;
  void clear_is_success();
  int32_t is_success() const;
  void set_is_success(int32_t value);
  private:
  int32_t _internal_is_success() const;
  void _internal_set_is_success(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:account.login.S_Login)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> session_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> fail_message_;
  int32_t is_success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class C_Register final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:account.login.C_Register) */ {
 public:
  inline C_Register() : C_Register(nullptr) {}
  ~C_Register() override;
  explicit PROTOBUF_CONSTEXPR C_Register(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Register(const C_Register& from);
  C_Register(C_Register&& from) noexcept
    : C_Register() {
    *this = ::std::move(from);
  }

  inline C_Register& operator=(const C_Register& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Register& operator=(C_Register&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Register& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Register* internal_default_instance() {
    return reinterpret_cast<const C_Register*>(
               &_C_Register_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_Register& a, C_Register& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Register* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Register* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Register* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Register>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Register& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_Register& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Register* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "account.login.C_Register";
  }
  protected:
  explicit C_Register(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kConfirmPasswordFieldNumber = 3,
  };
  // repeated string email = 1;
  int email_size() const;
  private:
  int _internal_email_size() const;
  public:
  void clear_email();
  const std::string& email(int index) const;
  std::string* mutable_email(int index);
  void set_email(int index, const std::string& value);
  void set_email(int index, std::string&& value);
  void set_email(int index, const char* value);
  void set_email(int index, const char* value, size_t size);
  std::string* add_email();
  void add_email(const std::string& value);
  void add_email(std::string&& value);
  void add_email(const char* value);
  void add_email(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& email() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_email();
  private:
  const std::string& _internal_email(int index) const;
  std::string* _internal_add_email();
  public:

  // repeated string password = 2;
  int password_size() const;
  private:
  int _internal_password_size() const;
  public:
  void clear_password();
  const std::string& password(int index) const;
  std::string* mutable_password(int index);
  void set_password(int index, const std::string& value);
  void set_password(int index, std::string&& value);
  void set_password(int index, const char* value);
  void set_password(int index, const char* value, size_t size);
  std::string* add_password();
  void add_password(const std::string& value);
  void add_password(std::string&& value);
  void add_password(const char* value);
  void add_password(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& password() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_password();
  private:
  const std::string& _internal_password(int index) const;
  std::string* _internal_add_password();
  public:

  // repeated string confirm_password = 3;
  int confirm_password_size() const;
  private:
  int _internal_confirm_password_size() const;
  public:
  void clear_confirm_password();
  const std::string& confirm_password(int index) const;
  std::string* mutable_confirm_password(int index);
  void set_confirm_password(int index, const std::string& value);
  void set_confirm_password(int index, std::string&& value);
  void set_confirm_password(int index, const char* value);
  void set_confirm_password(int index, const char* value, size_t size);
  std::string* add_confirm_password();
  void add_confirm_password(const std::string& value);
  void add_confirm_password(std::string&& value);
  void add_confirm_password(const char* value);
  void add_confirm_password(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& confirm_password() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_confirm_password();
  private:
  const std::string& _internal_confirm_password(int index) const;
  std::string* _internal_add_confirm_password();
  public:

  // @@protoc_insertion_point(class_scope:account.login.C_Register)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> email_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> password_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> confirm_password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class S_Register final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:account.login.S_Register) */ {
 public:
  inline S_Register() : S_Register(nullptr) {}
  ~S_Register() override;
  explicit PROTOBUF_CONSTEXPR S_Register(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Register(const S_Register& from);
  S_Register(S_Register&& from) noexcept
    : S_Register() {
    *this = ::std::move(from);
  }

  inline S_Register& operator=(const S_Register& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Register& operator=(S_Register&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Register& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Register* internal_default_instance() {
    return reinterpret_cast<const S_Register*>(
               &_S_Register_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_Register& a, S_Register& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Register* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Register* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Register* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Register>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Register& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_Register& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Register* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "account.login.S_Register";
  }
  protected:
  explicit S_Register(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsSuccessFieldNumber = 1,
  };
  // int32 is_success = 1;
  void clear_is_success();
  int32_t is_success() const;
  void set_is_success(int32_t value);
  private:
  int32_t _internal_is_success() const;
  void _internal_set_is_success(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:account.login.S_Register)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t is_success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_Login

// repeated string email = 1;
inline int C_Login::_internal_email_size() const {
  return email_.size();
}
inline int C_Login::email_size() const {
  return _internal_email_size();
}
inline void C_Login::clear_email() {
  email_.Clear();
}
inline std::string* C_Login::add_email() {
  std::string* _s = _internal_add_email();
  // @@protoc_insertion_point(field_add_mutable:account.login.C_Login.email)
  return _s;
}
inline const std::string& C_Login::_internal_email(int index) const {
  return email_.Get(index);
}
inline const std::string& C_Login::email(int index) const {
  // @@protoc_insertion_point(field_get:account.login.C_Login.email)
  return _internal_email(index);
}
inline std::string* C_Login::mutable_email(int index) {
  // @@protoc_insertion_point(field_mutable:account.login.C_Login.email)
  return email_.Mutable(index);
}
inline void C_Login::set_email(int index, const std::string& value) {
  email_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:account.login.C_Login.email)
}
inline void C_Login::set_email(int index, std::string&& value) {
  email_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:account.login.C_Login.email)
}
inline void C_Login::set_email(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  email_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:account.login.C_Login.email)
}
inline void C_Login::set_email(int index, const char* value, size_t size) {
  email_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account.login.C_Login.email)
}
inline std::string* C_Login::_internal_add_email() {
  return email_.Add();
}
inline void C_Login::add_email(const std::string& value) {
  email_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:account.login.C_Login.email)
}
inline void C_Login::add_email(std::string&& value) {
  email_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:account.login.C_Login.email)
}
inline void C_Login::add_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  email_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:account.login.C_Login.email)
}
inline void C_Login::add_email(const char* value, size_t size) {
  email_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:account.login.C_Login.email)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
C_Login::email() const {
  // @@protoc_insertion_point(field_list:account.login.C_Login.email)
  return email_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
C_Login::mutable_email() {
  // @@protoc_insertion_point(field_mutable_list:account.login.C_Login.email)
  return &email_;
}

// repeated string password = 2;
inline int C_Login::_internal_password_size() const {
  return password_.size();
}
inline int C_Login::password_size() const {
  return _internal_password_size();
}
inline void C_Login::clear_password() {
  password_.Clear();
}
inline std::string* C_Login::add_password() {
  std::string* _s = _internal_add_password();
  // @@protoc_insertion_point(field_add_mutable:account.login.C_Login.password)
  return _s;
}
inline const std::string& C_Login::_internal_password(int index) const {
  return password_.Get(index);
}
inline const std::string& C_Login::password(int index) const {
  // @@protoc_insertion_point(field_get:account.login.C_Login.password)
  return _internal_password(index);
}
inline std::string* C_Login::mutable_password(int index) {
  // @@protoc_insertion_point(field_mutable:account.login.C_Login.password)
  return password_.Mutable(index);
}
inline void C_Login::set_password(int index, const std::string& value) {
  password_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:account.login.C_Login.password)
}
inline void C_Login::set_password(int index, std::string&& value) {
  password_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:account.login.C_Login.password)
}
inline void C_Login::set_password(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  password_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:account.login.C_Login.password)
}
inline void C_Login::set_password(int index, const char* value, size_t size) {
  password_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account.login.C_Login.password)
}
inline std::string* C_Login::_internal_add_password() {
  return password_.Add();
}
inline void C_Login::add_password(const std::string& value) {
  password_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:account.login.C_Login.password)
}
inline void C_Login::add_password(std::string&& value) {
  password_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:account.login.C_Login.password)
}
inline void C_Login::add_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  password_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:account.login.C_Login.password)
}
inline void C_Login::add_password(const char* value, size_t size) {
  password_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:account.login.C_Login.password)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
C_Login::password() const {
  // @@protoc_insertion_point(field_list:account.login.C_Login.password)
  return password_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
C_Login::mutable_password() {
  // @@protoc_insertion_point(field_mutable_list:account.login.C_Login.password)
  return &password_;
}

// -------------------------------------------------------------------

// S_Login

// int32 is_success = 1;
inline void S_Login::clear_is_success() {
  is_success_ = 0;
}
inline int32_t S_Login::_internal_is_success() const {
  return is_success_;
}
inline int32_t S_Login::is_success() const {
  // @@protoc_insertion_point(field_get:account.login.S_Login.is_success)
  return _internal_is_success();
}
inline void S_Login::_internal_set_is_success(int32_t value) {
  
  is_success_ = value;
}
inline void S_Login::set_is_success(int32_t value) {
  _internal_set_is_success(value);
  // @@protoc_insertion_point(field_set:account.login.S_Login.is_success)
}

// repeated string session_id = 2;
inline int S_Login::_internal_session_id_size() const {
  return session_id_.size();
}
inline int S_Login::session_id_size() const {
  return _internal_session_id_size();
}
inline void S_Login::clear_session_id() {
  session_id_.Clear();
}
inline std::string* S_Login::add_session_id() {
  std::string* _s = _internal_add_session_id();
  // @@protoc_insertion_point(field_add_mutable:account.login.S_Login.session_id)
  return _s;
}
inline const std::string& S_Login::_internal_session_id(int index) const {
  return session_id_.Get(index);
}
inline const std::string& S_Login::session_id(int index) const {
  // @@protoc_insertion_point(field_get:account.login.S_Login.session_id)
  return _internal_session_id(index);
}
inline std::string* S_Login::mutable_session_id(int index) {
  // @@protoc_insertion_point(field_mutable:account.login.S_Login.session_id)
  return session_id_.Mutable(index);
}
inline void S_Login::set_session_id(int index, const std::string& value) {
  session_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:account.login.S_Login.session_id)
}
inline void S_Login::set_session_id(int index, std::string&& value) {
  session_id_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:account.login.S_Login.session_id)
}
inline void S_Login::set_session_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  session_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:account.login.S_Login.session_id)
}
inline void S_Login::set_session_id(int index, const char* value, size_t size) {
  session_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account.login.S_Login.session_id)
}
inline std::string* S_Login::_internal_add_session_id() {
  return session_id_.Add();
}
inline void S_Login::add_session_id(const std::string& value) {
  session_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:account.login.S_Login.session_id)
}
inline void S_Login::add_session_id(std::string&& value) {
  session_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:account.login.S_Login.session_id)
}
inline void S_Login::add_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  session_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:account.login.S_Login.session_id)
}
inline void S_Login::add_session_id(const char* value, size_t size) {
  session_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:account.login.S_Login.session_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
S_Login::session_id() const {
  // @@protoc_insertion_point(field_list:account.login.S_Login.session_id)
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
S_Login::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable_list:account.login.S_Login.session_id)
  return &session_id_;
}

// repeated string fail_message = 3;
inline int S_Login::_internal_fail_message_size() const {
  return fail_message_.size();
}
inline int S_Login::fail_message_size() const {
  return _internal_fail_message_size();
}
inline void S_Login::clear_fail_message() {
  fail_message_.Clear();
}
inline std::string* S_Login::add_fail_message() {
  std::string* _s = _internal_add_fail_message();
  // @@protoc_insertion_point(field_add_mutable:account.login.S_Login.fail_message)
  return _s;
}
inline const std::string& S_Login::_internal_fail_message(int index) const {
  return fail_message_.Get(index);
}
inline const std::string& S_Login::fail_message(int index) const {
  // @@protoc_insertion_point(field_get:account.login.S_Login.fail_message)
  return _internal_fail_message(index);
}
inline std::string* S_Login::mutable_fail_message(int index) {
  // @@protoc_insertion_point(field_mutable:account.login.S_Login.fail_message)
  return fail_message_.Mutable(index);
}
inline void S_Login::set_fail_message(int index, const std::string& value) {
  fail_message_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:account.login.S_Login.fail_message)
}
inline void S_Login::set_fail_message(int index, std::string&& value) {
  fail_message_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:account.login.S_Login.fail_message)
}
inline void S_Login::set_fail_message(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fail_message_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:account.login.S_Login.fail_message)
}
inline void S_Login::set_fail_message(int index, const char* value, size_t size) {
  fail_message_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account.login.S_Login.fail_message)
}
inline std::string* S_Login::_internal_add_fail_message() {
  return fail_message_.Add();
}
inline void S_Login::add_fail_message(const std::string& value) {
  fail_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:account.login.S_Login.fail_message)
}
inline void S_Login::add_fail_message(std::string&& value) {
  fail_message_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:account.login.S_Login.fail_message)
}
inline void S_Login::add_fail_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fail_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:account.login.S_Login.fail_message)
}
inline void S_Login::add_fail_message(const char* value, size_t size) {
  fail_message_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:account.login.S_Login.fail_message)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
S_Login::fail_message() const {
  // @@protoc_insertion_point(field_list:account.login.S_Login.fail_message)
  return fail_message_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
S_Login::mutable_fail_message() {
  // @@protoc_insertion_point(field_mutable_list:account.login.S_Login.fail_message)
  return &fail_message_;
}

// -------------------------------------------------------------------

// C_Register

// repeated string email = 1;
inline int C_Register::_internal_email_size() const {
  return email_.size();
}
inline int C_Register::email_size() const {
  return _internal_email_size();
}
inline void C_Register::clear_email() {
  email_.Clear();
}
inline std::string* C_Register::add_email() {
  std::string* _s = _internal_add_email();
  // @@protoc_insertion_point(field_add_mutable:account.login.C_Register.email)
  return _s;
}
inline const std::string& C_Register::_internal_email(int index) const {
  return email_.Get(index);
}
inline const std::string& C_Register::email(int index) const {
  // @@protoc_insertion_point(field_get:account.login.C_Register.email)
  return _internal_email(index);
}
inline std::string* C_Register::mutable_email(int index) {
  // @@protoc_insertion_point(field_mutable:account.login.C_Register.email)
  return email_.Mutable(index);
}
inline void C_Register::set_email(int index, const std::string& value) {
  email_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:account.login.C_Register.email)
}
inline void C_Register::set_email(int index, std::string&& value) {
  email_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:account.login.C_Register.email)
}
inline void C_Register::set_email(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  email_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:account.login.C_Register.email)
}
inline void C_Register::set_email(int index, const char* value, size_t size) {
  email_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account.login.C_Register.email)
}
inline std::string* C_Register::_internal_add_email() {
  return email_.Add();
}
inline void C_Register::add_email(const std::string& value) {
  email_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:account.login.C_Register.email)
}
inline void C_Register::add_email(std::string&& value) {
  email_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:account.login.C_Register.email)
}
inline void C_Register::add_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  email_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:account.login.C_Register.email)
}
inline void C_Register::add_email(const char* value, size_t size) {
  email_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:account.login.C_Register.email)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
C_Register::email() const {
  // @@protoc_insertion_point(field_list:account.login.C_Register.email)
  return email_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
C_Register::mutable_email() {
  // @@protoc_insertion_point(field_mutable_list:account.login.C_Register.email)
  return &email_;
}

// repeated string password = 2;
inline int C_Register::_internal_password_size() const {
  return password_.size();
}
inline int C_Register::password_size() const {
  return _internal_password_size();
}
inline void C_Register::clear_password() {
  password_.Clear();
}
inline std::string* C_Register::add_password() {
  std::string* _s = _internal_add_password();
  // @@protoc_insertion_point(field_add_mutable:account.login.C_Register.password)
  return _s;
}
inline const std::string& C_Register::_internal_password(int index) const {
  return password_.Get(index);
}
inline const std::string& C_Register::password(int index) const {
  // @@protoc_insertion_point(field_get:account.login.C_Register.password)
  return _internal_password(index);
}
inline std::string* C_Register::mutable_password(int index) {
  // @@protoc_insertion_point(field_mutable:account.login.C_Register.password)
  return password_.Mutable(index);
}
inline void C_Register::set_password(int index, const std::string& value) {
  password_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:account.login.C_Register.password)
}
inline void C_Register::set_password(int index, std::string&& value) {
  password_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:account.login.C_Register.password)
}
inline void C_Register::set_password(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  password_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:account.login.C_Register.password)
}
inline void C_Register::set_password(int index, const char* value, size_t size) {
  password_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account.login.C_Register.password)
}
inline std::string* C_Register::_internal_add_password() {
  return password_.Add();
}
inline void C_Register::add_password(const std::string& value) {
  password_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:account.login.C_Register.password)
}
inline void C_Register::add_password(std::string&& value) {
  password_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:account.login.C_Register.password)
}
inline void C_Register::add_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  password_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:account.login.C_Register.password)
}
inline void C_Register::add_password(const char* value, size_t size) {
  password_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:account.login.C_Register.password)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
C_Register::password() const {
  // @@protoc_insertion_point(field_list:account.login.C_Register.password)
  return password_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
C_Register::mutable_password() {
  // @@protoc_insertion_point(field_mutable_list:account.login.C_Register.password)
  return &password_;
}

// repeated string confirm_password = 3;
inline int C_Register::_internal_confirm_password_size() const {
  return confirm_password_.size();
}
inline int C_Register::confirm_password_size() const {
  return _internal_confirm_password_size();
}
inline void C_Register::clear_confirm_password() {
  confirm_password_.Clear();
}
inline std::string* C_Register::add_confirm_password() {
  std::string* _s = _internal_add_confirm_password();
  // @@protoc_insertion_point(field_add_mutable:account.login.C_Register.confirm_password)
  return _s;
}
inline const std::string& C_Register::_internal_confirm_password(int index) const {
  return confirm_password_.Get(index);
}
inline const std::string& C_Register::confirm_password(int index) const {
  // @@protoc_insertion_point(field_get:account.login.C_Register.confirm_password)
  return _internal_confirm_password(index);
}
inline std::string* C_Register::mutable_confirm_password(int index) {
  // @@protoc_insertion_point(field_mutable:account.login.C_Register.confirm_password)
  return confirm_password_.Mutable(index);
}
inline void C_Register::set_confirm_password(int index, const std::string& value) {
  confirm_password_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:account.login.C_Register.confirm_password)
}
inline void C_Register::set_confirm_password(int index, std::string&& value) {
  confirm_password_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:account.login.C_Register.confirm_password)
}
inline void C_Register::set_confirm_password(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  confirm_password_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:account.login.C_Register.confirm_password)
}
inline void C_Register::set_confirm_password(int index, const char* value, size_t size) {
  confirm_password_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account.login.C_Register.confirm_password)
}
inline std::string* C_Register::_internal_add_confirm_password() {
  return confirm_password_.Add();
}
inline void C_Register::add_confirm_password(const std::string& value) {
  confirm_password_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:account.login.C_Register.confirm_password)
}
inline void C_Register::add_confirm_password(std::string&& value) {
  confirm_password_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:account.login.C_Register.confirm_password)
}
inline void C_Register::add_confirm_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  confirm_password_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:account.login.C_Register.confirm_password)
}
inline void C_Register::add_confirm_password(const char* value, size_t size) {
  confirm_password_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:account.login.C_Register.confirm_password)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
C_Register::confirm_password() const {
  // @@protoc_insertion_point(field_list:account.login.C_Register.confirm_password)
  return confirm_password_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
C_Register::mutable_confirm_password() {
  // @@protoc_insertion_point(field_mutable_list:account.login.C_Register.confirm_password)
  return &confirm_password_;
}

// -------------------------------------------------------------------

// S_Register

// int32 is_success = 1;
inline void S_Register::clear_is_success() {
  is_success_ = 0;
}
inline int32_t S_Register::_internal_is_success() const {
  return is_success_;
}
inline int32_t S_Register::is_success() const {
  // @@protoc_insertion_point(field_get:account.login.S_Register.is_success)
  return _internal_is_success();
}
inline void S_Register::_internal_set_is_success(int32_t value) {
  
  is_success_ = value;
}
inline void S_Register::set_is_success(int32_t value) {
  _internal_set_is_success(value);
  // @@protoc_insertion_point(field_set:account.login.S_Register.is_success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace login
}  // namespace account

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Login_2eproto
